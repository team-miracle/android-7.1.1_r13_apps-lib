// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.android.server.wifi;

// @@protoc_insertion_point(imports_scope)

@SuppressWarnings("hiding")
public interface WifiMetricsProto {

  public static final class WifiLog extends
      com.google.protobuf.nano.MessageNano {

    // enum ScanReturnCode
    public static final int SCAN_UNKNOWN = 0;
    public static final int SCAN_SUCCESS = 1;
    public static final int SCAN_FAILURE_INTERRUPTED = 2;
    public static final int SCAN_FAILURE_INVALID_CONFIGURATION = 3;
    public static final int FAILURE_WIFI_DISABLED = 4;

    // enum WifiState
    public static final int WIFI_UNKNOWN = 0;
    public static final int WIFI_DISABLED = 1;
    public static final int WIFI_DISCONNECTED = 2;
    public static final int WIFI_ASSOCIATED = 3;

    public static final class ScanReturnEntry extends
        com.google.protobuf.nano.MessageNano {

      private static volatile ScanReturnEntry[] _emptyArray;
      public static ScanReturnEntry[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new ScanReturnEntry[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional .clearcut.connectivity.WifiLog.ScanReturnCode scan_return_code = 1;
      public int scanReturnCode;

      // optional int32 scan_results_count = 2;
      public int scanResultsCount;

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.WifiLog.ScanReturnEntry)

      public ScanReturnEntry() {
        clear();
      }

      public ScanReturnEntry clear() {
        scanReturnCode = com.android.server.wifi.WifiMetricsProto.WifiLog.SCAN_UNKNOWN;
        scanResultsCount = 0;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.scanReturnCode != com.android.server.wifi.WifiMetricsProto.WifiLog.SCAN_UNKNOWN) {
          output.writeInt32(1, this.scanReturnCode);
        }
        if (this.scanResultsCount != 0) {
          output.writeInt32(2, this.scanResultsCount);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.scanReturnCode != com.android.server.wifi.WifiMetricsProto.WifiLog.SCAN_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.scanReturnCode);
        }
        if (this.scanResultsCount != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(2, this.scanResultsCount);
        }
        return size;
      }

      @Override
      public ScanReturnEntry mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int value = input.readInt32();
              switch (value) {
                case com.android.server.wifi.WifiMetricsProto.WifiLog.SCAN_UNKNOWN:
                case com.android.server.wifi.WifiMetricsProto.WifiLog.SCAN_SUCCESS:
                case com.android.server.wifi.WifiMetricsProto.WifiLog.SCAN_FAILURE_INTERRUPTED:
                case com.android.server.wifi.WifiMetricsProto.WifiLog.SCAN_FAILURE_INVALID_CONFIGURATION:
                case com.android.server.wifi.WifiMetricsProto.WifiLog.FAILURE_WIFI_DISABLED:
                  this.scanReturnCode = value;
                  break;
              }
              break;
            }
            case 16: {
              this.scanResultsCount = input.readInt32();
              break;
            }
          }
        }
      }

      public static ScanReturnEntry parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new ScanReturnEntry(), data);
      }

      public static ScanReturnEntry parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new ScanReturnEntry().mergeFrom(input);
      }
    }

    public static final class WifiSystemStateEntry extends
        com.google.protobuf.nano.MessageNano {

      private static volatile WifiSystemStateEntry[] _emptyArray;
      public static WifiSystemStateEntry[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new WifiSystemStateEntry[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional .clearcut.connectivity.WifiLog.WifiState wifi_state = 1;
      public int wifiState;

      // optional int32 wifi_state_count = 2;
      public int wifiStateCount;

      // optional bool is_screen_on = 3;
      public boolean isScreenOn;

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.WifiLog.WifiSystemStateEntry)

      public WifiSystemStateEntry() {
        clear();
      }

      public WifiSystemStateEntry clear() {
        wifiState = com.android.server.wifi.WifiMetricsProto.WifiLog.WIFI_UNKNOWN;
        wifiStateCount = 0;
        isScreenOn = false;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.wifiState != com.android.server.wifi.WifiMetricsProto.WifiLog.WIFI_UNKNOWN) {
          output.writeInt32(1, this.wifiState);
        }
        if (this.wifiStateCount != 0) {
          output.writeInt32(2, this.wifiStateCount);
        }
        if (this.isScreenOn != false) {
          output.writeBool(3, this.isScreenOn);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.wifiState != com.android.server.wifi.WifiMetricsProto.WifiLog.WIFI_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.wifiState);
        }
        if (this.wifiStateCount != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(2, this.wifiStateCount);
        }
        if (this.isScreenOn != false) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeBoolSize(3, this.isScreenOn);
        }
        return size;
      }

      @Override
      public WifiSystemStateEntry mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int value = input.readInt32();
              switch (value) {
                case com.android.server.wifi.WifiMetricsProto.WifiLog.WIFI_UNKNOWN:
                case com.android.server.wifi.WifiMetricsProto.WifiLog.WIFI_DISABLED:
                case com.android.server.wifi.WifiMetricsProto.WifiLog.WIFI_DISCONNECTED:
                case com.android.server.wifi.WifiMetricsProto.WifiLog.WIFI_ASSOCIATED:
                  this.wifiState = value;
                  break;
              }
              break;
            }
            case 16: {
              this.wifiStateCount = input.readInt32();
              break;
            }
            case 24: {
              this.isScreenOn = input.readBool();
              break;
            }
          }
        }
      }

      public static WifiSystemStateEntry parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new WifiSystemStateEntry(), data);
      }

      public static WifiSystemStateEntry parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new WifiSystemStateEntry().mergeFrom(input);
      }
    }

    private static volatile WifiLog[] _emptyArray;
    public static WifiLog[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new WifiLog[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated .clearcut.connectivity.ConnectionEvent connection_event = 1;
    public com.android.server.wifi.WifiMetricsProto.ConnectionEvent[] connectionEvent;

    // optional int32 num_saved_networks = 2;
    public int numSavedNetworks;

    // optional int32 num_open_networks = 3;
    public int numOpenNetworks;

    // optional int32 num_personal_networks = 4;
    public int numPersonalNetworks;

    // optional int32 num_enterprise_networks = 5;
    public int numEnterpriseNetworks;

    // optional bool is_location_enabled = 6;
    public boolean isLocationEnabled;

    // optional bool is_scanning_always_enabled = 7;
    public boolean isScanningAlwaysEnabled;

    // optional int32 num_wifi_toggled_via_settings = 8;
    public int numWifiToggledViaSettings;

    // optional int32 num_wifi_toggled_via_airplane = 9;
    public int numWifiToggledViaAirplane;

    // optional int32 num_networks_added_by_user = 10;
    public int numNetworksAddedByUser;

    // optional int32 num_networks_added_by_apps = 11;
    public int numNetworksAddedByApps;

    // optional int32 num_empty_scan_results = 12;
    public int numEmptyScanResults;

    // optional int32 num_non_empty_scan_results = 13;
    public int numNonEmptyScanResults;

    // optional int32 num_oneshot_scans = 14;
    public int numOneshotScans;

    // optional int32 num_background_scans = 15;
    public int numBackgroundScans;

    // repeated .clearcut.connectivity.WifiLog.ScanReturnEntry scan_return_entries = 16;
    public com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry[] scanReturnEntries;

    // repeated .clearcut.connectivity.WifiLog.WifiSystemStateEntry wifi_system_state_entries = 17;
    public com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry[] wifiSystemStateEntries;

    // repeated .clearcut.connectivity.WifiLog.ScanReturnEntry background_scan_return_entries = 18;
    public com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry[] backgroundScanReturnEntries;

    // repeated .clearcut.connectivity.WifiLog.WifiSystemStateEntry background_scan_request_state = 19;
    public com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry[] backgroundScanRequestState;

    // optional int32 num_last_resort_watchdog_triggers = 20;
    public int numLastResortWatchdogTriggers;

    // optional int32 num_last_resort_watchdog_bad_association_networks_total = 21;
    public int numLastResortWatchdogBadAssociationNetworksTotal;

    // optional int32 num_last_resort_watchdog_bad_authentication_networks_total = 22;
    public int numLastResortWatchdogBadAuthenticationNetworksTotal;

    // optional int32 num_last_resort_watchdog_bad_dhcp_networks_total = 23;
    public int numLastResortWatchdogBadDhcpNetworksTotal;

    // optional int32 num_last_resort_watchdog_bad_other_networks_total = 24;
    public int numLastResortWatchdogBadOtherNetworksTotal;

    // optional int32 num_last_resort_watchdog_available_networks_total = 25;
    public int numLastResortWatchdogAvailableNetworksTotal;

    // optional int32 num_last_resort_watchdog_triggers_with_bad_association = 26;
    public int numLastResortWatchdogTriggersWithBadAssociation;

    // optional int32 num_last_resort_watchdog_triggers_with_bad_authentication = 27;
    public int numLastResortWatchdogTriggersWithBadAuthentication;

    // optional int32 num_last_resort_watchdog_triggers_with_bad_dhcp = 28;
    public int numLastResortWatchdogTriggersWithBadDhcp;

    // optional int32 num_last_resort_watchdog_triggers_with_bad_other = 29;
    public int numLastResortWatchdogTriggersWithBadOther;

    // optional int32 num_connectivity_watchdog_pno_good = 30;
    public int numConnectivityWatchdogPnoGood;

    // optional int32 num_connectivity_watchdog_pno_bad = 31;
    public int numConnectivityWatchdogPnoBad;

    // optional int32 num_connectivity_watchdog_background_good = 32;
    public int numConnectivityWatchdogBackgroundGood;

    // optional int32 num_connectivity_watchdog_background_bad = 33;
    public int numConnectivityWatchdogBackgroundBad;

    // optional int32 record_duration_sec = 34;
    public int recordDurationSec;

    // repeated .clearcut.connectivity.RssiPollCount rssi_poll_rssi_count = 35;
    public com.android.server.wifi.WifiMetricsProto.RssiPollCount[] rssiPollRssiCount;

    // optional int32 num_last_resort_watchdog_successes = 36;
    public int numLastResortWatchdogSuccesses;

    // repeated .clearcut.connectivity.AlertReasonCount alert_reason_count = 47;
    public com.android.server.wifi.WifiMetricsProto.AlertReasonCount[] alertReasonCount;

    // optional int32 num_hidden_networks = 37;
    public int numHiddenNetworks;

    // optional int32 num_passpoint_networks = 38;
    public int numPasspointNetworks;

    // optional int32 num_total_scan_results = 39;
    public int numTotalScanResults;

    // optional int32 num_open_network_scan_results = 40;
    public int numOpenNetworkScanResults;

    // optional int32 num_personal_network_scan_results = 41;
    public int numPersonalNetworkScanResults;

    // optional int32 num_enterprise_network_scan_results = 42;
    public int numEnterpriseNetworkScanResults;

    // optional int32 num_hidden_network_scan_results = 43;
    public int numHiddenNetworkScanResults;

    // optional int32 num_hotspot2_r1_network_scan_results = 44;
    public int numHotspot2R1NetworkScanResults;

    // optional int32 num_hotspot2_r2_network_scan_results = 45;
    public int numHotspot2R2NetworkScanResults;

    // optional int32 num_scans = 46;
    public int numScans;

    // repeated .clearcut.connectivity.WifiScoreCount wifi_score_count = 48;
    public com.android.server.wifi.WifiMetricsProto.WifiScoreCount[] wifiScoreCount;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.WifiLog)

    public WifiLog() {
      clear();
    }

    public WifiLog clear() {
      connectionEvent = com.android.server.wifi.WifiMetricsProto.ConnectionEvent.emptyArray();
      numSavedNetworks = 0;
      numOpenNetworks = 0;
      numPersonalNetworks = 0;
      numEnterpriseNetworks = 0;
      isLocationEnabled = false;
      isScanningAlwaysEnabled = false;
      numWifiToggledViaSettings = 0;
      numWifiToggledViaAirplane = 0;
      numNetworksAddedByUser = 0;
      numNetworksAddedByApps = 0;
      numEmptyScanResults = 0;
      numNonEmptyScanResults = 0;
      numOneshotScans = 0;
      numBackgroundScans = 0;
      scanReturnEntries = com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry.emptyArray();
      wifiSystemStateEntries = com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry.emptyArray();
      backgroundScanReturnEntries = com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry.emptyArray();
      backgroundScanRequestState = com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry.emptyArray();
      numLastResortWatchdogTriggers = 0;
      numLastResortWatchdogBadAssociationNetworksTotal = 0;
      numLastResortWatchdogBadAuthenticationNetworksTotal = 0;
      numLastResortWatchdogBadDhcpNetworksTotal = 0;
      numLastResortWatchdogBadOtherNetworksTotal = 0;
      numLastResortWatchdogAvailableNetworksTotal = 0;
      numLastResortWatchdogTriggersWithBadAssociation = 0;
      numLastResortWatchdogTriggersWithBadAuthentication = 0;
      numLastResortWatchdogTriggersWithBadDhcp = 0;
      numLastResortWatchdogTriggersWithBadOther = 0;
      numConnectivityWatchdogPnoGood = 0;
      numConnectivityWatchdogPnoBad = 0;
      numConnectivityWatchdogBackgroundGood = 0;
      numConnectivityWatchdogBackgroundBad = 0;
      recordDurationSec = 0;
      rssiPollRssiCount = com.android.server.wifi.WifiMetricsProto.RssiPollCount.emptyArray();
      numLastResortWatchdogSuccesses = 0;
      alertReasonCount = com.android.server.wifi.WifiMetricsProto.AlertReasonCount.emptyArray();
      numHiddenNetworks = 0;
      numPasspointNetworks = 0;
      numTotalScanResults = 0;
      numOpenNetworkScanResults = 0;
      numPersonalNetworkScanResults = 0;
      numEnterpriseNetworkScanResults = 0;
      numHiddenNetworkScanResults = 0;
      numHotspot2R1NetworkScanResults = 0;
      numHotspot2R2NetworkScanResults = 0;
      numScans = 0;
      wifiScoreCount = com.android.server.wifi.WifiMetricsProto.WifiScoreCount.emptyArray();
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.connectionEvent != null && this.connectionEvent.length > 0) {
        for (int i = 0; i < this.connectionEvent.length; i++) {
          com.android.server.wifi.WifiMetricsProto.ConnectionEvent element = this.connectionEvent[i];
          if (element != null) {
            output.writeMessage(1, element);
          }
        }
      }
      if (this.numSavedNetworks != 0) {
        output.writeInt32(2, this.numSavedNetworks);
      }
      if (this.numOpenNetworks != 0) {
        output.writeInt32(3, this.numOpenNetworks);
      }
      if (this.numPersonalNetworks != 0) {
        output.writeInt32(4, this.numPersonalNetworks);
      }
      if (this.numEnterpriseNetworks != 0) {
        output.writeInt32(5, this.numEnterpriseNetworks);
      }
      if (this.isLocationEnabled != false) {
        output.writeBool(6, this.isLocationEnabled);
      }
      if (this.isScanningAlwaysEnabled != false) {
        output.writeBool(7, this.isScanningAlwaysEnabled);
      }
      if (this.numWifiToggledViaSettings != 0) {
        output.writeInt32(8, this.numWifiToggledViaSettings);
      }
      if (this.numWifiToggledViaAirplane != 0) {
        output.writeInt32(9, this.numWifiToggledViaAirplane);
      }
      if (this.numNetworksAddedByUser != 0) {
        output.writeInt32(10, this.numNetworksAddedByUser);
      }
      if (this.numNetworksAddedByApps != 0) {
        output.writeInt32(11, this.numNetworksAddedByApps);
      }
      if (this.numEmptyScanResults != 0) {
        output.writeInt32(12, this.numEmptyScanResults);
      }
      if (this.numNonEmptyScanResults != 0) {
        output.writeInt32(13, this.numNonEmptyScanResults);
      }
      if (this.numOneshotScans != 0) {
        output.writeInt32(14, this.numOneshotScans);
      }
      if (this.numBackgroundScans != 0) {
        output.writeInt32(15, this.numBackgroundScans);
      }
      if (this.scanReturnEntries != null && this.scanReturnEntries.length > 0) {
        for (int i = 0; i < this.scanReturnEntries.length; i++) {
          com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry element = this.scanReturnEntries[i];
          if (element != null) {
            output.writeMessage(16, element);
          }
        }
      }
      if (this.wifiSystemStateEntries != null && this.wifiSystemStateEntries.length > 0) {
        for (int i = 0; i < this.wifiSystemStateEntries.length; i++) {
          com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry element = this.wifiSystemStateEntries[i];
          if (element != null) {
            output.writeMessage(17, element);
          }
        }
      }
      if (this.backgroundScanReturnEntries != null && this.backgroundScanReturnEntries.length > 0) {
        for (int i = 0; i < this.backgroundScanReturnEntries.length; i++) {
          com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry element = this.backgroundScanReturnEntries[i];
          if (element != null) {
            output.writeMessage(18, element);
          }
        }
      }
      if (this.backgroundScanRequestState != null && this.backgroundScanRequestState.length > 0) {
        for (int i = 0; i < this.backgroundScanRequestState.length; i++) {
          com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry element = this.backgroundScanRequestState[i];
          if (element != null) {
            output.writeMessage(19, element);
          }
        }
      }
      if (this.numLastResortWatchdogTriggers != 0) {
        output.writeInt32(20, this.numLastResortWatchdogTriggers);
      }
      if (this.numLastResortWatchdogBadAssociationNetworksTotal != 0) {
        output.writeInt32(21, this.numLastResortWatchdogBadAssociationNetworksTotal);
      }
      if (this.numLastResortWatchdogBadAuthenticationNetworksTotal != 0) {
        output.writeInt32(22, this.numLastResortWatchdogBadAuthenticationNetworksTotal);
      }
      if (this.numLastResortWatchdogBadDhcpNetworksTotal != 0) {
        output.writeInt32(23, this.numLastResortWatchdogBadDhcpNetworksTotal);
      }
      if (this.numLastResortWatchdogBadOtherNetworksTotal != 0) {
        output.writeInt32(24, this.numLastResortWatchdogBadOtherNetworksTotal);
      }
      if (this.numLastResortWatchdogAvailableNetworksTotal != 0) {
        output.writeInt32(25, this.numLastResortWatchdogAvailableNetworksTotal);
      }
      if (this.numLastResortWatchdogTriggersWithBadAssociation != 0) {
        output.writeInt32(26, this.numLastResortWatchdogTriggersWithBadAssociation);
      }
      if (this.numLastResortWatchdogTriggersWithBadAuthentication != 0) {
        output.writeInt32(27, this.numLastResortWatchdogTriggersWithBadAuthentication);
      }
      if (this.numLastResortWatchdogTriggersWithBadDhcp != 0) {
        output.writeInt32(28, this.numLastResortWatchdogTriggersWithBadDhcp);
      }
      if (this.numLastResortWatchdogTriggersWithBadOther != 0) {
        output.writeInt32(29, this.numLastResortWatchdogTriggersWithBadOther);
      }
      if (this.numConnectivityWatchdogPnoGood != 0) {
        output.writeInt32(30, this.numConnectivityWatchdogPnoGood);
      }
      if (this.numConnectivityWatchdogPnoBad != 0) {
        output.writeInt32(31, this.numConnectivityWatchdogPnoBad);
      }
      if (this.numConnectivityWatchdogBackgroundGood != 0) {
        output.writeInt32(32, this.numConnectivityWatchdogBackgroundGood);
      }
      if (this.numConnectivityWatchdogBackgroundBad != 0) {
        output.writeInt32(33, this.numConnectivityWatchdogBackgroundBad);
      }
      if (this.recordDurationSec != 0) {
        output.writeInt32(34, this.recordDurationSec);
      }
      if (this.rssiPollRssiCount != null && this.rssiPollRssiCount.length > 0) {
        for (int i = 0; i < this.rssiPollRssiCount.length; i++) {
          com.android.server.wifi.WifiMetricsProto.RssiPollCount element = this.rssiPollRssiCount[i];
          if (element != null) {
            output.writeMessage(35, element);
          }
        }
      }
      if (this.numLastResortWatchdogSuccesses != 0) {
        output.writeInt32(36, this.numLastResortWatchdogSuccesses);
      }
      if (this.numHiddenNetworks != 0) {
        output.writeInt32(37, this.numHiddenNetworks);
      }
      if (this.numPasspointNetworks != 0) {
        output.writeInt32(38, this.numPasspointNetworks);
      }
      if (this.numTotalScanResults != 0) {
        output.writeInt32(39, this.numTotalScanResults);
      }
      if (this.numOpenNetworkScanResults != 0) {
        output.writeInt32(40, this.numOpenNetworkScanResults);
      }
      if (this.numPersonalNetworkScanResults != 0) {
        output.writeInt32(41, this.numPersonalNetworkScanResults);
      }
      if (this.numEnterpriseNetworkScanResults != 0) {
        output.writeInt32(42, this.numEnterpriseNetworkScanResults);
      }
      if (this.numHiddenNetworkScanResults != 0) {
        output.writeInt32(43, this.numHiddenNetworkScanResults);
      }
      if (this.numHotspot2R1NetworkScanResults != 0) {
        output.writeInt32(44, this.numHotspot2R1NetworkScanResults);
      }
      if (this.numHotspot2R2NetworkScanResults != 0) {
        output.writeInt32(45, this.numHotspot2R2NetworkScanResults);
      }
      if (this.numScans != 0) {
        output.writeInt32(46, this.numScans);
      }
      if (this.alertReasonCount != null && this.alertReasonCount.length > 0) {
        for (int i = 0; i < this.alertReasonCount.length; i++) {
          com.android.server.wifi.WifiMetricsProto.AlertReasonCount element = this.alertReasonCount[i];
          if (element != null) {
            output.writeMessage(47, element);
          }
        }
      }
      if (this.wifiScoreCount != null && this.wifiScoreCount.length > 0) {
        for (int i = 0; i < this.wifiScoreCount.length; i++) {
          com.android.server.wifi.WifiMetricsProto.WifiScoreCount element = this.wifiScoreCount[i];
          if (element != null) {
            output.writeMessage(48, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.connectionEvent != null && this.connectionEvent.length > 0) {
        for (int i = 0; i < this.connectionEvent.length; i++) {
          com.android.server.wifi.WifiMetricsProto.ConnectionEvent element = this.connectionEvent[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(1, element);
          }
        }
      }
      if (this.numSavedNetworks != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.numSavedNetworks);
      }
      if (this.numOpenNetworks != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, this.numOpenNetworks);
      }
      if (this.numPersonalNetworks != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(4, this.numPersonalNetworks);
      }
      if (this.numEnterpriseNetworks != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(5, this.numEnterpriseNetworks);
      }
      if (this.isLocationEnabled != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(6, this.isLocationEnabled);
      }
      if (this.isScanningAlwaysEnabled != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(7, this.isScanningAlwaysEnabled);
      }
      if (this.numWifiToggledViaSettings != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(8, this.numWifiToggledViaSettings);
      }
      if (this.numWifiToggledViaAirplane != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(9, this.numWifiToggledViaAirplane);
      }
      if (this.numNetworksAddedByUser != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(10, this.numNetworksAddedByUser);
      }
      if (this.numNetworksAddedByApps != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(11, this.numNetworksAddedByApps);
      }
      if (this.numEmptyScanResults != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(12, this.numEmptyScanResults);
      }
      if (this.numNonEmptyScanResults != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(13, this.numNonEmptyScanResults);
      }
      if (this.numOneshotScans != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(14, this.numOneshotScans);
      }
      if (this.numBackgroundScans != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(15, this.numBackgroundScans);
      }
      if (this.scanReturnEntries != null && this.scanReturnEntries.length > 0) {
        for (int i = 0; i < this.scanReturnEntries.length; i++) {
          com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry element = this.scanReturnEntries[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(16, element);
          }
        }
      }
      if (this.wifiSystemStateEntries != null && this.wifiSystemStateEntries.length > 0) {
        for (int i = 0; i < this.wifiSystemStateEntries.length; i++) {
          com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry element = this.wifiSystemStateEntries[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(17, element);
          }
        }
      }
      if (this.backgroundScanReturnEntries != null && this.backgroundScanReturnEntries.length > 0) {
        for (int i = 0; i < this.backgroundScanReturnEntries.length; i++) {
          com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry element = this.backgroundScanReturnEntries[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(18, element);
          }
        }
      }
      if (this.backgroundScanRequestState != null && this.backgroundScanRequestState.length > 0) {
        for (int i = 0; i < this.backgroundScanRequestState.length; i++) {
          com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry element = this.backgroundScanRequestState[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(19, element);
          }
        }
      }
      if (this.numLastResortWatchdogTriggers != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(20, this.numLastResortWatchdogTriggers);
      }
      if (this.numLastResortWatchdogBadAssociationNetworksTotal != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(21, this.numLastResortWatchdogBadAssociationNetworksTotal);
      }
      if (this.numLastResortWatchdogBadAuthenticationNetworksTotal != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(22, this.numLastResortWatchdogBadAuthenticationNetworksTotal);
      }
      if (this.numLastResortWatchdogBadDhcpNetworksTotal != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(23, this.numLastResortWatchdogBadDhcpNetworksTotal);
      }
      if (this.numLastResortWatchdogBadOtherNetworksTotal != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(24, this.numLastResortWatchdogBadOtherNetworksTotal);
      }
      if (this.numLastResortWatchdogAvailableNetworksTotal != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(25, this.numLastResortWatchdogAvailableNetworksTotal);
      }
      if (this.numLastResortWatchdogTriggersWithBadAssociation != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(26, this.numLastResortWatchdogTriggersWithBadAssociation);
      }
      if (this.numLastResortWatchdogTriggersWithBadAuthentication != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(27, this.numLastResortWatchdogTriggersWithBadAuthentication);
      }
      if (this.numLastResortWatchdogTriggersWithBadDhcp != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(28, this.numLastResortWatchdogTriggersWithBadDhcp);
      }
      if (this.numLastResortWatchdogTriggersWithBadOther != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(29, this.numLastResortWatchdogTriggersWithBadOther);
      }
      if (this.numConnectivityWatchdogPnoGood != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(30, this.numConnectivityWatchdogPnoGood);
      }
      if (this.numConnectivityWatchdogPnoBad != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(31, this.numConnectivityWatchdogPnoBad);
      }
      if (this.numConnectivityWatchdogBackgroundGood != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(32, this.numConnectivityWatchdogBackgroundGood);
      }
      if (this.numConnectivityWatchdogBackgroundBad != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(33, this.numConnectivityWatchdogBackgroundBad);
      }
      if (this.recordDurationSec != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(34, this.recordDurationSec);
      }
      if (this.rssiPollRssiCount != null && this.rssiPollRssiCount.length > 0) {
        for (int i = 0; i < this.rssiPollRssiCount.length; i++) {
          com.android.server.wifi.WifiMetricsProto.RssiPollCount element = this.rssiPollRssiCount[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(35, element);
          }
        }
      }
      if (this.numLastResortWatchdogSuccesses != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(36, this.numLastResortWatchdogSuccesses);
      }
      if (this.numHiddenNetworks != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(37, this.numHiddenNetworks);
      }
      if (this.numPasspointNetworks != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(38, this.numPasspointNetworks);
      }
      if (this.numTotalScanResults != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(39, this.numTotalScanResults);
      }
      if (this.numOpenNetworkScanResults != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(40, this.numOpenNetworkScanResults);
      }
      if (this.numPersonalNetworkScanResults != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(41, this.numPersonalNetworkScanResults);
      }
      if (this.numEnterpriseNetworkScanResults != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(42, this.numEnterpriseNetworkScanResults);
      }
      if (this.numHiddenNetworkScanResults != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(43, this.numHiddenNetworkScanResults);
      }
      if (this.numHotspot2R1NetworkScanResults != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(44, this.numHotspot2R1NetworkScanResults);
      }
      if (this.numHotspot2R2NetworkScanResults != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(45, this.numHotspot2R2NetworkScanResults);
      }
      if (this.numScans != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(46, this.numScans);
      }
      if (this.alertReasonCount != null && this.alertReasonCount.length > 0) {
        for (int i = 0; i < this.alertReasonCount.length; i++) {
          com.android.server.wifi.WifiMetricsProto.AlertReasonCount element = this.alertReasonCount[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(47, element);
          }
        }
      }
      if (this.wifiScoreCount != null && this.wifiScoreCount.length > 0) {
        for (int i = 0; i < this.wifiScoreCount.length; i++) {
          com.android.server.wifi.WifiMetricsProto.WifiScoreCount element = this.wifiScoreCount[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(48, element);
          }
        }
      }
      return size;
    }

    @Override
    public WifiLog mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 10);
            int i = this.connectionEvent == null ? 0 : this.connectionEvent.length;
            com.android.server.wifi.WifiMetricsProto.ConnectionEvent[] newArray =
                new com.android.server.wifi.WifiMetricsProto.ConnectionEvent[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.connectionEvent, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.server.wifi.WifiMetricsProto.ConnectionEvent();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.server.wifi.WifiMetricsProto.ConnectionEvent();
            input.readMessage(newArray[i]);
            this.connectionEvent = newArray;
            break;
          }
          case 16: {
            this.numSavedNetworks = input.readInt32();
            break;
          }
          case 24: {
            this.numOpenNetworks = input.readInt32();
            break;
          }
          case 32: {
            this.numPersonalNetworks = input.readInt32();
            break;
          }
          case 40: {
            this.numEnterpriseNetworks = input.readInt32();
            break;
          }
          case 48: {
            this.isLocationEnabled = input.readBool();
            break;
          }
          case 56: {
            this.isScanningAlwaysEnabled = input.readBool();
            break;
          }
          case 64: {
            this.numWifiToggledViaSettings = input.readInt32();
            break;
          }
          case 72: {
            this.numWifiToggledViaAirplane = input.readInt32();
            break;
          }
          case 80: {
            this.numNetworksAddedByUser = input.readInt32();
            break;
          }
          case 88: {
            this.numNetworksAddedByApps = input.readInt32();
            break;
          }
          case 96: {
            this.numEmptyScanResults = input.readInt32();
            break;
          }
          case 104: {
            this.numNonEmptyScanResults = input.readInt32();
            break;
          }
          case 112: {
            this.numOneshotScans = input.readInt32();
            break;
          }
          case 120: {
            this.numBackgroundScans = input.readInt32();
            break;
          }
          case 130: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 130);
            int i = this.scanReturnEntries == null ? 0 : this.scanReturnEntries.length;
            com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry[] newArray =
                new com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.scanReturnEntries, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry();
            input.readMessage(newArray[i]);
            this.scanReturnEntries = newArray;
            break;
          }
          case 138: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 138);
            int i = this.wifiSystemStateEntries == null ? 0 : this.wifiSystemStateEntries.length;
            com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry[] newArray =
                new com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.wifiSystemStateEntries, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry();
            input.readMessage(newArray[i]);
            this.wifiSystemStateEntries = newArray;
            break;
          }
          case 146: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 146);
            int i = this.backgroundScanReturnEntries == null ? 0 : this.backgroundScanReturnEntries.length;
            com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry[] newArray =
                new com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.backgroundScanReturnEntries, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.server.wifi.WifiMetricsProto.WifiLog.ScanReturnEntry();
            input.readMessage(newArray[i]);
            this.backgroundScanReturnEntries = newArray;
            break;
          }
          case 154: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 154);
            int i = this.backgroundScanRequestState == null ? 0 : this.backgroundScanRequestState.length;
            com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry[] newArray =
                new com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.backgroundScanRequestState, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.server.wifi.WifiMetricsProto.WifiLog.WifiSystemStateEntry();
            input.readMessage(newArray[i]);
            this.backgroundScanRequestState = newArray;
            break;
          }
          case 160: {
            this.numLastResortWatchdogTriggers = input.readInt32();
            break;
          }
          case 168: {
            this.numLastResortWatchdogBadAssociationNetworksTotal = input.readInt32();
            break;
          }
          case 176: {
            this.numLastResortWatchdogBadAuthenticationNetworksTotal = input.readInt32();
            break;
          }
          case 184: {
            this.numLastResortWatchdogBadDhcpNetworksTotal = input.readInt32();
            break;
          }
          case 192: {
            this.numLastResortWatchdogBadOtherNetworksTotal = input.readInt32();
            break;
          }
          case 200: {
            this.numLastResortWatchdogAvailableNetworksTotal = input.readInt32();
            break;
          }
          case 208: {
            this.numLastResortWatchdogTriggersWithBadAssociation = input.readInt32();
            break;
          }
          case 216: {
            this.numLastResortWatchdogTriggersWithBadAuthentication = input.readInt32();
            break;
          }
          case 224: {
            this.numLastResortWatchdogTriggersWithBadDhcp = input.readInt32();
            break;
          }
          case 232: {
            this.numLastResortWatchdogTriggersWithBadOther = input.readInt32();
            break;
          }
          case 240: {
            this.numConnectivityWatchdogPnoGood = input.readInt32();
            break;
          }
          case 248: {
            this.numConnectivityWatchdogPnoBad = input.readInt32();
            break;
          }
          case 256: {
            this.numConnectivityWatchdogBackgroundGood = input.readInt32();
            break;
          }
          case 264: {
            this.numConnectivityWatchdogBackgroundBad = input.readInt32();
            break;
          }
          case 272: {
            this.recordDurationSec = input.readInt32();
            break;
          }
          case 282: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 282);
            int i = this.rssiPollRssiCount == null ? 0 : this.rssiPollRssiCount.length;
            com.android.server.wifi.WifiMetricsProto.RssiPollCount[] newArray =
                new com.android.server.wifi.WifiMetricsProto.RssiPollCount[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.rssiPollRssiCount, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.server.wifi.WifiMetricsProto.RssiPollCount();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.server.wifi.WifiMetricsProto.RssiPollCount();
            input.readMessage(newArray[i]);
            this.rssiPollRssiCount = newArray;
            break;
          }
          case 288: {
            this.numLastResortWatchdogSuccesses = input.readInt32();
            break;
          }
          case 296: {
            this.numHiddenNetworks = input.readInt32();
            break;
          }
          case 304: {
            this.numPasspointNetworks = input.readInt32();
            break;
          }
          case 312: {
            this.numTotalScanResults = input.readInt32();
            break;
          }
          case 320: {
            this.numOpenNetworkScanResults = input.readInt32();
            break;
          }
          case 328: {
            this.numPersonalNetworkScanResults = input.readInt32();
            break;
          }
          case 336: {
            this.numEnterpriseNetworkScanResults = input.readInt32();
            break;
          }
          case 344: {
            this.numHiddenNetworkScanResults = input.readInt32();
            break;
          }
          case 352: {
            this.numHotspot2R1NetworkScanResults = input.readInt32();
            break;
          }
          case 360: {
            this.numHotspot2R2NetworkScanResults = input.readInt32();
            break;
          }
          case 368: {
            this.numScans = input.readInt32();
            break;
          }
          case 378: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 378);
            int i = this.alertReasonCount == null ? 0 : this.alertReasonCount.length;
            com.android.server.wifi.WifiMetricsProto.AlertReasonCount[] newArray =
                new com.android.server.wifi.WifiMetricsProto.AlertReasonCount[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.alertReasonCount, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.server.wifi.WifiMetricsProto.AlertReasonCount();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.server.wifi.WifiMetricsProto.AlertReasonCount();
            input.readMessage(newArray[i]);
            this.alertReasonCount = newArray;
            break;
          }
          case 386: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 386);
            int i = this.wifiScoreCount == null ? 0 : this.wifiScoreCount.length;
            com.android.server.wifi.WifiMetricsProto.WifiScoreCount[] newArray =
                new com.android.server.wifi.WifiMetricsProto.WifiScoreCount[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.wifiScoreCount, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.server.wifi.WifiMetricsProto.WifiScoreCount();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.server.wifi.WifiMetricsProto.WifiScoreCount();
            input.readMessage(newArray[i]);
            this.wifiScoreCount = newArray;
            break;
          }
        }
      }
    }

    public static WifiLog parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new WifiLog(), data);
    }

    public static WifiLog parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new WifiLog().mergeFrom(input);
    }
  }

  public static final class RouterFingerPrint extends
      com.google.protobuf.nano.MessageNano {

    // enum RoamType
    public static final int ROAM_TYPE_UNKNOWN = 0;
    public static final int ROAM_TYPE_NONE = 1;
    public static final int ROAM_TYPE_ENTERPRISE = 2;
    public static final int ROAM_TYPE_DBDC = 3;

    // enum Auth
    public static final int AUTH_UNKNOWN = 0;
    public static final int AUTH_OPEN = 1;
    public static final int AUTH_PERSONAL = 2;
    public static final int AUTH_ENTERPRISE = 3;

    // enum RouterTechnology
    public static final int ROUTER_TECH_UNKNOWN = 0;
    public static final int ROUTER_TECH_A = 1;
    public static final int ROUTER_TECH_B = 2;
    public static final int ROUTER_TECH_G = 3;
    public static final int ROUTER_TECH_N = 4;
    public static final int ROUTER_TECH_AC = 5;
    public static final int ROUTER_TECH_OTHER = 6;

    private static volatile RouterFingerPrint[] _emptyArray;
    public static RouterFingerPrint[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new RouterFingerPrint[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional .clearcut.connectivity.RouterFingerPrint.RoamType roam_type = 1;
    public int roamType;

    // optional int32 channel_info = 2;
    public int channelInfo;

    // optional int32 dtim = 3;
    public int dtim;

    // optional .clearcut.connectivity.RouterFingerPrint.Auth authentication = 4;
    public int authentication;

    // optional bool hidden = 5;
    public boolean hidden;

    // optional .clearcut.connectivity.RouterFingerPrint.RouterTechnology router_technology = 6;
    public int routerTechnology;

    // optional bool supports_ipv6 = 7;
    public boolean supportsIpv6;

    // optional bool passpoint = 8;
    public boolean passpoint;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.RouterFingerPrint)

    public RouterFingerPrint() {
      clear();
    }

    public RouterFingerPrint clear() {
      roamType = com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROAM_TYPE_UNKNOWN;
      channelInfo = 0;
      dtim = 0;
      authentication = com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.AUTH_UNKNOWN;
      hidden = false;
      routerTechnology = com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROUTER_TECH_UNKNOWN;
      supportsIpv6 = false;
      passpoint = false;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.roamType != com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROAM_TYPE_UNKNOWN) {
        output.writeInt32(1, this.roamType);
      }
      if (this.channelInfo != 0) {
        output.writeInt32(2, this.channelInfo);
      }
      if (this.dtim != 0) {
        output.writeInt32(3, this.dtim);
      }
      if (this.authentication != com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.AUTH_UNKNOWN) {
        output.writeInt32(4, this.authentication);
      }
      if (this.hidden != false) {
        output.writeBool(5, this.hidden);
      }
      if (this.routerTechnology != com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROUTER_TECH_UNKNOWN) {
        output.writeInt32(6, this.routerTechnology);
      }
      if (this.supportsIpv6 != false) {
        output.writeBool(7, this.supportsIpv6);
      }
      if (this.passpoint != false) {
        output.writeBool(8, this.passpoint);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.roamType != com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROAM_TYPE_UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(1, this.roamType);
      }
      if (this.channelInfo != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.channelInfo);
      }
      if (this.dtim != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, this.dtim);
      }
      if (this.authentication != com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.AUTH_UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(4, this.authentication);
      }
      if (this.hidden != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(5, this.hidden);
      }
      if (this.routerTechnology != com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROUTER_TECH_UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(6, this.routerTechnology);
      }
      if (this.supportsIpv6 != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(7, this.supportsIpv6);
      }
      if (this.passpoint != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(8, this.passpoint);
      }
      return size;
    }

    @Override
    public RouterFingerPrint mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            int value = input.readInt32();
            switch (value) {
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROAM_TYPE_UNKNOWN:
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROAM_TYPE_NONE:
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROAM_TYPE_ENTERPRISE:
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROAM_TYPE_DBDC:
                this.roamType = value;
                break;
            }
            break;
          }
          case 16: {
            this.channelInfo = input.readInt32();
            break;
          }
          case 24: {
            this.dtim = input.readInt32();
            break;
          }
          case 32: {
            int value = input.readInt32();
            switch (value) {
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.AUTH_UNKNOWN:
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.AUTH_OPEN:
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.AUTH_PERSONAL:
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.AUTH_ENTERPRISE:
                this.authentication = value;
                break;
            }
            break;
          }
          case 40: {
            this.hidden = input.readBool();
            break;
          }
          case 48: {
            int value = input.readInt32();
            switch (value) {
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROUTER_TECH_UNKNOWN:
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROUTER_TECH_A:
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROUTER_TECH_B:
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROUTER_TECH_G:
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROUTER_TECH_N:
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROUTER_TECH_AC:
              case com.android.server.wifi.WifiMetricsProto.RouterFingerPrint.ROUTER_TECH_OTHER:
                this.routerTechnology = value;
                break;
            }
            break;
          }
          case 56: {
            this.supportsIpv6 = input.readBool();
            break;
          }
          case 64: {
            this.passpoint = input.readBool();
            break;
          }
        }
      }
    }

    public static RouterFingerPrint parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new RouterFingerPrint(), data);
    }

    public static RouterFingerPrint parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new RouterFingerPrint().mergeFrom(input);
    }
  }

  public static final class ConnectionEvent extends
      com.google.protobuf.nano.MessageNano {

    // enum RoamType
    public static final int ROAM_UNKNOWN = 0;
    public static final int ROAM_NONE = 1;
    public static final int ROAM_DBDC = 2;
    public static final int ROAM_ENTERPRISE = 3;
    public static final int ROAM_USER_SELECTED = 4;
    public static final int ROAM_UNRELATED = 5;

    // enum ConnectivityLevelFailure
    public static final int HLF_UNKNOWN = 0;
    public static final int HLF_NONE = 1;
    public static final int HLF_DHCP = 2;
    public static final int HLF_NO_INTERNET = 3;
    public static final int HLF_UNWANTED = 4;

    private static volatile ConnectionEvent[] _emptyArray;
    public static ConnectionEvent[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ConnectionEvent[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int64 start_time_millis = 1;
    public long startTimeMillis;

    // optional int32 duration_taken_to_connect_millis = 2;
    public int durationTakenToConnectMillis;

    // optional .clearcut.connectivity.RouterFingerPrint router_fingerprint = 3;
    public com.android.server.wifi.WifiMetricsProto.RouterFingerPrint routerFingerprint;

    // optional int32 signal_strength = 4;
    public int signalStrength;

    // optional .clearcut.connectivity.ConnectionEvent.RoamType roam_type = 5;
    public int roamType;

    // optional int32 connection_result = 6;
    public int connectionResult;

    // optional int32 level_2_failure_code = 7;
    public int level2FailureCode;

    // optional .clearcut.connectivity.ConnectionEvent.ConnectivityLevelFailure connectivity_level_failure_code = 8;
    public int connectivityLevelFailureCode;

    // optional bool automatic_bug_report_taken = 9;
    public boolean automaticBugReportTaken;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.ConnectionEvent)

    public ConnectionEvent() {
      clear();
    }

    public ConnectionEvent clear() {
      startTimeMillis = 0L;
      durationTakenToConnectMillis = 0;
      routerFingerprint = null;
      signalStrength = 0;
      roamType = com.android.server.wifi.WifiMetricsProto.ConnectionEvent.ROAM_UNKNOWN;
      connectionResult = 0;
      level2FailureCode = 0;
      connectivityLevelFailureCode = com.android.server.wifi.WifiMetricsProto.ConnectionEvent.HLF_UNKNOWN;
      automaticBugReportTaken = false;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.startTimeMillis != 0L) {
        output.writeInt64(1, this.startTimeMillis);
      }
      if (this.durationTakenToConnectMillis != 0) {
        output.writeInt32(2, this.durationTakenToConnectMillis);
      }
      if (this.routerFingerprint != null) {
        output.writeMessage(3, this.routerFingerprint);
      }
      if (this.signalStrength != 0) {
        output.writeInt32(4, this.signalStrength);
      }
      if (this.roamType != com.android.server.wifi.WifiMetricsProto.ConnectionEvent.ROAM_UNKNOWN) {
        output.writeInt32(5, this.roamType);
      }
      if (this.connectionResult != 0) {
        output.writeInt32(6, this.connectionResult);
      }
      if (this.level2FailureCode != 0) {
        output.writeInt32(7, this.level2FailureCode);
      }
      if (this.connectivityLevelFailureCode != com.android.server.wifi.WifiMetricsProto.ConnectionEvent.HLF_UNKNOWN) {
        output.writeInt32(8, this.connectivityLevelFailureCode);
      }
      if (this.automaticBugReportTaken != false) {
        output.writeBool(9, this.automaticBugReportTaken);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.startTimeMillis != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(1, this.startTimeMillis);
      }
      if (this.durationTakenToConnectMillis != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.durationTakenToConnectMillis);
      }
      if (this.routerFingerprint != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(3, this.routerFingerprint);
      }
      if (this.signalStrength != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(4, this.signalStrength);
      }
      if (this.roamType != com.android.server.wifi.WifiMetricsProto.ConnectionEvent.ROAM_UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(5, this.roamType);
      }
      if (this.connectionResult != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(6, this.connectionResult);
      }
      if (this.level2FailureCode != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(7, this.level2FailureCode);
      }
      if (this.connectivityLevelFailureCode != com.android.server.wifi.WifiMetricsProto.ConnectionEvent.HLF_UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(8, this.connectivityLevelFailureCode);
      }
      if (this.automaticBugReportTaken != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(9, this.automaticBugReportTaken);
      }
      return size;
    }

    @Override
    public ConnectionEvent mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.startTimeMillis = input.readInt64();
            break;
          }
          case 16: {
            this.durationTakenToConnectMillis = input.readInt32();
            break;
          }
          case 26: {
            if (this.routerFingerprint == null) {
              this.routerFingerprint = new com.android.server.wifi.WifiMetricsProto.RouterFingerPrint();
            }
            input.readMessage(this.routerFingerprint);
            break;
          }
          case 32: {
            this.signalStrength = input.readInt32();
            break;
          }
          case 40: {
            int value = input.readInt32();
            switch (value) {
              case com.android.server.wifi.WifiMetricsProto.ConnectionEvent.ROAM_UNKNOWN:
              case com.android.server.wifi.WifiMetricsProto.ConnectionEvent.ROAM_NONE:
              case com.android.server.wifi.WifiMetricsProto.ConnectionEvent.ROAM_DBDC:
              case com.android.server.wifi.WifiMetricsProto.ConnectionEvent.ROAM_ENTERPRISE:
              case com.android.server.wifi.WifiMetricsProto.ConnectionEvent.ROAM_USER_SELECTED:
              case com.android.server.wifi.WifiMetricsProto.ConnectionEvent.ROAM_UNRELATED:
                this.roamType = value;
                break;
            }
            break;
          }
          case 48: {
            this.connectionResult = input.readInt32();
            break;
          }
          case 56: {
            this.level2FailureCode = input.readInt32();
            break;
          }
          case 64: {
            int value = input.readInt32();
            switch (value) {
              case com.android.server.wifi.WifiMetricsProto.ConnectionEvent.HLF_UNKNOWN:
              case com.android.server.wifi.WifiMetricsProto.ConnectionEvent.HLF_NONE:
              case com.android.server.wifi.WifiMetricsProto.ConnectionEvent.HLF_DHCP:
              case com.android.server.wifi.WifiMetricsProto.ConnectionEvent.HLF_NO_INTERNET:
              case com.android.server.wifi.WifiMetricsProto.ConnectionEvent.HLF_UNWANTED:
                this.connectivityLevelFailureCode = value;
                break;
            }
            break;
          }
          case 72: {
            this.automaticBugReportTaken = input.readBool();
            break;
          }
        }
      }
    }

    public static ConnectionEvent parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ConnectionEvent(), data);
    }

    public static ConnectionEvent parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ConnectionEvent().mergeFrom(input);
    }
  }

  public static final class RssiPollCount extends
      com.google.protobuf.nano.MessageNano {

    private static volatile RssiPollCount[] _emptyArray;
    public static RssiPollCount[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new RssiPollCount[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int32 rssi = 1;
    public int rssi;

    // optional int32 count = 2;
    public int count;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.RssiPollCount)

    public RssiPollCount() {
      clear();
    }

    public RssiPollCount clear() {
      rssi = 0;
      count = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.rssi != 0) {
        output.writeInt32(1, this.rssi);
      }
      if (this.count != 0) {
        output.writeInt32(2, this.count);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.rssi != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.rssi);
      }
      if (this.count != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.count);
      }
      return size;
    }

    @Override
    public RssiPollCount mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.rssi = input.readInt32();
            break;
          }
          case 16: {
            this.count = input.readInt32();
            break;
          }
        }
      }
    }

    public static RssiPollCount parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new RssiPollCount(), data);
    }

    public static RssiPollCount parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new RssiPollCount().mergeFrom(input);
    }
  }

  public static final class AlertReasonCount extends
      com.google.protobuf.nano.MessageNano {

    private static volatile AlertReasonCount[] _emptyArray;
    public static AlertReasonCount[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new AlertReasonCount[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int32 reason = 1;
    public int reason;

    // optional int32 count = 2;
    public int count;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.AlertReasonCount)

    public AlertReasonCount() {
      clear();
    }

    public AlertReasonCount clear() {
      reason = 0;
      count = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.reason != 0) {
        output.writeInt32(1, this.reason);
      }
      if (this.count != 0) {
        output.writeInt32(2, this.count);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.reason != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.reason);
      }
      if (this.count != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.count);
      }
      return size;
    }

    @Override
    public AlertReasonCount mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.reason = input.readInt32();
            break;
          }
          case 16: {
            this.count = input.readInt32();
            break;
          }
        }
      }
    }

    public static AlertReasonCount parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new AlertReasonCount(), data);
    }

    public static AlertReasonCount parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new AlertReasonCount().mergeFrom(input);
    }
  }

  public static final class WifiScoreCount extends
      com.google.protobuf.nano.MessageNano {

    private static volatile WifiScoreCount[] _emptyArray;
    public static WifiScoreCount[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new WifiScoreCount[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int32 score = 1;
    public int score;

    // optional int32 count = 2;
    public int count;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.WifiScoreCount)

    public WifiScoreCount() {
      clear();
    }

    public WifiScoreCount clear() {
      score = 0;
      count = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.score != 0) {
        output.writeInt32(1, this.score);
      }
      if (this.count != 0) {
        output.writeInt32(2, this.count);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.score != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.score);
      }
      if (this.count != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.count);
      }
      return size;
    }

    @Override
    public WifiScoreCount mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.score = input.readInt32();
            break;
          }
          case 16: {
            this.count = input.readInt32();
            break;
          }
        }
      }
    }

    public static WifiScoreCount parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new WifiScoreCount(), data);
    }

    public static WifiScoreCount parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new WifiScoreCount().mergeFrom(input);
    }
  }
}
