/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.android.keyguard;

public final class R {
    public static final class array {
        /**  list of 3- or 4-letter mnemonics for a 10-key numeric keypad 
 9 
         */
        public static int lockscreen_num_pad_klondike=0x7f080000;
    }
    public static final class attr {
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int allCaps=0x7f010007;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int charPadding=0x7f010006;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int digit=0x7f010002;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int dotSize=0x7f010005;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int layout_maxHeight=0x7f010001;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int layout_maxWidth=0x7f010000;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int scaledTextSize=0x7f010004;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static int textView=0x7f010003;
    }
    public static final class bool {
        /**  Allow the menu hard key to be disabled in LockScreen on some devices [DO NOT TRANSLATE] 
         */
        public static int config_disableMenuKeyInLockScreen=0x7f060005;
        /**  Alias used to reference framework configuration for screen rotation.  
         */
        public static int config_enableLockScreenRotation=0x7f060000;
        /**  Alias used to reference framework configuration for translucent decor.  
         */
        public static int config_enableLockScreenTranslucentDecor=0x7f060001;
        public static int kg_show_ime_at_screen_on=0x7f060002;
        public static int kg_sim_puk_account_full_screen=0x7f060004;
        /**  Carriers in this locale are sensitive to capitalization of carrier text. 
         This makes the entire interface consistent by switching back to normal case. 
 Carriers in this locale are sensitive to capitalization of carrier text. 
         This makes the entire interface consistent by switching back to normal case. 
 Carriers in this locale are sensitive to capitalization of carrier text. 
         This makes the entire interface consistent by switching back to normal case. 
         */
        public static int kg_use_all_caps=0x7f060003;
    }
    public static final class color {
        public static int clock_gray=0x7f040002;
        /**  Clock 
         */
        public static int clock_white=0x7f040001;
        /**  Alias used to reference framework color for transparency. 
         */
        public static int transparent=0x7f040000;
    }
    public static final class dimen {
        /**  The y translation to apply at the start in appear animations. 
         */
        public static int appear_y_translation_start=0x7f090009;
        /**  Default clock parameters 
         */
        public static int bottom_text_spacing_digital=0x7f090006;
        /**  The vertical margin between the date and the owner info. 
         */
        public static int date_owner_info_margin=0x7f09000c;
        /**  The translation for disappearing security views after having solved them. 
         */
        public static int disappear_y_translation=0x7f09000d;
        /**  EmergencyCarrierArea overlap - amount to overlap the emergency button and carrier text.
         Should be 0 on devices with plenty of room (e.g. tablets) 
 EmergencyCarrierArea overlap - amount to overlap the emergency button and carrier text.
         Should be 0 on devices with plenty of room (e.g. tablets) 
         */
        public static int eca_overlap=0x7f090005;
        /**  Height of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
 Height of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
 Height of the sliding KeyguardSecurityContainer (includes 2x
         keyguard_security_view_margin) 
 Height of the sliding KeyguardSecurityContainer
        (includes 2x keyguard_security_view_margin) 
 Height of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
         */
        public static int keyguard_security_height=0x7f090002;
        /**  Max Height of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
         */
        public static int keyguard_security_max_height=0x7f090003;
        /**  Margin around the various security views 
 Margin around the various security views 
         */
        public static int keyguard_security_view_margin=0x7f090004;
        /**  Width of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
 Width of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
 Width of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
         */
        public static int keyguard_security_width=0x7f090001;
        /**  Size of the generic status lines keyguard's status view  
 Size of the generic status lines keyguard's status view  
         */
        public static int kg_status_line_font_size=0x7f090000;
        /**  The padding between chars of the password view. 
         */
        public static int password_char_padding=0x7f09000b;
        /**  The size of the dots in the PIN unlock method. 
         */
        public static int password_dot_size=0x7f09000a;
        /**  Overload default clock widget parameters 
 Overload default clock widget parameters 
         */
        public static int widget_big_font_size=0x7f090008;
        public static int widget_label_font_size=0x7f090007;
    }
    public static final class drawable {
        public static int ic_access_alarms_big=0x7f020000;
        public static int ic_backspace_24dp=0x7f020001;
        public static int ic_done_wht=0x7f020002;
        public static int ic_lockscreen_ime=0x7f020003;
        public static int ic_lockscreen_sim=0x7f020004;
        public static int kg_security_lock_normal=0x7f020005;
        public static int ripple_drawable=0x7f020006;
    }
    public static final class id {
        public static int alarm_status=0x7f0c002c;
        public static int carrier_text=0x7f0c0000;
        public static int clock=0x7f0c0024;
        public static int clock_view=0x7f0c0025;
        public static int container=0x7f0c000d;
        public static int date_view=0x7f0c002b;
        public static int delete_button=0x7f0c0012;
        public static int digit_text=0x7f0c0006;
        public static int divider=0x7f0c0013;
        public static int emergency_call_button=0x7f0c0001;
        public static int key0=0x7f0c0021;
        public static int key1=0x7f0c0015;
        public static int key2=0x7f0c0016;
        public static int key3=0x7f0c0017;
        public static int key4=0x7f0c0019;
        public static int key5=0x7f0c001a;
        public static int key6=0x7f0c001b;
        public static int key7=0x7f0c001d;
        public static int key8=0x7f0c001e;
        public static int key9=0x7f0c001f;
        public static int key_enter=0x7f0c0022;
        public static int keyguard_clock_container=0x7f0c002e;
        public static int keyguard_host_view=0x7f0c0002;
        public static int keyguard_message_area=0x7f0c0005;
        public static int keyguard_password_view=0x7f0c0008;
        public static int keyguard_pattern_view=0x7f0c000c;
        public static int keyguard_pin_view=0x7f0c000f;
        public static int keyguard_security_container=0x7f0c0003;
        public static int keyguard_selector_fade_container=0x7f0c000b;
        public static int keyguard_sim=0x7f0c0027;
        public static int keyguard_sim_pin_view=0x7f0c0026;
        public static int keyguard_sim_puk_view=0x7f0c0029;
        public static int keyguard_status_view=0x7f0c002d;
        public static int klondike_text=0x7f0c0007;
        public static int lockPatternView=0x7f0c000e;
        public static int owner_info=0x7f0c002f;
        public static int passwordEntry=0x7f0c0009;
        public static int pinEntry=0x7f0c0011;
        public static int presentation=0x7f0c0023;
        public static int pukEntry=0x7f0c002a;
        public static int row0=0x7f0c0010;
        public static int row1=0x7f0c0014;
        public static int row2=0x7f0c0018;
        public static int row3=0x7f0c001c;
        public static int row4=0x7f0c0020;
        public static int simPinEntry=0x7f0c0028;
        public static int switch_ime_button=0x7f0c000a;
        public static int view_flipper=0x7f0c0004;
    }
    public static final class integer {
        /**  Alias used to reference framework activity duration.  
         */
        public static int config_activityDefaultDur=0x7f070000;
        /**  Threshold in micro watts above which a charger is rated as "fast"; 1.5A @ 5V  
         */
        public static int config_chargingFastThreshold=0x7f070002;
        /**  Threshold in micro watts below which a charger is rated as "slow"; 1A @ 5V 
         */
        public static int config_chargingSlowlyThreshold=0x7f070001;
        /**  Gravity to make KeyguardSelectorView work in multiple orientations
        0x31 == "top|center_horizontal" 
 Gravity to make KeyguardSelectorView work in multiple orientations
        0x13 == "left|center_vertical" 
         */
        public static int kg_selector_gravity=0x7f070003;
    }
    public static final class layout {
        public static int keyguard_bouncer=0x7f030000;
        /**  Alias used to reference one of two possible layouts in keyguard.  
 Alias used to reference one of two possible layouts in keyguard.  
         */
        public static int keyguard_eca=0x7f03000e;
        public static int keyguard_emergency_carrier_area=0x7f030001;
        public static int keyguard_host_view=0x7f030002;
        public static int keyguard_message_area=0x7f030003;
        public static int keyguard_message_area_large=0x7f030004;
        public static int keyguard_num_pad_key=0x7f030005;
        public static int keyguard_password_view=0x7f030006;
        public static int keyguard_pattern_view=0x7f030007;
        public static int keyguard_pin_view=0x7f030008;
        public static int keyguard_presentation=0x7f030009;
        public static int keyguard_sim_pin_view=0x7f03000a;
        public static int keyguard_sim_puk_view=0x7f03000b;
        public static int keyguard_status_area=0x7f03000c;
        public static int keyguard_status_view=0x7f03000d;
    }
    public static final class plurals {
        /**  Instructions telling the user that they entered the wrong SIM PIN while trying
         to unlock the keyguard.  Displayed in a dialog box.  
         */
        public static int kg_password_wrong_pin_code=0x7f0a0000;
        /**  Instructions telling the user that they entered the wrong puk while trying
         to unlock the keyguard.  Displayed in a dialog box.  
         */
        public static int kg_password_wrong_puk_code=0x7f0a0001;
        /**  An explanation text that the password needs to be entered since it hasn't been entered in a while. [CHAR LIMIT=80]
         */
        public static int kg_prompt_reason_time_password=0x7f0a0004;
        /**  An explanation text that the pattern needs to be solved since it hasn't been solved in a while. [CHAR LIMIT=80]
         */
        public static int kg_prompt_reason_time_pattern=0x7f0a0002;
        /**  An explanation text that the pin needs to be entered since it hasn't been entered in a while. [CHAR LIMIT=80]
         */
        public static int kg_prompt_reason_time_pin=0x7f0a0003;
    }
    public static final class string {
        /**  Skeleton string format for displaying the date. 
         */
        public static int abbrev_wday_month_day_no_year=0x7f050002;
        /**  Skeleton string format for displaying the date when an alarm is set. 
         */
        public static int abbrev_wday_month_day_no_year_alarm=0x7f050003;
        /**  Content description of the switch input method button for accessibility (not shown on the screen). [CHAR LIMIT=NONE] 
         */
        public static int accessibility_ime_switch_button=0x7f05004b;
        /**  Description of airplane mode 
         */
        public static int airplane_mode=0x7f05004c;
        /**  App label in the manifest  
         */
        public static int app_name=0x7f050006;
        /**  Skeleton string format for displaying the time in 12-hour format. 
         */
        public static int clock_12hr_format=0x7f050004;
        /**  Skeleton string format for displaying the time in 24-hour format. 
         */
        public static int clock_24hr_format=0x7f050005;
        /**  Fingerprint hint message when finger was not recognized.
         */
        public static int fingerprint_not_recognized=0x7f050058;
        /**  Description of the Delete button in a KeyboardView. [CHAR LIMIT=NONE] 
         */
        public static int keyboardview_keycode_delete=0x7f050025;
        /**  Description of the Enter button in a KeyboardView. [CHAR LIMIT=NONE] 
         */
        public static int keyboardview_keycode_enter=0x7f050026;
        /**  Accessibility description for the text view that indicates when the next alarm is set (not shown on screen). [CHAR_LIMIT=none] 
         */
        public static int keyguard_accessibility_next_alarm=0x7f050024;
        /**  Accessibility description of the PIN password view. [CHAR_LIMIT=none] 
         */
        public static int keyguard_accessibility_pin_area=0x7f050021;
        /**  Accessibility description of the SIM PIN password view. [CHAR_LIMIT=none] 
         */
        public static int keyguard_accessibility_sim_pin_area=0x7f050022;
        /**  Accessibility description of the SIM PUK password view. [CHAR_LIMIT=none] 
         */
        public static int keyguard_accessibility_sim_puk_area=0x7f050023;
        /**  On the keyguard screen, it shows the carrier the phone is connected to.
        This is displayed if the phone is not connected to a carrier.
         */
        public static int keyguard_carrier_default=0x7f05004a;
        /**  When the lock screen is showing, the phone is plugged in and the battery is fully
         charged, say that it is charged. 
         */
        public static int keyguard_charged=0x7f05000f;
        /**  On the keyguard screen, when pattern lock is disabled, only tell them to press menu to unlock.  This is shown in small font at the bottom. 
         */
        public static int keyguard_instructions_when_pattern_disabled=0x7f050014;
        /**  When the lock screen is showing and the battery is low, warn user to plug
         in the phone soon. 
         */
        public static int keyguard_low_battery=0x7f050013;
        /**  Shown to ask the user to insert a SIM card. 
         */
        public static int keyguard_missing_sim_instructions=0x7f050018;
        /**  Shown to ask the user to insert a SIM card when sim is missing or not readable. 
         */
        public static int keyguard_missing_sim_instructions_long=0x7f050019;
        /**  Shown when there is no SIM card. 
         */
        public static int keyguard_missing_sim_message=0x7f050017;
        /**  Shown when there is no SIM card. 
         */
        public static int keyguard_missing_sim_message_short=0x7f050016;
        /**  When the user inserts a sim card from an unsupported network, it becomes network locked 
         */
        public static int keyguard_network_locked_message=0x7f050015;
        /**  Instructions telling the user to enter their text password to unlock the keyguard.
         Displayed in one line in a large font.  
         */
        public static int keyguard_password_enter_password_code=0x7f05000c;
        /**  Instructions telling the user to enter their SIM PIN to unlock the keyguard.
         Displayed in one line in a large font.  
         */
        public static int keyguard_password_enter_pin_code=0x7f050007;
        /**  Instructions telling the user to enter their PIN password to unlock the keyguard.
         Displayed in one line in a large font.  
         */
        public static int keyguard_password_enter_pin_password_code=0x7f05000d;
        /**  Prompt to enter New SIM PIN in Edit Text Box in unlock screen 
         */
        public static int keyguard_password_enter_pin_prompt=0x7f05000a;
        /**  Instructions telling the user to enter their SIM PUK to unlock the keyguard.
         Displayed in one line in a large font.  
         */
        public static int keyguard_password_enter_puk_code=0x7f050008;
        /**  Prompt to enter SIM PUK in Edit Text Box in unlock screen 
         */
        public static int keyguard_password_enter_puk_prompt=0x7f050009;
        /**  Displayed as hint in passwordEntry EditText on PasswordUnlockScreen [CHAR LIMIT=30]
         */
        public static int keyguard_password_entry_touch_hint=0x7f05000b;
        /**  Instructions telling the user that they entered the wrong pin while trying
         to unlock the keyguard.  Displayed in one line in a large font.  
         */
        public static int keyguard_password_wrong_pin_code=0x7f05000e;
        /**  Shown to inform the user to SIM card is permanently disabled. 
         */
        public static int keyguard_permanent_disabled_sim_instructions=0x7f05001b;
        /**  Shown when SIM card is permanently disabled. 
         */
        public static int keyguard_permanent_disabled_sim_message_short=0x7f05001a;
        /**  When the lock screen is showing and the phone plugged in, and the battery
         is not fully charged, say that it's charging.  
         */
        public static int keyguard_plugged_in=0x7f050010;
        /**  When the lock screen is showing and the phone plugged in, and the battery
         is not fully charged, and it's plugged into a fast charger, say that it's charging fast.  
         */
        public static int keyguard_plugged_in_charging_fast=0x7f050011;
        /**  When the lock screen is showing and the phone plugged in, and the battery
         is not fully charged, and it's plugged into a slow charger, say that it's charging slowly.  
         */
        public static int keyguard_plugged_in_charging_slowly=0x7f050012;
        /**  Shown to tell the user that their SIM is locked and they must unlock it. 
         */
        public static int keyguard_sim_locked_message=0x7f05001c;
        /**  When the user enters a wrong sim pin too many times, it becomes PUK locked (Pin Unlock Kode) 
         */
        public static int keyguard_sim_puk_locked_message=0x7f05001d;
        /**  For the unlock screen, When the user enters a sim unlock code, it takes a little while to check
         whether it is valid, and to unlock the sim if it is valid.  we display a
         progress dialog in the meantime.  this is the emssage. 
         */
        public static int keyguard_sim_unlock_progress_dialog_message=0x7f05001e;
        /**  Time format strings for fall-back clock widget 
         */
        public static int keyguard_widget_12_hours_format=0x7f05001f;
        /**  Time format strings for fall-back clock widget 
         */
        public static int keyguard_widget_24_hours_format=0x7f050020;
        /**  Message shown when the user needs to confirm the PIN they just entered in the PUK screen 
         */
        public static int kg_enter_confirm_pin_hint=0x7f050034;
        /**  Message shown when user is almost at the limit of password attempts where the profile will be removed. [CHAR LIMIT=none] 
         */
        public static int kg_failed_attempts_almost_at_erase_profile=0x7f050042;
        /**  Message shown when user is almost at the limit of password attempts where the user will be removed. [CHAR LIMIT=none] 
         */
        public static int kg_failed_attempts_almost_at_erase_user=0x7f050040;
        /**  Message shown in dialog when user is almost at the limit where they will be
    locked out and may have to enter an alternate username/password to unlock the phone 
         */
        public static int kg_failed_attempts_almost_at_login=0x7f050044;
        /**  Message shown when user is almost at the limit of password attempts where the device will be wiped. [CHAR LIMIT=none] 
         */
        public static int kg_failed_attempts_almost_at_wipe=0x7f05003e;
        /**  Message shown in dialog when user has exceeded the maximum attempts and the profile will be removed. [CHAR LIMIT=none] 
         */
        public static int kg_failed_attempts_now_erasing_profile=0x7f050043;
        /**  Message shown in dialog when user has exceeded the maximum attempts and the user will be removed. [CHAR LIMIT=none] 
         */
        public static int kg_failed_attempts_now_erasing_user=0x7f050041;
        /**  Message shown in dialog when user has exceeded the maximum attempts and the device will now be wiped [CHAR LIMIT=none] 
         */
        public static int kg_failed_attempts_now_wiping=0x7f05003f;
        /**  Message shown in pattern unlock after some number of unsuccessful attempts 
         */
        public static int kg_forgot_pattern_button_text=0x7f050027;
        /**  String shown in PUK screen when PIN codes don't match 
         */
        public static int kg_invalid_confirm_pin_hint=0x7f050039;
        /**  Message shown when the user enters an invalid PUK code 
         */
        public static int kg_invalid_puk=0x7f050038;
        /**  Message shown when the user enters an invalid SIM pin password in PUK screen 
         */
        public static int kg_invalid_sim_pin_hint=0x7f050036;
        /**  Message shown when the user enters an invalid PUK code in the PUK screen 
         */
        public static int kg_invalid_sim_puk_hint=0x7f050037;
        /**  Message shown when the user exceeds the maximum number of pattern attempts 
         */
        public static int kg_login_too_many_attempts=0x7f05003a;
        /**  Instructions for using the password unlock screen 
         */
        public static int kg_password_instructions=0x7f050030;
        /**  Instructions telling the user that the operation to unlock the keyguard
         with SIM PIN failed. Displayed in one line in a large font.  
         */
        public static int kg_password_pin_failed=0x7f050047;
        /**  Instructions telling the user that the operation to unlock the keyguard
         with PUK failed. Displayed in one line in a large font.  
         */
        public static int kg_password_puk_failed=0x7f050048;
        /**  Instructions telling the user that they entered the wrong SIM PIN for the last time.
         Displayed in a dialog box.  
         */
        public static int kg_password_wrong_pin_code_pukked=0x7f050045;
        /**  Instructions telling the user that they have exhausted SIM PUK retries and the SIM is now unusable.
         Displayed in a dialog box.  
         */
        public static int kg_password_wrong_puk_code_dead=0x7f050046;
        /**  Instructions for using the pattern unlock screen 
         */
        public static int kg_pattern_instructions=0x7f05002c;
        /**  Notification telling the user that the PIN1 they entered is valid 
         */
        public static int kg_pin_accepted=0x7f050049;
        /**  Instructions for using the PIN unlock screen 
         */
        public static int kg_pin_instructions=0x7f05002f;
        /**  An explanation text that the credential needs to be entered because a device admin has
    locked the device. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_device_admin=0x7f050056;
        /**  An explanation text that the password needs to be entered since the device has just been restarted. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_restart_password=0x7f05004f;
        /**  An explanation text that the pattern needs to be solved since the device has just been restarted. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_restart_pattern=0x7f05004d;
        /**  An explanation text that the pin needs to be entered since the device has just been restarted. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_restart_pin=0x7f05004e;
        /**  An explanation text that the password needs to be entered since profiles have just been switched. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_switch_profiles_password=0x7f050055;
        /**  An explanation text that the pattern needs to be solved since profiles have just been switched. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_switch_profiles_pattern=0x7f050053;
        /**  An explanation text that the pin needs to be entered since profiles have just been switched. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_switch_profiles_pin=0x7f050054;
        /**  An explanation text that the password needs to be entered since the user hasn't used strong authentication since quite some time. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_timeout_password=0x7f050052;
        /**  An explanation text that the pattern needs to be solved since the user hasn't used strong authentication since quite some time. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_timeout_pattern=0x7f050050;
        /**  An explanation text that the pin needs to be entered since the user hasn't used strong authentication since quite some time. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_timeout_pin=0x7f050051;
        /**  An explanation text that the credential needs to be entered because the user has clicked
     the force lock button. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_user_request=0x7f050057;
        /**  Hint shown in the PUK unlock screen PIN TextView 
         */
        public static int kg_puk_enter_pin_hint=0x7f050033;
        /**  Hint shown in the PUK screen that asks the user to enter the PUK code given to them by their provider 
         */
        public static int kg_puk_enter_puk_hint=0x7f050031;
        /**  Hint shown when there are multiple SIMs in the device to ask the user to enter the PUK code given to them by their provider 
         */
        public static int kg_puk_enter_puk_hint_multi=0x7f050032;
        /**  Instructions for using the SIM PIN unlock screen 
         */
        public static int kg_sim_pin_instructions=0x7f05002d;
        /**  Instructions for using the SIM PIN unlock screen when there's more than one SIM 
         */
        public static int kg_sim_pin_instructions_multi=0x7f05002e;
        /**  Message shown in dialog while the device is unlocking the SIM card 
         */
        public static int kg_sim_unlock_progress_dialog_message=0x7f050035;
        /**  Countdown message shown after too many failed unlock attempts 
         */
        public static int kg_too_many_failed_attempts_countdown=0x7f05002b;
        /**  Message shown in dialog when max number of attempts are reached for password screen of keyguard 
         */
        public static int kg_too_many_failed_password_attempts_dialog_message=0x7f05003c;
        public static int kg_too_many_failed_pattern_attempts_dialog_message=0x7f05003d;
        /**  Message shown in dialog when max number of attempts are reached for PIN screen of keyguard 
         */
        public static int kg_too_many_failed_pin_attempts_dialog_message=0x7f05003b;
        /**  Message shown when user enters wrong password 
         */
        public static int kg_wrong_password=0x7f050029;
        /**  Message shown when user enters wrong pattern 
         */
        public static int kg_wrong_pattern=0x7f050028;
        /**  Message shown when user enters wrong PIN 
         */
        public static int kg_wrong_pin=0x7f05002a;
        /**  Alias used to reference framework "OK" string in keyguard.  
         */
        public static int ok=0x7f050000;
        /**  Alias used to reference framework "OK" string in keyguard.  
         */
        public static int system_ui_date_pattern=0x7f050001;
    }
    public static final class style {
        public static int BouncerSecurityContainer=0x7f0b0004;
        public static int PasswordTheme=0x7f0b0005;
        /**  Keyguard PIN pad styles 
         */
        public static int Widget_TextView_NumPadKey=0x7f0b0000;
        public static int Widget_TextView_NumPadKey_Klondike=0x7f0b0001;
        public static int keyguard_presentation_theme=0x7f0b0006;
        public static int widget_big_thin=0x7f0b0003;
        /**  Built-in clock widget stuff 
         */
        public static int widget_label=0x7f0b0002;
    }
    public static final class styleable {
        /** Attributes that can be used with a CarrierText.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #CarrierText_allCaps com.android.keyguard:allCaps}</code></td><td></td></tr>
           </table>
           @see #CarrierText_allCaps
         */
        public static final int[] CarrierText = {
            0x7f010007
        };
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#allCaps}
          attribute's value can be found in the {@link #CarrierText} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.keyguard:allCaps
        */
        public static int CarrierText_allCaps = 0;
        /** Attributes that can be used with a KeyguardSecurityViewFlipper_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #KeyguardSecurityViewFlipper_Layout_layout_maxHeight com.android.keyguard:layout_maxHeight}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyguardSecurityViewFlipper_Layout_layout_maxWidth com.android.keyguard:layout_maxWidth}</code></td><td></td></tr>
           </table>
           @see #KeyguardSecurityViewFlipper_Layout_layout_maxHeight
           @see #KeyguardSecurityViewFlipper_Layout_layout_maxWidth
         */
        public static final int[] KeyguardSecurityViewFlipper_Layout = {
            0x7f010000, 0x7f010001
        };
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#layout_maxHeight}
          attribute's value can be found in the {@link #KeyguardSecurityViewFlipper_Layout} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.keyguard:layout_maxHeight
        */
        public static int KeyguardSecurityViewFlipper_Layout_layout_maxHeight = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#layout_maxWidth}
          attribute's value can be found in the {@link #KeyguardSecurityViewFlipper_Layout} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.keyguard:layout_maxWidth
        */
        public static int KeyguardSecurityViewFlipper_Layout_layout_maxWidth = 0;
        /** Attributes that can be used with a NumPadKey.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #NumPadKey_digit com.android.keyguard:digit}</code></td><td></td></tr>
           <tr><td><code>{@link #NumPadKey_textView com.android.keyguard:textView}</code></td><td></td></tr>
           </table>
           @see #NumPadKey_digit
           @see #NumPadKey_textView
         */
        public static final int[] NumPadKey = {
            0x7f010002, 0x7f010003
        };
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#digit}
          attribute's value can be found in the {@link #NumPadKey} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.keyguard:digit
        */
        public static int NumPadKey_digit = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#textView}
          attribute's value can be found in the {@link #NumPadKey} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name com.android.keyguard:textView
        */
        public static int NumPadKey_textView = 1;
        /** Attributes that can be used with a PasswordTextView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PasswordTextView_android_gravity android:gravity}</code></td><td></td></tr>
           <tr><td><code>{@link #PasswordTextView_charPadding com.android.keyguard:charPadding}</code></td><td></td></tr>
           <tr><td><code>{@link #PasswordTextView_dotSize com.android.keyguard:dotSize}</code></td><td></td></tr>
           <tr><td><code>{@link #PasswordTextView_scaledTextSize com.android.keyguard:scaledTextSize}</code></td><td></td></tr>
           </table>
           @see #PasswordTextView_android_gravity
           @see #PasswordTextView_charPadding
           @see #PasswordTextView_dotSize
           @see #PasswordTextView_scaledTextSize
         */
        public static final int[] PasswordTextView = {
            0x010100af, 0x7f010004, 0x7f010005, 0x7f010006
        };
        /**
          <p>This symbol is the offset where the {@link android.R.attr#gravity}
          attribute's value can be found in the {@link #PasswordTextView} array.
          @attr name android:gravity
        */
        public static int PasswordTextView_android_gravity = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#charPadding}
          attribute's value can be found in the {@link #PasswordTextView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.keyguard:charPadding
        */
        public static int PasswordTextView_charPadding = 3;
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#dotSize}
          attribute's value can be found in the {@link #PasswordTextView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.keyguard:dotSize
        */
        public static int PasswordTextView_dotSize = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#scaledTextSize}
          attribute's value can be found in the {@link #PasswordTextView} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.keyguard:scaledTextSize
        */
        public static int PasswordTextView_scaledTextSize = 1;
    };
}
