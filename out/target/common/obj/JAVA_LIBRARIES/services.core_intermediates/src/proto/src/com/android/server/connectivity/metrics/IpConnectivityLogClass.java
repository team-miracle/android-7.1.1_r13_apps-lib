// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.android.server.connectivity.metrics;

// @@protoc_insertion_point(imports_scope)

@SuppressWarnings("hiding")
public interface IpConnectivityLogClass {

  public static final class NetworkId extends
      com.google.protobuf.nano.MessageNano {

    private static volatile NetworkId[] _emptyArray;
    public static NetworkId[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new NetworkId[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int32 network_id = 1;
    public int networkId;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.NetworkId)

    public NetworkId() {
      clear();
    }

    public NetworkId clear() {
      networkId = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.networkId != 0) {
        output.writeInt32(1, this.networkId);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.networkId != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.networkId);
      }
      return size;
    }

    @Override
    public NetworkId mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.networkId = input.readInt32();
            break;
          }
        }
      }
    }

    public static NetworkId parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new NetworkId(), data);
    }

    public static NetworkId parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new NetworkId().mergeFrom(input);
    }
  }

  public static final class DefaultNetworkEvent extends
      com.google.protobuf.nano.MessageNano {

    // enum IPSupport
    public static final int NONE = 0;
    public static final int IPV4 = 1;
    public static final int IPV6 = 2;
    public static final int DUAL = 3;

    private static volatile DefaultNetworkEvent[] _emptyArray;
    public static DefaultNetworkEvent[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new DefaultNetworkEvent[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional .clearcut.connectivity.NetworkId network_id = 1;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.NetworkId networkId;

    // optional .clearcut.connectivity.NetworkId previous_network_id = 2;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.NetworkId previousNetworkId;

    // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport previous_network_ip_support = 3;
    public int previousNetworkIpSupport;

    // repeated int32 transport_types = 4;
    public int[] transportTypes;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.DefaultNetworkEvent)

    public DefaultNetworkEvent() {
      clear();
    }

    public DefaultNetworkEvent clear() {
      networkId = null;
      previousNetworkId = null;
      previousNetworkIpSupport = com.android.server.connectivity.metrics.IpConnectivityLogClass.DefaultNetworkEvent.NONE;
      transportTypes = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.networkId != null) {
        output.writeMessage(1, this.networkId);
      }
      if (this.previousNetworkId != null) {
        output.writeMessage(2, this.previousNetworkId);
      }
      if (this.previousNetworkIpSupport != com.android.server.connectivity.metrics.IpConnectivityLogClass.DefaultNetworkEvent.NONE) {
        output.writeInt32(3, this.previousNetworkIpSupport);
      }
      if (this.transportTypes != null && this.transportTypes.length > 0) {
        for (int i = 0; i < this.transportTypes.length; i++) {
          output.writeInt32(4, this.transportTypes[i]);
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.networkId != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(1, this.networkId);
      }
      if (this.previousNetworkId != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(2, this.previousNetworkId);
      }
      if (this.previousNetworkIpSupport != com.android.server.connectivity.metrics.IpConnectivityLogClass.DefaultNetworkEvent.NONE) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(3, this.previousNetworkIpSupport);
      }
      if (this.transportTypes != null && this.transportTypes.length > 0) {
        int dataSize = 0;
        for (int i = 0; i < this.transportTypes.length; i++) {
          int element = this.transportTypes[i];
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * this.transportTypes.length;
      }
      return size;
    }

    @Override
    public DefaultNetworkEvent mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            if (this.networkId == null) {
              this.networkId = new com.android.server.connectivity.metrics.IpConnectivityLogClass.NetworkId();
            }
            input.readMessage(this.networkId);
            break;
          }
          case 18: {
            if (this.previousNetworkId == null) {
              this.previousNetworkId = new com.android.server.connectivity.metrics.IpConnectivityLogClass.NetworkId();
            }
            input.readMessage(this.previousNetworkId);
            break;
          }
          case 24: {
            int value = input.readInt32();
            switch (value) {
              case com.android.server.connectivity.metrics.IpConnectivityLogClass.DefaultNetworkEvent.NONE:
              case com.android.server.connectivity.metrics.IpConnectivityLogClass.DefaultNetworkEvent.IPV4:
              case com.android.server.connectivity.metrics.IpConnectivityLogClass.DefaultNetworkEvent.IPV6:
              case com.android.server.connectivity.metrics.IpConnectivityLogClass.DefaultNetworkEvent.DUAL:
                this.previousNetworkIpSupport = value;
                break;
            }
            break;
          }
          case 32: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 32);
            int i = this.transportTypes == null ? 0 : this.transportTypes.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.transportTypes, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readInt32();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readInt32();
            this.transportTypes = newArray;
            break;
          }
          case 34: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            // First pass to compute array length.
            int arrayLength = 0;
            int startPos = input.getPosition();
            while (input.getBytesUntilLimit() > 0) {
              input.readInt32();
              arrayLength++;
            }
            input.rewindToPosition(startPos);
            int i = this.transportTypes == null ? 0 : this.transportTypes.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.transportTypes, 0, newArray, 0, i);
            }
            for (; i < newArray.length; i++) {
              newArray[i] = input.readInt32();
            }
            this.transportTypes = newArray;
            input.popLimit(limit);
            break;
          }
        }
      }
    }

    public static DefaultNetworkEvent parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new DefaultNetworkEvent(), data);
    }

    public static DefaultNetworkEvent parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new DefaultNetworkEvent().mergeFrom(input);
    }
  }

  public static final class IpReachabilityEvent extends
      com.google.protobuf.nano.MessageNano {

    private static volatile IpReachabilityEvent[] _emptyArray;
    public static IpReachabilityEvent[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new IpReachabilityEvent[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string if_name = 1;
    public java.lang.String ifName;

    // optional int32 event_type = 2;
    public int eventType;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.IpReachabilityEvent)

    public IpReachabilityEvent() {
      clear();
    }

    public IpReachabilityEvent clear() {
      ifName = "";
      eventType = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.ifName.equals("")) {
        output.writeString(1, this.ifName);
      }
      if (this.eventType != 0) {
        output.writeInt32(2, this.eventType);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.ifName.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(1, this.ifName);
      }
      if (this.eventType != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.eventType);
      }
      return size;
    }

    @Override
    public IpReachabilityEvent mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.ifName = input.readString();
            break;
          }
          case 16: {
            this.eventType = input.readInt32();
            break;
          }
        }
      }
    }

    public static IpReachabilityEvent parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new IpReachabilityEvent(), data);
    }

    public static IpReachabilityEvent parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new IpReachabilityEvent().mergeFrom(input);
    }
  }

  public static final class NetworkEvent extends
      com.google.protobuf.nano.MessageNano {

    private static volatile NetworkEvent[] _emptyArray;
    public static NetworkEvent[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new NetworkEvent[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional .clearcut.connectivity.NetworkId network_id = 1;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.NetworkId networkId;

    // optional int32 event_type = 2;
    public int eventType;

    // optional int32 latency_ms = 3;
    public int latencyMs;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.NetworkEvent)

    public NetworkEvent() {
      clear();
    }

    public NetworkEvent clear() {
      networkId = null;
      eventType = 0;
      latencyMs = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.networkId != null) {
        output.writeMessage(1, this.networkId);
      }
      if (this.eventType != 0) {
        output.writeInt32(2, this.eventType);
      }
      if (this.latencyMs != 0) {
        output.writeInt32(3, this.latencyMs);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.networkId != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(1, this.networkId);
      }
      if (this.eventType != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.eventType);
      }
      if (this.latencyMs != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, this.latencyMs);
      }
      return size;
    }

    @Override
    public NetworkEvent mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            if (this.networkId == null) {
              this.networkId = new com.android.server.connectivity.metrics.IpConnectivityLogClass.NetworkId();
            }
            input.readMessage(this.networkId);
            break;
          }
          case 16: {
            this.eventType = input.readInt32();
            break;
          }
          case 24: {
            this.latencyMs = input.readInt32();
            break;
          }
        }
      }
    }

    public static NetworkEvent parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new NetworkEvent(), data);
    }

    public static NetworkEvent parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new NetworkEvent().mergeFrom(input);
    }
  }

  public static final class ValidationProbeEvent extends
      com.google.protobuf.nano.MessageNano {

    private static volatile ValidationProbeEvent[] _emptyArray;
    public static ValidationProbeEvent[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ValidationProbeEvent[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional .clearcut.connectivity.NetworkId network_id = 1;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.NetworkId networkId;

    // optional int32 latency_ms = 2;
    public int latencyMs;

    // optional int32 probe_type = 3;
    public int probeType;

    // optional int32 probe_result = 4;
    public int probeResult;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.ValidationProbeEvent)

    public ValidationProbeEvent() {
      clear();
    }

    public ValidationProbeEvent clear() {
      networkId = null;
      latencyMs = 0;
      probeType = 0;
      probeResult = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.networkId != null) {
        output.writeMessage(1, this.networkId);
      }
      if (this.latencyMs != 0) {
        output.writeInt32(2, this.latencyMs);
      }
      if (this.probeType != 0) {
        output.writeInt32(3, this.probeType);
      }
      if (this.probeResult != 0) {
        output.writeInt32(4, this.probeResult);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.networkId != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(1, this.networkId);
      }
      if (this.latencyMs != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.latencyMs);
      }
      if (this.probeType != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, this.probeType);
      }
      if (this.probeResult != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(4, this.probeResult);
      }
      return size;
    }

    @Override
    public ValidationProbeEvent mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            if (this.networkId == null) {
              this.networkId = new com.android.server.connectivity.metrics.IpConnectivityLogClass.NetworkId();
            }
            input.readMessage(this.networkId);
            break;
          }
          case 16: {
            this.latencyMs = input.readInt32();
            break;
          }
          case 24: {
            this.probeType = input.readInt32();
            break;
          }
          case 32: {
            this.probeResult = input.readInt32();
            break;
          }
        }
      }
    }

    public static ValidationProbeEvent parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ValidationProbeEvent(), data);
    }

    public static ValidationProbeEvent parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ValidationProbeEvent().mergeFrom(input);
    }
  }

  public static final class DNSLookupBatch extends
      com.google.protobuf.nano.MessageNano {

    private static volatile DNSLookupBatch[] _emptyArray;
    public static DNSLookupBatch[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new DNSLookupBatch[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional .clearcut.connectivity.NetworkId network_id = 1;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.NetworkId networkId;

    // repeated int32 event_types = 2;
    public int[] eventTypes;

    // repeated int32 return_codes = 3;
    public int[] returnCodes;

    // repeated int32 latencies_ms = 4;
    public int[] latenciesMs;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.DNSLookupBatch)

    public DNSLookupBatch() {
      clear();
    }

    public DNSLookupBatch clear() {
      networkId = null;
      eventTypes = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
      returnCodes = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
      latenciesMs = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.networkId != null) {
        output.writeMessage(1, this.networkId);
      }
      if (this.eventTypes != null && this.eventTypes.length > 0) {
        for (int i = 0; i < this.eventTypes.length; i++) {
          output.writeInt32(2, this.eventTypes[i]);
        }
      }
      if (this.returnCodes != null && this.returnCodes.length > 0) {
        for (int i = 0; i < this.returnCodes.length; i++) {
          output.writeInt32(3, this.returnCodes[i]);
        }
      }
      if (this.latenciesMs != null && this.latenciesMs.length > 0) {
        for (int i = 0; i < this.latenciesMs.length; i++) {
          output.writeInt32(4, this.latenciesMs[i]);
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.networkId != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(1, this.networkId);
      }
      if (this.eventTypes != null && this.eventTypes.length > 0) {
        int dataSize = 0;
        for (int i = 0; i < this.eventTypes.length; i++) {
          int element = this.eventTypes[i];
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * this.eventTypes.length;
      }
      if (this.returnCodes != null && this.returnCodes.length > 0) {
        int dataSize = 0;
        for (int i = 0; i < this.returnCodes.length; i++) {
          int element = this.returnCodes[i];
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * this.returnCodes.length;
      }
      if (this.latenciesMs != null && this.latenciesMs.length > 0) {
        int dataSize = 0;
        for (int i = 0; i < this.latenciesMs.length; i++) {
          int element = this.latenciesMs[i];
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * this.latenciesMs.length;
      }
      return size;
    }

    @Override
    public DNSLookupBatch mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            if (this.networkId == null) {
              this.networkId = new com.android.server.connectivity.metrics.IpConnectivityLogClass.NetworkId();
            }
            input.readMessage(this.networkId);
            break;
          }
          case 16: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 16);
            int i = this.eventTypes == null ? 0 : this.eventTypes.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.eventTypes, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readInt32();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readInt32();
            this.eventTypes = newArray;
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            // First pass to compute array length.
            int arrayLength = 0;
            int startPos = input.getPosition();
            while (input.getBytesUntilLimit() > 0) {
              input.readInt32();
              arrayLength++;
            }
            input.rewindToPosition(startPos);
            int i = this.eventTypes == null ? 0 : this.eventTypes.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.eventTypes, 0, newArray, 0, i);
            }
            for (; i < newArray.length; i++) {
              newArray[i] = input.readInt32();
            }
            this.eventTypes = newArray;
            input.popLimit(limit);
            break;
          }
          case 24: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 24);
            int i = this.returnCodes == null ? 0 : this.returnCodes.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.returnCodes, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readInt32();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readInt32();
            this.returnCodes = newArray;
            break;
          }
          case 26: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            // First pass to compute array length.
            int arrayLength = 0;
            int startPos = input.getPosition();
            while (input.getBytesUntilLimit() > 0) {
              input.readInt32();
              arrayLength++;
            }
            input.rewindToPosition(startPos);
            int i = this.returnCodes == null ? 0 : this.returnCodes.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.returnCodes, 0, newArray, 0, i);
            }
            for (; i < newArray.length; i++) {
              newArray[i] = input.readInt32();
            }
            this.returnCodes = newArray;
            input.popLimit(limit);
            break;
          }
          case 32: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 32);
            int i = this.latenciesMs == null ? 0 : this.latenciesMs.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.latenciesMs, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readInt32();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readInt32();
            this.latenciesMs = newArray;
            break;
          }
          case 34: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            // First pass to compute array length.
            int arrayLength = 0;
            int startPos = input.getPosition();
            while (input.getBytesUntilLimit() > 0) {
              input.readInt32();
              arrayLength++;
            }
            input.rewindToPosition(startPos);
            int i = this.latenciesMs == null ? 0 : this.latenciesMs.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.latenciesMs, 0, newArray, 0, i);
            }
            for (; i < newArray.length; i++) {
              newArray[i] = input.readInt32();
            }
            this.latenciesMs = newArray;
            input.popLimit(limit);
            break;
          }
        }
      }
    }

    public static DNSLookupBatch parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new DNSLookupBatch(), data);
    }

    public static DNSLookupBatch parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new DNSLookupBatch().mergeFrom(input);
    }
  }

  public static final class DHCPEvent extends
      com.google.protobuf.nano.MessageNano {

    private static volatile DHCPEvent[] _emptyArray;
    public static DHCPEvent[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new DHCPEvent[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string if_name = 1;
    public java.lang.String ifName;

    // optional string state_transition = 2;
    public java.lang.String stateTransition;

    // optional int32 error_code = 3;
    public int errorCode;

    // optional int32 duration_ms = 4;
    public int durationMs;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.DHCPEvent)

    public DHCPEvent() {
      clear();
    }

    public DHCPEvent clear() {
      ifName = "";
      stateTransition = "";
      errorCode = 0;
      durationMs = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.ifName.equals("")) {
        output.writeString(1, this.ifName);
      }
      if (!this.stateTransition.equals("")) {
        output.writeString(2, this.stateTransition);
      }
      if (this.errorCode != 0) {
        output.writeInt32(3, this.errorCode);
      }
      if (this.durationMs != 0) {
        output.writeInt32(4, this.durationMs);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.ifName.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(1, this.ifName);
      }
      if (!this.stateTransition.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(2, this.stateTransition);
      }
      if (this.errorCode != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, this.errorCode);
      }
      if (this.durationMs != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(4, this.durationMs);
      }
      return size;
    }

    @Override
    public DHCPEvent mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.ifName = input.readString();
            break;
          }
          case 18: {
            this.stateTransition = input.readString();
            break;
          }
          case 24: {
            this.errorCode = input.readInt32();
            break;
          }
          case 32: {
            this.durationMs = input.readInt32();
            break;
          }
        }
      }
    }

    public static DHCPEvent parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new DHCPEvent(), data);
    }

    public static DHCPEvent parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new DHCPEvent().mergeFrom(input);
    }
  }

  public static final class ApfProgramEvent extends
      com.google.protobuf.nano.MessageNano {

    private static volatile ApfProgramEvent[] _emptyArray;
    public static ApfProgramEvent[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ApfProgramEvent[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int64 lifetime = 1;
    public long lifetime;

    // optional int32 filtered_ras = 2;
    public int filteredRas;

    // optional int32 current_ras = 3;
    public int currentRas;

    // optional int32 program_length = 4;
    public int programLength;

    // optional bool drop_multicast = 5;
    public boolean dropMulticast;

    // optional bool has_ipv4_addr = 6;
    public boolean hasIpv4Addr;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.ApfProgramEvent)

    public ApfProgramEvent() {
      clear();
    }

    public ApfProgramEvent clear() {
      lifetime = 0L;
      filteredRas = 0;
      currentRas = 0;
      programLength = 0;
      dropMulticast = false;
      hasIpv4Addr = false;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.lifetime != 0L) {
        output.writeInt64(1, this.lifetime);
      }
      if (this.filteredRas != 0) {
        output.writeInt32(2, this.filteredRas);
      }
      if (this.currentRas != 0) {
        output.writeInt32(3, this.currentRas);
      }
      if (this.programLength != 0) {
        output.writeInt32(4, this.programLength);
      }
      if (this.dropMulticast != false) {
        output.writeBool(5, this.dropMulticast);
      }
      if (this.hasIpv4Addr != false) {
        output.writeBool(6, this.hasIpv4Addr);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.lifetime != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(1, this.lifetime);
      }
      if (this.filteredRas != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.filteredRas);
      }
      if (this.currentRas != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, this.currentRas);
      }
      if (this.programLength != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(4, this.programLength);
      }
      if (this.dropMulticast != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(5, this.dropMulticast);
      }
      if (this.hasIpv4Addr != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(6, this.hasIpv4Addr);
      }
      return size;
    }

    @Override
    public ApfProgramEvent mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.lifetime = input.readInt64();
            break;
          }
          case 16: {
            this.filteredRas = input.readInt32();
            break;
          }
          case 24: {
            this.currentRas = input.readInt32();
            break;
          }
          case 32: {
            this.programLength = input.readInt32();
            break;
          }
          case 40: {
            this.dropMulticast = input.readBool();
            break;
          }
          case 48: {
            this.hasIpv4Addr = input.readBool();
            break;
          }
        }
      }
    }

    public static ApfProgramEvent parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ApfProgramEvent(), data);
    }

    public static ApfProgramEvent parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ApfProgramEvent().mergeFrom(input);
    }
  }

  public static final class ApfStatistics extends
      com.google.protobuf.nano.MessageNano {

    private static volatile ApfStatistics[] _emptyArray;
    public static ApfStatistics[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ApfStatistics[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int64 duration_ms = 1;
    public long durationMs;

    // optional int32 received_ras = 2;
    public int receivedRas;

    // optional int32 matching_ras = 3;
    public int matchingRas;

    // optional int32 dropped_ras = 5;
    public int droppedRas;

    // optional int32 zero_lifetime_ras = 6;
    public int zeroLifetimeRas;

    // optional int32 parse_errors = 7;
    public int parseErrors;

    // optional int32 program_updates = 8;
    public int programUpdates;

    // optional int32 max_program_size = 9;
    public int maxProgramSize;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.ApfStatistics)

    public ApfStatistics() {
      clear();
    }

    public ApfStatistics clear() {
      durationMs = 0L;
      receivedRas = 0;
      matchingRas = 0;
      droppedRas = 0;
      zeroLifetimeRas = 0;
      parseErrors = 0;
      programUpdates = 0;
      maxProgramSize = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.durationMs != 0L) {
        output.writeInt64(1, this.durationMs);
      }
      if (this.receivedRas != 0) {
        output.writeInt32(2, this.receivedRas);
      }
      if (this.matchingRas != 0) {
        output.writeInt32(3, this.matchingRas);
      }
      if (this.droppedRas != 0) {
        output.writeInt32(5, this.droppedRas);
      }
      if (this.zeroLifetimeRas != 0) {
        output.writeInt32(6, this.zeroLifetimeRas);
      }
      if (this.parseErrors != 0) {
        output.writeInt32(7, this.parseErrors);
      }
      if (this.programUpdates != 0) {
        output.writeInt32(8, this.programUpdates);
      }
      if (this.maxProgramSize != 0) {
        output.writeInt32(9, this.maxProgramSize);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.durationMs != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(1, this.durationMs);
      }
      if (this.receivedRas != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.receivedRas);
      }
      if (this.matchingRas != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, this.matchingRas);
      }
      if (this.droppedRas != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(5, this.droppedRas);
      }
      if (this.zeroLifetimeRas != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(6, this.zeroLifetimeRas);
      }
      if (this.parseErrors != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(7, this.parseErrors);
      }
      if (this.programUpdates != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(8, this.programUpdates);
      }
      if (this.maxProgramSize != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(9, this.maxProgramSize);
      }
      return size;
    }

    @Override
    public ApfStatistics mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.durationMs = input.readInt64();
            break;
          }
          case 16: {
            this.receivedRas = input.readInt32();
            break;
          }
          case 24: {
            this.matchingRas = input.readInt32();
            break;
          }
          case 40: {
            this.droppedRas = input.readInt32();
            break;
          }
          case 48: {
            this.zeroLifetimeRas = input.readInt32();
            break;
          }
          case 56: {
            this.parseErrors = input.readInt32();
            break;
          }
          case 64: {
            this.programUpdates = input.readInt32();
            break;
          }
          case 72: {
            this.maxProgramSize = input.readInt32();
            break;
          }
        }
      }
    }

    public static ApfStatistics parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ApfStatistics(), data);
    }

    public static ApfStatistics parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ApfStatistics().mergeFrom(input);
    }
  }

  public static final class RaEvent extends
      com.google.protobuf.nano.MessageNano {

    private static volatile RaEvent[] _emptyArray;
    public static RaEvent[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new RaEvent[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int64 router_lifetime = 1;
    public long routerLifetime;

    // optional int64 prefix_valid_lifetime = 2;
    public long prefixValidLifetime;

    // optional int64 prefix_preferred_lifetime = 3;
    public long prefixPreferredLifetime;

    // optional int64 route_info_lifetime = 4;
    public long routeInfoLifetime;

    // optional int64 rdnss_lifetime = 5;
    public long rdnssLifetime;

    // optional int64 dnssl_lifetime = 6;
    public long dnsslLifetime;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.RaEvent)

    public RaEvent() {
      clear();
    }

    public RaEvent clear() {
      routerLifetime = 0L;
      prefixValidLifetime = 0L;
      prefixPreferredLifetime = 0L;
      routeInfoLifetime = 0L;
      rdnssLifetime = 0L;
      dnsslLifetime = 0L;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.routerLifetime != 0L) {
        output.writeInt64(1, this.routerLifetime);
      }
      if (this.prefixValidLifetime != 0L) {
        output.writeInt64(2, this.prefixValidLifetime);
      }
      if (this.prefixPreferredLifetime != 0L) {
        output.writeInt64(3, this.prefixPreferredLifetime);
      }
      if (this.routeInfoLifetime != 0L) {
        output.writeInt64(4, this.routeInfoLifetime);
      }
      if (this.rdnssLifetime != 0L) {
        output.writeInt64(5, this.rdnssLifetime);
      }
      if (this.dnsslLifetime != 0L) {
        output.writeInt64(6, this.dnsslLifetime);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.routerLifetime != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(1, this.routerLifetime);
      }
      if (this.prefixValidLifetime != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(2, this.prefixValidLifetime);
      }
      if (this.prefixPreferredLifetime != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(3, this.prefixPreferredLifetime);
      }
      if (this.routeInfoLifetime != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(4, this.routeInfoLifetime);
      }
      if (this.rdnssLifetime != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(5, this.rdnssLifetime);
      }
      if (this.dnsslLifetime != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(6, this.dnsslLifetime);
      }
      return size;
    }

    @Override
    public RaEvent mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.routerLifetime = input.readInt64();
            break;
          }
          case 16: {
            this.prefixValidLifetime = input.readInt64();
            break;
          }
          case 24: {
            this.prefixPreferredLifetime = input.readInt64();
            break;
          }
          case 32: {
            this.routeInfoLifetime = input.readInt64();
            break;
          }
          case 40: {
            this.rdnssLifetime = input.readInt64();
            break;
          }
          case 48: {
            this.dnsslLifetime = input.readInt64();
            break;
          }
        }
      }
    }

    public static RaEvent parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new RaEvent(), data);
    }

    public static RaEvent parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new RaEvent().mergeFrom(input);
    }
  }

  public static final class IpProvisioningEvent extends
      com.google.protobuf.nano.MessageNano {

    private static volatile IpProvisioningEvent[] _emptyArray;
    public static IpProvisioningEvent[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new IpProvisioningEvent[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string if_name = 1;
    public java.lang.String ifName;

    // optional int32 event_type = 2;
    public int eventType;

    // optional int32 latency_ms = 3;
    public int latencyMs;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.IpProvisioningEvent)

    public IpProvisioningEvent() {
      clear();
    }

    public IpProvisioningEvent clear() {
      ifName = "";
      eventType = 0;
      latencyMs = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.ifName.equals("")) {
        output.writeString(1, this.ifName);
      }
      if (this.eventType != 0) {
        output.writeInt32(2, this.eventType);
      }
      if (this.latencyMs != 0) {
        output.writeInt32(3, this.latencyMs);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.ifName.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(1, this.ifName);
      }
      if (this.eventType != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.eventType);
      }
      if (this.latencyMs != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, this.latencyMs);
      }
      return size;
    }

    @Override
    public IpProvisioningEvent mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.ifName = input.readString();
            break;
          }
          case 16: {
            this.eventType = input.readInt32();
            break;
          }
          case 24: {
            this.latencyMs = input.readInt32();
            break;
          }
        }
      }
    }

    public static IpProvisioningEvent parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new IpProvisioningEvent(), data);
    }

    public static IpProvisioningEvent parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new IpProvisioningEvent().mergeFrom(input);
    }
  }

  public static final class IpConnectivityEvent extends
      com.google.protobuf.nano.MessageNano {

    private static volatile IpConnectivityEvent[] _emptyArray;
    public static IpConnectivityEvent[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new IpConnectivityEvent[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int64 time_ms = 1;
    public long timeMs;

    // optional .clearcut.connectivity.DefaultNetworkEvent default_network_event = 2;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.DefaultNetworkEvent defaultNetworkEvent;

    // optional .clearcut.connectivity.IpReachabilityEvent ip_reachability_event = 3;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.IpReachabilityEvent ipReachabilityEvent;

    // optional .clearcut.connectivity.NetworkEvent network_event = 4;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.NetworkEvent networkEvent;

    // optional .clearcut.connectivity.DNSLookupBatch dns_lookup_batch = 5;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.DNSLookupBatch dnsLookupBatch;

    // optional .clearcut.connectivity.DHCPEvent dhcp_event = 6;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.DHCPEvent dhcpEvent;

    // optional .clearcut.connectivity.IpProvisioningEvent ip_provisioning_event = 7;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.IpProvisioningEvent ipProvisioningEvent;

    // optional .clearcut.connectivity.ValidationProbeEvent validation_probe_event = 8;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.ValidationProbeEvent validationProbeEvent;

    // optional .clearcut.connectivity.ApfProgramEvent apf_program_event = 9;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.ApfProgramEvent apfProgramEvent;

    // optional .clearcut.connectivity.ApfStatistics apf_statistics = 10;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.ApfStatistics apfStatistics;

    // optional .clearcut.connectivity.RaEvent ra_event = 11;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.RaEvent raEvent;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.IpConnectivityEvent)

    public IpConnectivityEvent() {
      clear();
    }

    public IpConnectivityEvent clear() {
      timeMs = 0L;
      defaultNetworkEvent = null;
      ipReachabilityEvent = null;
      networkEvent = null;
      dnsLookupBatch = null;
      dhcpEvent = null;
      ipProvisioningEvent = null;
      validationProbeEvent = null;
      apfProgramEvent = null;
      apfStatistics = null;
      raEvent = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.timeMs != 0L) {
        output.writeInt64(1, this.timeMs);
      }
      if (this.defaultNetworkEvent != null) {
        output.writeMessage(2, this.defaultNetworkEvent);
      }
      if (this.ipReachabilityEvent != null) {
        output.writeMessage(3, this.ipReachabilityEvent);
      }
      if (this.networkEvent != null) {
        output.writeMessage(4, this.networkEvent);
      }
      if (this.dnsLookupBatch != null) {
        output.writeMessage(5, this.dnsLookupBatch);
      }
      if (this.dhcpEvent != null) {
        output.writeMessage(6, this.dhcpEvent);
      }
      if (this.ipProvisioningEvent != null) {
        output.writeMessage(7, this.ipProvisioningEvent);
      }
      if (this.validationProbeEvent != null) {
        output.writeMessage(8, this.validationProbeEvent);
      }
      if (this.apfProgramEvent != null) {
        output.writeMessage(9, this.apfProgramEvent);
      }
      if (this.apfStatistics != null) {
        output.writeMessage(10, this.apfStatistics);
      }
      if (this.raEvent != null) {
        output.writeMessage(11, this.raEvent);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.timeMs != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(1, this.timeMs);
      }
      if (this.defaultNetworkEvent != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(2, this.defaultNetworkEvent);
      }
      if (this.ipReachabilityEvent != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(3, this.ipReachabilityEvent);
      }
      if (this.networkEvent != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(4, this.networkEvent);
      }
      if (this.dnsLookupBatch != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(5, this.dnsLookupBatch);
      }
      if (this.dhcpEvent != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(6, this.dhcpEvent);
      }
      if (this.ipProvisioningEvent != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(7, this.ipProvisioningEvent);
      }
      if (this.validationProbeEvent != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(8, this.validationProbeEvent);
      }
      if (this.apfProgramEvent != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(9, this.apfProgramEvent);
      }
      if (this.apfStatistics != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(10, this.apfStatistics);
      }
      if (this.raEvent != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(11, this.raEvent);
      }
      return size;
    }

    @Override
    public IpConnectivityEvent mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.timeMs = input.readInt64();
            break;
          }
          case 18: {
            if (this.defaultNetworkEvent == null) {
              this.defaultNetworkEvent = new com.android.server.connectivity.metrics.IpConnectivityLogClass.DefaultNetworkEvent();
            }
            input.readMessage(this.defaultNetworkEvent);
            break;
          }
          case 26: {
            if (this.ipReachabilityEvent == null) {
              this.ipReachabilityEvent = new com.android.server.connectivity.metrics.IpConnectivityLogClass.IpReachabilityEvent();
            }
            input.readMessage(this.ipReachabilityEvent);
            break;
          }
          case 34: {
            if (this.networkEvent == null) {
              this.networkEvent = new com.android.server.connectivity.metrics.IpConnectivityLogClass.NetworkEvent();
            }
            input.readMessage(this.networkEvent);
            break;
          }
          case 42: {
            if (this.dnsLookupBatch == null) {
              this.dnsLookupBatch = new com.android.server.connectivity.metrics.IpConnectivityLogClass.DNSLookupBatch();
            }
            input.readMessage(this.dnsLookupBatch);
            break;
          }
          case 50: {
            if (this.dhcpEvent == null) {
              this.dhcpEvent = new com.android.server.connectivity.metrics.IpConnectivityLogClass.DHCPEvent();
            }
            input.readMessage(this.dhcpEvent);
            break;
          }
          case 58: {
            if (this.ipProvisioningEvent == null) {
              this.ipProvisioningEvent = new com.android.server.connectivity.metrics.IpConnectivityLogClass.IpProvisioningEvent();
            }
            input.readMessage(this.ipProvisioningEvent);
            break;
          }
          case 66: {
            if (this.validationProbeEvent == null) {
              this.validationProbeEvent = new com.android.server.connectivity.metrics.IpConnectivityLogClass.ValidationProbeEvent();
            }
            input.readMessage(this.validationProbeEvent);
            break;
          }
          case 74: {
            if (this.apfProgramEvent == null) {
              this.apfProgramEvent = new com.android.server.connectivity.metrics.IpConnectivityLogClass.ApfProgramEvent();
            }
            input.readMessage(this.apfProgramEvent);
            break;
          }
          case 82: {
            if (this.apfStatistics == null) {
              this.apfStatistics = new com.android.server.connectivity.metrics.IpConnectivityLogClass.ApfStatistics();
            }
            input.readMessage(this.apfStatistics);
            break;
          }
          case 90: {
            if (this.raEvent == null) {
              this.raEvent = new com.android.server.connectivity.metrics.IpConnectivityLogClass.RaEvent();
            }
            input.readMessage(this.raEvent);
            break;
          }
        }
      }
    }

    public static IpConnectivityEvent parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new IpConnectivityEvent(), data);
    }

    public static IpConnectivityEvent parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new IpConnectivityEvent().mergeFrom(input);
    }
  }

  public static final class IpConnectivityLog extends
      com.google.protobuf.nano.MessageNano {

    private static volatile IpConnectivityLog[] _emptyArray;
    public static IpConnectivityLog[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new IpConnectivityLog[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated .clearcut.connectivity.IpConnectivityEvent events = 1;
    public com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityEvent[] events;

    // optional int32 dropped_events = 2;
    public int droppedEvents;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.IpConnectivityLog)

    public IpConnectivityLog() {
      clear();
    }

    public IpConnectivityLog clear() {
      events = com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityEvent.emptyArray();
      droppedEvents = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityEvent element = this.events[i];
          if (element != null) {
            output.writeMessage(1, element);
          }
        }
      }
      if (this.droppedEvents != 0) {
        output.writeInt32(2, this.droppedEvents);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityEvent element = this.events[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(1, element);
          }
        }
      }
      if (this.droppedEvents != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.droppedEvents);
      }
      return size;
    }

    @Override
    public IpConnectivityLog mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 10);
            int i = this.events == null ? 0 : this.events.length;
            com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityEvent[] newArray =
                new com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityEvent[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.events, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityEvent();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityEvent();
            input.readMessage(newArray[i]);
            this.events = newArray;
            break;
          }
          case 16: {
            this.droppedEvents = input.readInt32();
            break;
          }
        }
      }
    }

    public static IpConnectivityLog parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new IpConnectivityLog(), data);
    }

    public static IpConnectivityLog parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new IpConnectivityLog().mergeFrom(input);
    }
  }
}
