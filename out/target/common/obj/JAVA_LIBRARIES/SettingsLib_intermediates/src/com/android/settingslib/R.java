/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package com.android.settingslib;

public final class R {
  public static final class array {
    /**
     * Titles for animator duration scale preference. [CHAR LIMIT=35]
     */
    public static int animator_duration_scale_entries=0x00000000;
    /**
     * Values for animator duration scale preference.
     */
    public static int animator_duration_scale_values=0x00000000;
    /**
     * Titles for app process limit preference. [CHAR LIMIT=35]
     */
    public static int app_process_limit_entries=0x00000000;
    /**
     * Values for app process limit preference.
     */
    public static int app_process_limit_values=0x00000000;
    /**
     * Labels on the side of batter graph in Quick Settings and Settings [CHAR LIMIT=8]
     */
    public static int battery_labels=0x00000000;
    /**
     * Description of each color mode for the display. [CHAR LIMIT=NONE]
     */
    public static int color_mode_descriptions=0x00000000;
    /**
     * IDs for each color mode. The values must match the corresponding constants in
     * android.view.Display
     */
    public static int color_mode_ids=0x00000000;
    /**
     * Name of each color mode for the display. [CHAR LIMIT=40]
     */
    public static int color_mode_names=0x00000000;
    /**
     * The apps that need to be hided when they are disabled
     */
    public static int config_hideWhenDisabled_packageNames=0x00000000;
    /**
     * Titles for debug overdraw preference. [CHAR LIMIT=50]
     */
    public static int debug_hw_overdraw_entries=0x00000000;
    /**
     * Values for debug overdraw preference.
     */
    public static int debug_hw_overdraw_values=0x00000000;
    /**
     * Titles for OpenGL traces preference. [CHAR LIMIT=35]
     */
    public static int enable_opengl_traces_entries=0x00000000;
    /**
     * Values for OpenGL traces preference.
     */
    public static int enable_opengl_traces_values=0x00000000;
    /**
     * Summaries for HDCP checking preference. [CHAR LIMIT=100]
     */
    public static int hdcp_checking_summaries=0x00000000;
    /**
     * Titles for HDCP checking preference. [CHAR LIMIT=35]
     */
    public static int hdcp_checking_titles=0x00000000;
    /**
     * Values for HDCP checking preference.
     */
    public static int hdcp_checking_values=0x00000000;
    /**
     * Titles for overlay display devices preference. [CHAR LIMIT=35]
     */
    public static int overlay_display_devices_entries=0x00000000;
    /**
     * Values for overlay display devices preference.
     */
    public static int overlay_display_devices_values=0x00000000;
    /**
     * Titles for logd limit size lowram selection preference. [CHAR LIMIT=14]
     */
    public static int select_logd_size_lowram_titles=0x00000000;
    /**
     * Summaries for logd limit size selection preference. [CHAR LIMIT=50]
     */
    public static int select_logd_size_summaries=0x00000000;
    /**
     * Titles for logd limit size selection preference. [CHAR LIMIT=14]
     */
    public static int select_logd_size_titles=0x00000000;
    /**
     * Values for logd limit size selection preference.
     */
    public static int select_logd_size_values=0x00000000;
    /**
     * Summaries for logpersist state selection preference. [CHAR LIMIT=50]
     */
    public static int select_logpersist_summaries=0x00000000;
    /**
     * Titles for logpersist state selection preference. [CHAR LIMIT=14]
     */
    public static int select_logpersist_titles=0x00000000;
    /**
     * Values for logpersist state selection preference.
     */
    public static int select_logpersist_values=0x00000000;
    /**
     * Titles for non-rectangular clipping preference. [CHAR LIMIT=35]
     */
    public static int show_non_rect_clip_entries=0x00000000;
    /**
     * Values for non-rectangular clipping preference.
     */
    public static int show_non_rect_clip_values=0x00000000;
    /**
     * Display color space adjustment modes for developers
     */
    public static int simulate_color_space_entries=0x00000000;
    /**
     * Values for display color space adjustment modes for developers
     */
    public static int simulate_color_space_values=0x00000000;
    /**
     * Titles for frame time tracking preference. [CHAR LIMIT=35]
     */
    public static int track_frame_time_entries=0x00000000;
    /**
     * Values for frame time tracking preference.
     */
    public static int track_frame_time_values=0x00000000;
    /**
     * Titles for transition animation scale preference. [CHAR LIMIT=35]
     */
    public static int transition_animation_scale_entries=0x00000000;
    /**
     * Values for transition animation scale preference.
     */
    public static int transition_animation_scale_values=0x00000000;
    /**
     * Do not translate.
     */
    public static int tts_demo_string_langs=0x00000000;
    /**
     * Do not translate.
     */
    public static int tts_demo_strings=0x00000000;
    /**
     * Default speech rate choices
     */
    public static int tts_rate_entries=0x00000000;
    /**
     * Do not translate.
     */
    public static int tts_rate_values=0x00000000;
    /**
     * USB configuration names for Developer Settings.
     * This can be overridden by devices with additional USB configurations.
     */
    public static int usb_configuration_titles=0x00000000;
    /**
     * USB configuration values for Developer Settings.
     * These are lists of USB functions passed to the USB Manager to change USB configuraton.
     * This can be overridden by devices with additional USB configurations.
     * Do not translate.
     */
    public static int usb_configuration_values=0x00000000;
    /**
     * Wi-Fi settings. The status messages when the network is unknown.
     */
    public static int wifi_status=0x00000000;
    /**
     * Wi-Fi settings. The status messages when the network is known.
     */
    public static int wifi_status_with_ssid=0x00000000;
    /**
     * Titles for window animation scale preference. [CHAR LIMIT=35]
     */
    public static int window_animation_scale_entries=0x00000000;
    /**
     * Values for window animation scale preference.
     */
    public static int window_animation_scale_values=0x00000000;
  }
  public static final class attr {
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int bottomLabels=0x00000000;
    /**
     * This is used as summary for restricted switch preferences, default value is
     * @string/disabled_by_admin (Disabled by administrator).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int restrictedSwitchSummary=0x00000000;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int sideLabels=0x00000000;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static int state_encrypted=0x00000000;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static int textColor=0x00000000;
    /**
     * If true, an additional summary will be added in addition to the existing summary and
     * this will be used for enabled/disabled by admin strings leaving android.R.id.summary untouched.
     * As such when this is true, useAdminDisabledSummary will be overwritten to false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static int useAdditionalSummary=0x00000000;
    /**
     * If true then we can use enabled/disabled by admin strings for summary (android.R.id.summary).
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static int useAdminDisabledSummary=0x00000000;
    /**
     * The user restriction on which the preference disabled by admin state will be based on.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static int userRestriction=0x00000000;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int wifi_signal=0x00000000;
  }
  public static final class bool {
    /**
     * Whether to send a custom package name with the PSD.
     */
    public static int config_sendPackageName=0x00000000;
    /**
     * Configuration for automotive
     */
    public static int enable_pbap_pce_profile=0x00000000;
  }
  public static final class color {
    public static int disabled_text_color=0x00000000;
    /**
     * 38% black
     */
    public static int usage_graph_dots=0x00000000;
  }
  public static final class dimen {
    /**
     * The y translation to apply at the start in appear animations.
     */
    public static int appear_y_translation_start=0x00000000;
    public static int circle_avatar_size=0x00000000;
    /**
     * The translation for disappearing security views after having solved them.
     */
    public static int disappear_y_translation=0x00000000;
    public static int restricted_icon_padding=0x00000000;
    /**
     * Lock icon for preferences locked by admin
     */
    public static int restricted_icon_size=0x00000000;
    /**
     * Usage graph dimens
     */
    public static int usage_graph_area_height=0x00000000;
    public static int usage_graph_divider_size=0x00000000;
    public static int usage_graph_dot_interval=0x00000000;
    public static int usage_graph_dot_size=0x00000000;
    public static int usage_graph_labels_padding=0x00000000;
    public static int usage_graph_labels_width=0x00000000;
    public static int usage_graph_line_corner_radius=0x00000000;
    public static int usage_graph_line_width=0x00000000;
    public static int usage_graph_margin_top_bottom=0x00000000;
    /**
     * Height of a user icon view
     */
    public static int user_icon_view_height=0x00000000;
    /**
     * User spinner
     */
    public static int user_spinner_height=0x00000000;
    public static int user_spinner_item_height=0x00000000;
    public static int user_spinner_padding=0x00000000;
    public static int user_spinner_padding_sides=0x00000000;
    public static int wifi_preference_badge_padding=0x00000000;
  }
  public static final class drawable {
    public static int home=0x00000000;
    public static int ic_bt_cellphone=0x00000000;
    public static int ic_bt_headphones_a2dp=0x00000000;
    public static int ic_bt_headset_hfp=0x00000000;
    public static int ic_bt_misc_hid=0x00000000;
    public static int ic_bt_network_pan=0x00000000;
    public static int ic_bt_pointing_hid=0x00000000;
    public static int ic_info=0x00000000;
    public static int ic_lockscreen_ime=0x00000000;
    public static int ic_menu=0x00000000;
    public static int notification_auto_importance=0x00000000;
  }
  public static final class id {
    public static int action_bar=0x00000000;
    public static int additional_summary=0x00000000;
    public static int bottom_label_group=0x00000000;
    public static int bottom_label_space=0x00000000;
    public static int content_frame=0x00000000;
    public static int content_header_container=0x00000000;
    public static int content_parent=0x00000000;
    public static int drawer_layout=0x00000000;
    public static int graph_label_group=0x00000000;
    public static int icon_frame=0x00000000;
    public static int label_bottom=0x00000000;
    public static int label_end=0x00000000;
    public static int label_group=0x00000000;
    public static int label_middle=0x00000000;
    public static int label_start=0x00000000;
    public static int label_top=0x00000000;
    public static int left_drawer=0x00000000;
    public static int restricted_icon=0x00000000;
    public static int space1=0x00000000;
    public static int space2=0x00000000;
    public static int spacer=0x00000000;
    public static int tile_item=0x00000000;
    public static int usage_graph=0x00000000;
  }
  public static final class integer {
    /**
     * Default data warning level in mb
     */
    public static int default_data_warning_level_mb=0x00000000;
  }
  public static final class layout {
    public static int drawer_category=0x00000000;
    public static int drawer_item=0x00000000;
    public static int drawer_spacer=0x00000000;
    public static int restricted_icon=0x00000000;
    public static int restricted_switch_preference=0x00000000;
    public static int restricted_switch_widget=0x00000000;
    public static int settings_with_drawer=0x00000000;
    public static int usage_bottom_label=0x00000000;
    public static int usage_side_label=0x00000000;
    public static int usage_view=0x00000000;
    public static int user_preference=0x00000000;
  }
  public static final class string {
    /**
     * Subtitle for the accessibility preference to configure display color space correction. [CHAR LIMIT=NONE]
     */
    public static int accessibility_display_daltonizer_preference_subtitle=0x00000000;
    /**
     * Title for the accessibility preference to configure display color space correction. [CHAR LIMIT=NONE]
     */
    public static int accessibility_display_daltonizer_preference_title=0x00000000;
    /**
     * Content description of the WIFI signal when no signal for accessibility (not shown on the screen). [CHAR LIMIT=NONE]
     */
    public static int accessibility_no_wifi=0x00000000;
    /**
     * Content description of the WIFI signal when WIFI is disabled for accessibility (not shown on the screen). [CHAR LIMIT=NONE]
     */
    public static int accessibility_wifi_off=0x00000000;
    /**
     * Content description of the WIFI signal when it is one bar for accessibility (not shown on the screen). [CHAR LIMIT=NONE]
     */
    public static int accessibility_wifi_one_bar=0x00000000;
    /**
     * Content description of the WIFI signal when it is full for accessibility (not shown on the screen). [CHAR LIMIT=NONE]
     */
    public static int accessibility_wifi_signal_full=0x00000000;
    /**
     * Content description of the WIFI signal when it is three bars for accessibility (not shown on the screen). [CHAR LIMIT=NONE]
     */
    public static int accessibility_wifi_three_bars=0x00000000;
    /**
     * Content description of the WIFI signal when it is two bars for accessibility (not shown on the screen). [CHAR LIMIT=NONE]
     */
    public static int accessibility_wifi_two_bars=0x00000000;
    /**
     * Message of dialog confirming that user wants to revoke access to adb from all computers they have authorized
     */
    public static int adb_keys_warning_message=0x00000000;
    /**
     * Warning text to user about the implications of enabling USB debugging
     */
    public static int adb_warning_message=0x00000000;
    /**
     * Title of warning dialog about the implications of enabling USB debugging
     */
    public static int adb_warning_title=0x00000000;
    /**
     * Setting Checkbox title whether to allow mock locations
     */
    public static int allow_mock_location=0x00000000;
    /**
     * setting Checkbox summary whether to allow mock locations
     */
    public static int allow_mock_location_summary=0x00000000;
    /**
     * UI debug setting: scaling factor for all Animator-based animations [CHAR LIMIT=25]
     */
    public static int animator_duration_scale_title=0x00000000;
    /**
     * Error message for users that aren't allowed to modify Access Point Names settings [CHAR LIMIT=none]
     */
    public static int apn_settings_not_available=0x00000000;
    /**
     * UI debug setting: limit number of running background processes [CHAR LIMIT=25]
     */
    public static int app_process_limit_title=0x00000000;
    /**
     * Status message of Wi-Fi when network has matching passpoint credentials. [CHAR LIMIT=NONE]
     */
    public static int available_via_passpoint=0x00000000;
    /**
     * [CHAR_LIMIT=20] Battery use screen.  Battery status shown in chart label when charging from an unknown source.
     */
    public static int battery_info_status_charging=0x00000000;
    /**
     * [CHAR_LIMIT=20] Battery use screen.  Battery status shown in chart label when charging on AC.
     */
    public static int battery_info_status_charging_ac=0x00000000;
    /**
     * [CHAR_LIMIT=20] Battery short status label when charing on AC
     */
    public static int battery_info_status_charging_ac_short=0x00000000;
    /**
     * [CHAR_LIMIT=20] Battery use screen.  Battery status shown in chart label when charging over USB.
     */
    public static int battery_info_status_charging_usb=0x00000000;
    /**
     * [CHAR_LIMIT=20] Battery short status label when charging over USB.
     */
    public static int battery_info_status_charging_usb_short=0x00000000;
    /**
     * [CHAR_LIMIT=20] Battery use screen.  Battery status shown in chart label when charging over a wireless connection.
     */
    public static int battery_info_status_charging_wireless=0x00000000;
    /**
     * [CHAR_LIMIT=20] Battery short status label when charging wirelessly.
     */
    public static int battery_info_status_charging_wireless_short=0x00000000;
    /**
     * Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed
     */
    public static int battery_info_status_discharging=0x00000000;
    /**
     * Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed
     */
    public static int battery_info_status_full=0x00000000;
    /**
     * Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed
     */
    public static int battery_info_status_not_charging=0x00000000;
    /**
     * Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed
     */
    public static int battery_info_status_unknown=0x00000000;
    /**
     * Bluetooth settings.  Connection options screen.  The summary for the A2DP checkbox preference when A2DP is connected.
     */
    public static int bluetooth_a2dp_profile_summary_connected=0x00000000;
    /**
     * Bluetooth settings.  Connection options screen.  The summary for the A2DP checkbox preference that describes how checking it will set the A2DP profile as preferred.
     */
    public static int bluetooth_a2dp_profile_summary_use_for=0x00000000;
    /**
     * Bluetooth settings.  Message when connected to a device. [CHAR LIMIT=40]
     */
    public static int bluetooth_connected=0x00000000;
    /**
     * Bluetooth settings.  Message when connected to a device, except for media audio. [CHAR LIMIT=40]
     */
    public static int bluetooth_connected_no_a2dp=0x00000000;
    /**
     * Bluetooth settings.  Message when connected to a device, except for phone audio. [CHAR LIMIT=40]
     */
    public static int bluetooth_connected_no_headset=0x00000000;
    /**
     * Bluetooth settings.  Message when connected to a device, except for phone/media audio. [CHAR LIMIT=40]
     */
    public static int bluetooth_connected_no_headset_no_a2dp=0x00000000;
    /**
     * Bluetooth settings.  Message when connected to a device, except for map. [CHAR LIMIT=40]
     */
    public static int bluetooth_connected_no_map=0x00000000;
    /**
     * Bluetooth settings.  Message when connecting to a device
     */
    public static int bluetooth_connecting=0x00000000;
    /**
     * Setting Checkbox title for disabling Bluetooth absolute volume
     */
    public static int bluetooth_disable_absolute_volume=0x00000000;
    /**
     * Summary of checkbox for disabling Bluetooth absolute volume
     */
    public static int bluetooth_disable_absolute_volume_summary=0x00000000;
    /**
     * Bluetooth settings.  Message when a device is disconnected
     */
    public static int bluetooth_disconnected=0x00000000;
    /**
     * Bluetooth settings.  Message when disconnecting from a device
     */
    public static int bluetooth_disconnecting=0x00000000;
    /**
     * Bluetooth settings.  Connection options screen.  The summary for the headset checkbox preference when headset is connected.
     */
    public static int bluetooth_headset_profile_summary_connected=0x00000000;
    /**
     * Bluetooth settings.  Connection options screen.  The summary for the headset checkbox preference that describes how checking it will set the headset profile as preferred.
     */
    public static int bluetooth_headset_profile_summary_use_for=0x00000000;
    /**
     * Bluetooth settings. Connection options screen. The summary for the HID checkbox preference when HID is connected.
     */
    public static int bluetooth_hid_profile_summary_connected=0x00000000;
    /**
     * Bluetooth settings. Connection options screen. The summary
     * for the HID checkbox preference that describes how checking it
     * will set the HID profile as preferred.
     */
    public static int bluetooth_hid_profile_summary_use_for=0x00000000;
    /**
     * Bluetooth settings.  Connection options screen.  The summary for the map checkbox preference when map is connected.
     */
    public static int bluetooth_map_profile_summary_connected=0x00000000;
    /**
     * Bluetooth settings. Connection options screen.  The summary for the map checkbox preference that describes how checking it will set the map profile as preferred.
     */
    public static int bluetooth_map_profile_summary_use_for=0x00000000;
    /**
     * Bluetooth settings.  Connection options screen.  The summary for the OPP checkbox preference when OPP is connected.
     */
    public static int bluetooth_opp_profile_summary_connected=0x00000000;
    /**
     * Bluetooth settings.  Connection options screen.  The summary for the OPP checkbox preference when OPP is not connected.
     */
    public static int bluetooth_opp_profile_summary_not_connected=0x00000000;
    /**
     * Bluetooth settings.  Connection options screen.  The summary for the OPP checkbox preference that describes how checking it will set the OPP profile as preferred.
     */
    public static int bluetooth_opp_profile_summary_use_for=0x00000000;
    /**
     * Bluetooth settings screen, summary text under individual Bluetooth devices when pairing
     */
    public static int bluetooth_pairing=0x00000000;
    /**
     * Button text for accepting an incoming pairing request. [CHAR LIMIT=20]
     */
    public static int bluetooth_pairing_accept=0x00000000;
    /**
     * Button text for accepting an incoming pairing request in all caps. [CHAR LIMIT=20]
     */
    public static int bluetooth_pairing_accept_all_caps=0x00000000;
    /**
     * Button text for declining an incoming pairing request. [CHAR LIMIT=20]
     */
    public static int bluetooth_pairing_decline=0x00000000;
    /**
     * Message for the error dialog when BT pairing fails because the other device is down.
     */
    public static int bluetooth_pairing_device_down_error_message=0x00000000;
    /**
     * Message for the error dialog when BT pairing fails generically.
     */
    public static int bluetooth_pairing_error_message=0x00000000;
    /**
     * Message for the error dialog when BT pairing fails because the PIN /
     * Passkey entered is incorrect.
     */
    public static int bluetooth_pairing_pin_error_message=0x00000000;
    /**
     * Message for the error dialog when BT pairing fails because the other device rejected the pairing.
     */
    public static int bluetooth_pairing_rejected_error_message=0x00000000;
    /**
     * Message in pairing dialogs.  [CHAR LIMIT=NONE]
     */
    public static int bluetooth_pairing_will_share_phonebook=0x00000000;
    /**
     * Bluetooth settings. Connection options screen. The summary for the checkbox preference when PAN is connected (NAP role). [CHAR LIMIT=25]
     */
    public static int bluetooth_pan_nap_profile_summary_connected=0x00000000;
    /**
     * Bluetooth settings. Connection options screen. The summary
     * for the PAN checkbox preference that describes how checking it
     * will set the PAN profile as preferred.
     */
    public static int bluetooth_pan_profile_summary_use_for=0x00000000;
    /**
     * Bluetooth settings. Connection options screen. The summary for the checkbox preference when PAN is connected (user role). [CHAR LIMIT=25]
     */
    public static int bluetooth_pan_user_profile_summary_connected=0x00000000;
    /**
     * Bluetooth settings.  The user-visible string that is used whenever referring to the A2DP profile.
     */
    public static int bluetooth_profile_a2dp=0x00000000;
    /**
     * Bluetooth settings.  The user-visible string that is used whenever referring to the headset or handsfree profile.
     */
    public static int bluetooth_profile_headset=0x00000000;
    /**
     * Bluetooth settings. The user-visible string that is used whenever referring to the HID profile.
     */
    public static int bluetooth_profile_hid=0x00000000;
    /**
     * Bluetooth settings. The user-visible string that is used whenever referring to the map profile.
     */
    public static int bluetooth_profile_map=0x00000000;
    /**
     * Bluetooth settings.  The user-visible string that is used whenever referring to the OPP profile.
     */
    public static int bluetooth_profile_opp=0x00000000;
    /**
     * Bluetooth settings. The user-visible string that is used whenever referring to the PAN profile (accessing Internet through remote device). [CHAR LIMIT=40]
     */
    public static int bluetooth_profile_pan=0x00000000;
    /**
     * Bluetooth settings. The user-visible string that is used whenever referring to the PAN profile (sharing this device's Internet connection). [CHAR LIMIT=40]
     */
    public static int bluetooth_profile_pan_nap=0x00000000;
    /**
     * Bluetooth settings. The user-visible string that is used whenever referring to the PBAP profile. [CHAR LIMIT=40]
     */
    public static int bluetooth_profile_pbap=0x00000000;
    /**
     * Bluetooth settings. The user-visible summary string that is used whenever referring to the PBAP profile (sharing contacts). [CHAR LIMIT=60]
     */
    public static int bluetooth_profile_pbap_summary=0x00000000;
    /**
     * Bluetooth settings. The user-visible string that is used whenever referring to the SAP profile (sharing SIM card).
     */
    public static int bluetooth_profile_sap=0x00000000;
    /**
     * Bluetooth settings.  Connection options screen.  The summary for the sap checkbox preference when SAP is connected.
     */
    public static int bluetooth_sap_profile_summary_connected=0x00000000;
    /**
     * Bluetooth settings.  Connection options screen.  The summary for the sap checkbox preference that describes how checking it will set the sap profile as preferred.
     */
    public static int bluetooth_sap_profile_summary_use_for=0x00000000;
    /**
     * Setting Checkbox title whether to enable bluetooth HCI snoop log
     */
    public static int bt_hci_snoop_log=0x00000000;
    /**
     * setting Checkbox summary whether to capture all bluetooth HCI packets in a file
     */
    public static int bt_hci_snoop_log_summary=0x00000000;
    /**
     * [CHAR LIMIT=NONE] Setting checkbox title for Whether to include bug report item in power menu.
     */
    public static int bugreport_in_power=0x00000000;
    /**
     * [CHAR LIMIT=NONE] Setting checkbox summary for Whether to include bug report item in power
     */
    public static int bugreport_in_power_summary=0x00000000;
    /**
     * Button on dialog that triggers convertion to file encryption
     */
    public static int button_convert_fbe=0x00000000;
    /**
     * Header for items under the personal user [CHAR LIMIT=30]
     */
    public static int category_personal=0x00000000;
    /**
     * Header for items under the work user [CHAR LIMIT=30]
     */
    public static int category_work=0x00000000;
    /**
     * Package name for Certinstaller app
     */
    public static int certinstaller_package=0x00000000;
    /**
     * Label for length of time since the battery graph started [CHAR LIMIT=20]
     */
    public static int charge_length_format=0x00000000;
    /**
     * Title for profile selection dialog [CHAR LIMIT=30]
     */
    public static int choose_profile=0x00000000;
    /**
     * Setting title to revoke secure USB debugging authorizations
     */
    public static int clear_adb_keys=0x00000000;
    /**
     * Intent key for the package name keys
     */
    public static int config_helpIntentExtraKey=0x00000000;
    /**
     * Intent key for package name values
     */
    public static int config_helpIntentNameKey=0x00000000;
    /**
     * Name for the set of keys associating package names
     */
    public static int config_helpPackageNameKey=0x00000000;
    /**
     * Name for the set of values of package names
     */
    public static int config_helpPackageNameValue=0x00000000;
    /**
     * Warning dialog message to confirm user wishes to enable OEM unlock and disable theft protection features
     */
    public static int confirm_enable_oem_unlock_text=0x00000000;
    /**
     * Confirmation dialog title to ensure user wishes to enable OEM unlock and disable theft protection features
     */
    public static int confirm_enable_oem_unlock_title=0x00000000;
    /**
     * Status message of Wi-Fi when it is connected by Passpoint configuration. [CHAR LIMIT=NONE]
     */
    public static int connected_via_passpoint=0x00000000;
    /**
     * Status message of Wi-Fi when it is connected by a Wi-Fi assistant application. [CHAR LIMIT=NONE]
     */
    public static int connected_via_wfa=0x00000000;
    /**
     * Content description for drawer menu button [CHAR_LIMIT=30]
     */
    public static int content_description_menu_button=0x00000000;
    /**
     * Warning displayed on dialog with final prompt for converting to file encryption
     */
    public static int convert_to_fbe_warning=0x00000000;
    /**
     * Developer settings screen, convert userdata to file encryption option name
     */
    public static int convert_to_file_encryption=0x00000000;
    /**
     * Developer settings screen, convert userdata to file encryption summary when option is already done
     */
    public static int convert_to_file_encryption_done=0x00000000;
    /**
     * Developer settings screen, convert userdata to file encryption summary when option is available
     */
    public static int convert_to_file_encryption_enabled=0x00000000;
    /**
     * Label for deuteranomaly (red-green color blindness) [CHAR LIMIT=45]
     */
    public static int daltonizer_mode_deuteranomaly=0x00000000;
    /**
     * Label for disabling color space adjustment [CHAR LIMIT=45]
     */
    public static int daltonizer_mode_disabled=0x00000000;
    /**
     * Label for converting display colors to grayscale, which simulates monochromacy (complete color blindness). [CHAR LIMIT=45]
     */
    public static int daltonizer_mode_monochromacy=0x00000000;
    /**
     * Label for protanomaly (red-green color blindness) [CHAR LIMIT=45]
     */
    public static int daltonizer_mode_protanomaly=0x00000000;
    /**
     * Label for tritanomaly (blue-yellow color blindness) [CHAR LIMIT=45]
     */
    public static int daltonizer_mode_tritanomaly=0x00000000;
    /**
     * Summary shown for color space correction preference when its value is overridden by another preference [CHAR LIMIT=35]
     */
    public static int daltonizer_type_overridden=0x00000000;
    /**
     * Title of data usage item that represents all uninstalled applications. [CHAR LIMIT=48]
     */
    public static int data_usage_uninstalled_apps=0x00000000;
    /**
     * Title of data usage item that represents all uninstalled applications or removed users. [CHAR LIMIT=48]
     */
    public static int data_usage_uninstalled_apps_users=0x00000000;
    /**
     * UI debug setting: select current app to debug [CHAR LIMIT=50]
     */
    public static int debug_app=0x00000000;
    /**
     * UI debug setting: no debug app has been set [CHAR LIMIT=50]
     */
    public static int debug_app_not_set=0x00000000;
    /**
     * UI debug setting: debug app has been set [CHAR LIMIT=50]
     */
    public static int debug_app_set=0x00000000;
    /**
     * Preference category for application debugging development settings. [CHAR LIMIT=25]
     */
    public static int debug_applications_category=0x00000000;
    /**
     * Preference category for app debugging development settings. [CHAR LIMIT=50]
     */
    public static int debug_debugging_category=0x00000000;
    /**
     * Preference category for drawing debugging development settings. [CHAR LIMIT=25]
     */
    public static int debug_drawing_category=0x00000000;
    /**
     * Preference category for hardware accelerated drawing debugging development settings. [CHAR LIMIT=50]
     */
    public static int debug_hw_drawing_category=0x00000000;
    /**
     * UI debug setting: show the amount of overdraw in apps using the GPU [CHAR LIMIT=25]
     */
    public static int debug_hw_overdraw=0x00000000;
    /**
     * Preference category for input debugging development settings. [CHAR LIMIT=25]
     */
    public static int debug_input_category=0x00000000;
    /**
     * UI debug setting: show layout bounds information [CHAR LIMIT=25]
     */
    public static int debug_layout=0x00000000;
    /**
     * UI debug setting: show layout bounds information summary [CHAR LIMIT=50]
     */
    public static int debug_layout_summary=0x00000000;
    /**
     * Preference category for monitoring debugging development settings. [CHAR LIMIT=25]
     */
    public static int debug_monitoring_category=0x00000000;
    /**
     * Preference category for networking debugging development settings. [CHAR LIMIT=50]
     */
    public static int debug_networking_category=0x00000000;
    /**
     * Setting Checkbox title whether to enable view attribute inspection
     */
    public static int debug_view_attributes=0x00000000;
    /**
     * Warning text to user about the implications of enabling USB debugging
     */
    public static int dev_logpersist_clear_warning_message=0x00000000;
    /**
     * UI debug setting: store logs persistently
     */
    public static int dev_logpersist_clear_warning_title=0x00000000;
    /**
     * Warning text to user about the implications of enabling USB debugging
     */
    public static int dev_settings_warning_message=0x00000000;
    /**
     * Title of warning dialog about the implications of enabling developer settings
     */
    public static int dev_settings_warning_title=0x00000000;
    /**
     * Development settings enable title.
     */
    public static int development_settings_enable=0x00000000;
    /**
     * Error message for users that aren't allowed to modify developer options [CHAR LIMIT=none]
     */
    public static int development_settings_not_available=0x00000000;
    /**
     * Development Settings summary.  The summary of the item to take the user to Development settings.  Development settings are settings meant for application developers.
     */
    public static int development_settings_summary=0x00000000;
    /**
     * Development Settings.  the title for the item to take the user to Development settings.  Development settings are settings meant for application developers.
     */
    public static int development_settings_title=0x00000000;
    /**
     * UI debug setting: disable use of overlays? [CHAR LIMIT=25]
     */
    public static int disable_overlays=0x00000000;
    /**
     * UI debug setting: disable use of overlays summary [CHAR LIMIT=50]
     */
    public static int disable_overlays_summary=0x00000000;
    /**
     * Summary for switch preference to denote it is switched off [CHAR LIMIT=50]
     */
    public static int disabled_by_admin=0x00000000;
    /**
     * Summary for settings preference disabled by administrator [CHAR LIMIT=50]
     */
    public static int disabled_by_admin_summary_text=0x00000000;
    public static int enable_adb=0x00000000;
    /**
     * Setting checkbox summary for Whether to enable USB debugging support on the phone
     */
    public static int enable_adb_summary=0x00000000;
    /**
     * UI debug setting: enable freeform window support [CHAR LIMIT=50]
     */
    public static int enable_freeform_support=0x00000000;
    /**
     * UI debug setting: enable freeform window support summary [CHAR LIMIT=150]
     */
    public static int enable_freeform_support_summary=0x00000000;
    /**
     * UI debug setting: enable various types of OpenGL traces [CHAR LIMIT=25]
     */
    public static int enable_opengl_traces_title=0x00000000;
    /**
     * Summary of checkbox setting that enables the terminal app. [CHAR LIMIT=64]
     */
    public static int enable_terminal_summary=0x00000000;
    /**
     * Title of checkbox setting that enables the terminal app. [CHAR LIMIT=32]
     */
    public static int enable_terminal_title=0x00000000;
    /**
     * Developer settings: enable WebView multiprocess name [CHAR LIMIT=50]
     */
    public static int enable_webview_multiprocess=0x00000000;
    /**
     * Developer settings: enable WebView multiprocess summary [CHAR LIMIT=60]
     */
    public static int enable_webview_multiprocess_desc=0x00000000;
    /**
     * Summary for switch preference to denote it is switched on [CHAR LIMIT=50]
     */
    public static int enabled_by_admin=0x00000000;
    /**
     * UI debug setting: force allow apps on external storage [CHAR LIMIT=50]
     */
    public static int force_allow_on_external=0x00000000;
    /**
     * UI debug setting: force allow on external summary [CHAR LIMIT=150]
     */
    public static int force_allow_on_external_summary=0x00000000;
    /**
     * UI debug setting: force hardware acceleration to render apps [CHAR LIMIT=25]
     */
    public static int force_hw_ui=0x00000000;
    /**
     * UI debug setting: force hardware acceleration summary [CHAR LIMIT=50]
     */
    public static int force_hw_ui_summary=0x00000000;
    /**
     * UI debug setting: force anti-aliasing to render apps [CHAR LIMIT=25]
     */
    public static int force_msaa=0x00000000;
    /**
     * UI debug setting: force anti-aliasing summary [CHAR LIMIT=50]
     */
    public static int force_msaa_summary=0x00000000;
    /**
     * UI debug setting: force all activites to be resizable for multiwindow [CHAR LIMIT=50]
     */
    public static int force_resizable_activities=0x00000000;
    /**
     * UI debug setting: force allow on external summary [CHAR LIMIT=150]
     */
    public static int force_resizable_activities_summary=0x00000000;
    /**
     * UI debug setting: force right to left layout [CHAR LIMIT=37]
     */
    public static int force_rtl_layout_all_locales=0x00000000;
    /**
     * UI debug setting: force right to left layout summary [CHAR LIMIT=100]
     */
    public static int force_rtl_layout_all_locales_summary=0x00000000;
    /**
     * HDCP checking dialog title, used for debug purposes only. [CHAR LIMIT=25]
     */
    public static int hdcp_checking_dialog_title=0x00000000;
    /**
     * HDCP checking title, used for debug purposes only. [CHAR LIMIT=25]
     */
    public static int hdcp_checking_title=0x00000000;
    /**
     * Label for Help and feedback menu item
     */
    public static int help_feedback_label=0x00000000;
    /**
     * Option in navigation drawer that leads to Settings main screen [CHAR LIMIT=30]
     */
    public static int home=0x00000000;
    /**
     * UI debug setting: immediately destroy activities? [CHAR LIMIT=25]
     */
    public static int immediately_destroy_activities=0x00000000;
    /**
     * UI debug setting: immediately destroy activities summary [CHAR LIMIT=50]
     */
    public static int immediately_destroy_activities_summary=0x00000000;
    /**
     * Settings item summary for active app [CHAR LIMIT=100]
     */
    public static int inactive_app_active_summary=0x00000000;
    /**
     * Settings item summary for inactive app [CHAR LIMIT=100]
     */
    public static int inactive_app_inactive_summary=0x00000000;
    /**
     * Settings item title for inactive apps [CHAR LIMIT=35]
     */
    public static int inactive_apps_title=0x00000000;
    /**
     * Setting Checkbox title whether to keep the screen on when plugged in to a power source
     */
    public static int keep_screen_on=0x00000000;
    /**
     * setting Checkbox summary whether to keep the screen on when plugged in
     */
    public static int keep_screen_on_summary=0x00000000;
    /**
     * Launch defaults preference summary with none set [CHAR LIMIT=40]
     */
    public static int launch_defaults_none=0x00000000;
    /**
     * Launch defaults preference summary with some set [CHAR LIMIT=40]
     */
    public static int launch_defaults_some=0x00000000;
    /**
     * Summary text of the "local backup password" setting when the user has already supplied a password
     */
    public static int local_backup_password_summary_change=0x00000000;
    /**
     * Summary text of the "local backup password" setting when the user has not supplied a password
     */
    public static int local_backup_password_summary_none=0x00000000;
    /**
     * Local (desktop) backup password menu title [CHAR LIMIT=25]
     */
    public static int local_backup_password_title=0x00000000;
    /**
     * Toast message shown when setting a new local backup password fails due to the user not correctly typing the password again for confirmation [CHAR LIMIT=80]
     */
    public static int local_backup_password_toast_confirmation_mismatch=0x00000000;
    /**
     * Toast message shown when the user successfully sets a new local backup password [CHAR LIMIT=80]
     */
    public static int local_backup_password_toast_success=0x00000000;
    /**
     * Toast message shown when setting a new local backup password fails due to the user not supplying the correct existing password. The phrasing here is deliberately quite general. [CHAR LIMIT=80]
     */
    public static int local_backup_password_toast_validation_failure=0x00000000;
    /**
     * Title for a work profile. [CHAR LIMIT=25]
     */
    public static int managed_user_title=0x00000000;
    /**
     * Preference category for media development settings. [CHAR LIMIT=50]
     */
    public static int media_category=0x00000000;
    /**
     * Setting Checkbox title whether to always keep cellular data active. [CHAR LIMIT=80]
     */
    public static int mobile_data_always_on=0x00000000;
    public static int mobile_data_always_on_summary=0x00000000;
    /**
     * UI debug setting: select current app to mock location [CHAR LIMIT=50]
     */
    public static int mock_location_app=0x00000000;
    /**
     * UI debug setting: no mock location app has been set [CHAR LIMIT=50]
     */
    public static int mock_location_app_not_set=0x00000000;
    /**
     * UI debug setting: mock location app has been set [CHAR LIMIT=50]
     */
    public static int mock_location_app_set=0x00000000;
    /**
     * UI debug setting: label for app picker to select no applicatiojn [CHAR LIMIT=50]
     */
    public static int no_application=0x00000000;
    /**
     * Full package name of OEM preferred device feedback reporter. Leave this blank, overlaid in Settings/TvSettings [DO NOT TRANSLATE]
     */
    public static int oem_preferred_feedback_reporter=0x00000000;
    /**
     * setting Checkbox title whether to enable OEM unlock [CHAR_LIMIT=35]
     */
    public static int oem_unlock_enable=0x00000000;
    /**
     * setting Checkbox summary whether to enable OEM unlock [CHAR_LIMIT=50]
     */
    public static int oem_unlock_enable_summary=0x00000000;
    /**
     * UI debug setting: simulate secondary display devices using overlays [CHAR LIMIT=25]
     */
    public static int overlay_display_devices_title=0x00000000;
    /**
     * Name of feature to change color setting for the display [CHAR LIMIT=60]
     */
    public static int picture_color_mode=0x00000000;
    /**
     * Description of feature to change color setting for the display [CHAR LIMIT=NONE]
     */
    public static int picture_color_mode_desc=0x00000000;
    /**
     * UI debug setting: show pointer location? [CHAR LIMIT=25]
     */
    public static int pointer_location=0x00000000;
    /**
     * UI debug setting: show pointer location summary [CHAR LIMIT=50]
     */
    public static int pointer_location_summary=0x00000000;
    /**
     * [CHAR_LIMIT=40] Label for battery level chart when charging
     */
    public static int power_charging=0x00000000;
    /**
     * [CHAR_LIMIT=40] Label for battery level chart when charging with duration
     */
    public static int power_charging_duration=0x00000000;
    /**
     * [CHAR_LIMIT=40] Label for battery level chart when charging with duration
     */
    public static int power_charging_duration_ac=0x00000000;
    /**
     * [CHAR_LIMIT=40] Short label for battery level chart when charging with duration
     */
    public static int power_charging_duration_ac_short=0x00000000;
    /**
     * [CHAR_LIMIT=40] Short label for battery level chart when charging with duration
     */
    public static int power_charging_duration_short=0x00000000;
    /**
     * [CHAR_LIMIT=40] Label for battery level chart when charging with duration
     */
    public static int power_charging_duration_usb=0x00000000;
    /**
     * [CHAR_LIMIT=40] Short label for battery level chart when charging with duration
     */
    public static int power_charging_duration_usb_short=0x00000000;
    /**
     * [CHAR_LIMIT=40] Label for battery level chart when charging with duration
     */
    public static int power_charging_duration_wireless=0x00000000;
    /**
     * [CHAR_LIMIT=40] Label for battery level chart when charging with duration
     */
    public static int power_charging_duration_wireless_short=0x00000000;
    /**
     * [CHAR_LIMIT=40] Label for battery level chart when discharging with duration
     */
    public static int power_discharging_duration=0x00000000;
    /**
     * [CHAR_LIMIT=40] Label for battery level chart when discharging with duration
     */
    public static int power_discharging_duration_short=0x00000000;
    /**
     * [CHAR_LIMIT=40] Label for estimated remaining duration of battery charging/discharging
     */
    public static int power_remaining_duration_only=0x00000000;
    /**
     * [CHAR_LIMIT=40] Short label for estimated remaining duration of battery charging/discharging
     */
    public static int power_remaining_duration_only_short=0x00000000;
    /**
     * Label for kernel threads in battery usage
     */
    public static int process_kernel_label=0x00000000;
    /**
     * HTTP proxy settings. The hint text for proxy exclusion list.
     */
    public static int proxy_exclusionlist_hint=0x00000000;
    /**
     * HTTP proxy settings. The hint text field for the hostname.
     */
    public static int proxy_hostname_hint=0x00000000;
    /**
     * HTTP proxy settings. The hint text field for port.
     */
    public static int proxy_port_hint=0x00000000;
    /**
     * HTTP proxy settings. Hint for Proxy-Auto Config URL.
     */
    public static int proxy_url_hint=0x00000000;
    /**
     * Label for length of time until battery is charged [CHAR LIMIT=20]
     */
    public static int remaining_length_format=0x00000000;
    /**
     * [CHAR LIMIT=NONE] Label of a running process that represents another user
     */
    public static int running_process_item_user_label=0x00000000;
    /**
     * Services settings screen, setting option summary for the user to go to the screen to view running services
     */
    public static int runningservices_settings_summary=0x00000000;
    /**
     * Services settings screen, setting option name for the user to go to the screen to view running services
     */
    public static int runningservices_settings_title=0x00000000;
    /**
     * Summary for saved networks
     */
    public static int saved_network=0x00000000;
    /**
     * Description for a custom screen zoom level. This shows the requested display
     * density in raw pixels per inch rather than using a relative description. [CHAR LIMIT=24]
     */
    public static int screen_zoom_summary_custom=0x00000000;
    /**
     * Description for the device's default screen zoom level. [CHAR LIMIT=24]
     */
    public static int screen_zoom_summary_default=0x00000000;
    /**
     * Description for the screen zoom level that makes interface elements largest. [CHAR LIMIT=24]
     */
    public static int screen_zoom_summary_extremely_large=0x00000000;
    /**
     * Description for the screen zoom level that makes interface elements large. [CHAR LIMIT=24]
     */
    public static int screen_zoom_summary_large=0x00000000;
    /**
     * Description for the screen zoom level that makes interface elements small. [CHAR LIMIT=24]
     */
    public static int screen_zoom_summary_small=0x00000000;
    /**
     * Description for the screen zoom level that makes interface elements larger. [CHAR LIMIT=24]
     */
    public static int screen_zoom_summary_very_large=0x00000000;
    /**
     * UI debug setting: title for app picker dialog [CHAR LIMIT=50]
     */
    public static int select_application=0x00000000;
    /**
     * UI debug setting: limit size of Android logger buffers [CHAR LIMIT=59]
     */
    public static int select_logd_size_dialog_title=0x00000000;
    /**
     * UI debug setting: limit size of Android logger buffers
     */
    public static int select_logd_size_title=0x00000000;
    /**
     * UI debug setting: select which logs to store persistently [CHAR LIMIT=80]
     */
    public static int select_logpersist_dialog_title=0x00000000;
    /**
     * Title of checkbox setting to perform package verification on apps installed over USB/ADT/ADB [CHAR LIMIT=32]
     */
    public static int select_logpersist_title=0x00000000;
    /**
     * UI debug setting: limit size of Android logger buffers [CHAR LIMIT=59]
     */
    public static int select_usb_configuration_dialog_title=0x00000000;
    /**
     * UI debug setting: select USB configuration
     */
    public static int select_usb_configuration_title=0x00000000;
    /**
     * Developer settings: select WebView provider dialog title [CHAR LIMIT=30]
     */
    public static int select_webview_provider_dialog_title=0x00000000;
    /**
     * Developer settings: select WebView provider title [CHAR LIMIT=30]
     */
    public static int select_webview_provider_title=0x00000000;
    /**
     * Developer settings: text for the WebView provider selection toast shown if an invalid provider was chosen (i.e. the setting list was stale). [CHAR LIMIT=NONE]
     */
    public static int select_webview_provider_toast_text=0x00000000;
    /**
     * Package name for Settings app
     */
    public static int settings_package=0x00000000;
    /**
     * UI debug setting: show all ANRs? [CHAR LIMIT=25]
     */
    public static int show_all_anrs=0x00000000;
    /**
     * UI debug setting: show all ANRs summary [CHAR LIMIT=50]
     */
    public static int show_all_anrs_summary=0x00000000;
    /**
     * UI debug setting: show when hardware layers get updated [CHAR LIMIT=25]
     */
    public static int show_hw_layers_updates=0x00000000;
    /**
     * UI debug setting: show hardware layers updates summary [CHAR LIMIT=50]
     */
    public static int show_hw_layers_updates_summary=0x00000000;
    /**
     * UI debug setting: show where window updates happen with GPU rendering? [CHAR LIMIT=25]
     */
    public static int show_hw_screen_updates=0x00000000;
    /**
     * UI debug setting: show GPU rendering screen updates summary [CHAR LIMIT=50]
     */
    public static int show_hw_screen_updates_summary=0x00000000;
    /**
     * UI debug setting: show when non-rectangular clip operations are used [CHAR LIMIT=100]
     */
    public static int show_non_rect_clip=0x00000000;
    /**
     * UI debug setting: show where surface updates happen? [CHAR LIMIT=25]
     */
    public static int show_screen_updates=0x00000000;
    /**
     * UI debug setting: show surface updates summary [CHAR LIMIT=50]
     */
    public static int show_screen_updates_summary=0x00000000;
    /**
     * UI debug setting: show touches? [CHAR LIMIT=25]
     */
    public static int show_touches=0x00000000;
    /**
     * UI debug setting: show touches location summary [CHAR LIMIT=50]
     */
    public static int show_touches_summary=0x00000000;
    /**
     * UI debug setting: simulate color space anomalies. [CHAR LIMIT=25]
     */
    public static int simulate_color_space=0x00000000;
    /**
     * UI debug setting: always enable strict mode? [CHAR LIMIT=25]
     */
    public static int strict_mode=0x00000000;
    /**
     * UI debug setting: show strict mode summary [CHAR LIMIT=50]
     */
    public static int strict_mode_summary=0x00000000;
    /**
     * Tethering controls, item title to go into the tethering settings when USB, Bluetooth and Wifi tethering are available [CHAR LIMIT=25]
     */
    public static int tether_settings_title_all=0x00000000;
    /**
     * Tethering controls, item title to go into the tethering settings when only Bluetooth tethering is available [CHAR LIMIT=25]
     */
    public static int tether_settings_title_bluetooth=0x00000000;
    /**
     * Tethering controls, item title to go into the tethering settings when only USB tethering is available [CHAR LIMIT=25]
     */
    public static int tether_settings_title_usb=0x00000000;
    /**
     * Tethering controls, item title to go into the tethering settings when USB and Bluetooth tethering are available [CHAR LIMIT=25]
     */
    public static int tether_settings_title_usb_bluetooth=0x00000000;
    /**
     * Tethering controls, item title to go into the tethering settings when only Wifi tethering is available [CHAR LIMIT=25]
     */
    public static int tether_settings_title_wifi=0x00000000;
    /**
     * Error message for users that aren't allowed to modify Tethering settings [CHAR LIMIT=none]
     */
    public static int tethering_settings_not_available=0x00000000;
    /**
     * Title used on dialog with final prompt for converting to file encryption
     */
    public static int title_convert_fbe=0x00000000;
    /**
     * UI debug setting: profile time taken by hardware acceleration to render apps [CHAR LIMIT=25]
     */
    public static int track_frame_time=0x00000000;
    /**
     * UI debug setting: scaling factor for transition animations [CHAR LIMIT=25]
     */
    public static int transition_animation_scale_title=0x00000000;
    /**
     * On main TTS Settings screen, summary for default language for synthesized voice
     */
    public static int tts_default_lang_summary=0x00000000;
    /**
     * On main TTS Settings screen, in default settings section, setting default language for synthesized voice
     */
    public static int tts_default_lang_title=0x00000000;
    /**
     * On main TTS Settings screen, summary for default pitch for synthesized voice
     */
    public static int tts_default_pitch_summary=0x00000000;
    /**
     * On main TTS Settings screen, in default settings section, setting default pitch for synthesized voice
     */
    public static int tts_default_pitch_title=0x00000000;
    /**
     * On main TTS Settings screen, summary for default speech rate for synthesized voice
     */
    public static int tts_default_rate_summary=0x00000000;
    /**
     * On main TTS Settings screen, in default settings section, setting default speech rate for synthesized voice
     */
    public static int tts_default_rate_title=0x00000000;
    /**
     * Text spoken by the TTS engine as an example if the engine doesn't provide sample text [CHAR LIMIT=100]
     */
    public static int tts_default_sample_string=0x00000000;
    /**
     * Warning message about required internet conectivity for TTS synthesis, displayed as a dialog
     * message when the user selects to play an example for network only locale and there's no internet connectivity.
     */
    public static int tts_engine_network_required=0x00000000;
    /**
     * [CHAR LIMIT=50] The text for the settings section that users to set a
     * preferred text to speech engine
     */
    public static int tts_engine_preference_section_title=0x00000000;
    /**
     * Warning message about security implications of enabling a TTS engine, displayed as a dialog
     * message when the user selects to enable an engine.
     */
    public static int tts_engine_security_warning=0x00000000;
    /**
     * [CHAR LIMIT=150] Text for screen readers / accessibility programs for
     * the image that launches the TTS engine settings when clicked.
     */
    public static int tts_engine_settings_button=0x00000000;
    /**
     * Title for a preference in the main TTS settings screen, which
     * launches the settings screen for a given TTS engine when clicked
     * [CHAR LIMIT=30]
     */
    public static int tts_engine_settings_title=0x00000000;
    /**
     * [CHAR LIMIT=50] Title of the settings section that displays general preferences
     * that are applicable to all engines, such as the speech rate
     */
    public static int tts_general_section_title=0x00000000;
    /**
     * On main TTS Settings screen, summary for click to install required speech synthesis data
     */
    public static int tts_install_data_summary=0x00000000;
    /**
     * On main TTS Settings screen, click to install required speech synthesis data
     */
    public static int tts_install_data_title=0x00000000;
    /**
     * On main TTS Settings screen, language summary if it can't default to system language [CHAR LIMIT=50]
     */
    public static int tts_lang_not_selected=0x00000000;
    /**
     * Entry in the TTS engine language/locale picker, when selected will try to default to the system language [CHAR LIMIT=50]
     */
    public static int tts_lang_use_system=0x00000000;
    /**
     * On main TTS Settings screen, summary for triggering playback of an example of speech synthesis
     */
    public static int tts_play_example_summary=0x00000000;
    /**
     * On main TTS Settings screen, triggers playback of an example of speech synthesis
     */
    public static int tts_play_example_title=0x00000000;
    /**
     * On main TTS Settings screen, summary for reset speech pitch of synthesized voice [CHAR LIMIT=150]
     */
    public static int tts_reset_speech_pitch_summary=0x00000000;
    /**
     * On main TTS Settings screen, in default settings section,
     * reset speech pitch of synthesized voice to 1x speech pitch. [CHAR LIMIT=50]
     */
    public static int tts_reset_speech_pitch_title=0x00000000;
    /**
     * Name of the TTS package as listed by the package manager.
     */
    public static int tts_settings=0x00000000;
    /**
     * TTS option item name in the main settings screen
     */
    public static int tts_settings_title=0x00000000;
    /**
     * On main TTS Settings screen, current TTS engine status for the current default language,
     * tts engine is queried for status [CHAR LIMIT=150]
     */
    public static int tts_status_checking=0x00000000;
    /**
     * On main TTS Settings screen, current TTS engine status for the current default language,
     * selected language is not supported by the engine [CHAR LIMIT=150]
     */
    public static int tts_status_not_supported=0x00000000;
    /**
     * On main TTS Settings screen, current TTS engine status for the current default language,
     * selected language is fully supported by the engine [CHAR LIMIT=150]
     */
    public static int tts_status_ok=0x00000000;
    /**
     * On main TTS Settings screen, current TTS engine status for the current default language,
     * selected language is supported by the engine only if there's a working network connection [CHAR LIMIT=150]
     */
    public static int tts_status_requires_network=0x00000000;
    /**
     * On main TTS Settings screen, title of a field explaining current TTS engine status for
     * current default language [CHAR LIMIT=50]
     */
    public static int tts_status_title=0x00000000;
    /**
     * Manage apps, individual app screen, substituted for the application's label when the app's label CAN NOT be determined.
     */
    public static int unknown=0x00000000;
    /**
     * UI debug setting: disable USB audio routing title [CHAR LIMIT=32]
     */
    public static int usb_audio_disable_routing=0x00000000;
    /**
     * UI debug setting: disable USB audio routing summary [CHAR LIMIT=50]
     */
    public static int usb_audio_disable_routing_summary=0x00000000;
    /**
     * Title for Guest user [CHAR LIMIT=35]
     */
    public static int user_guest=0x00000000;
    /**
     * Summary of checkbox setting to perform package verification on apps installed over USB/ADT/ADB [CHAR LIMIT=NONE]
     */
    public static int verify_apps_over_usb_summary=0x00000000;
    /**
     * Title of checkbox setting to perform package verification on apps installed over USB/ADT/ADB [CHAR LIMIT=32]
     */
    public static int verify_apps_over_usb_title=0x00000000;
    /**
     * Error message for users that aren't allowed to modify VPN settings [CHAR LIMIT=none]
     */
    public static int vpn_settings_not_available=0x00000000;
    /**
     * UI debug setting: wait for debugger to attach to debugging process? [CHAR LIMIT=50]
     */
    public static int wait_for_debugger=0x00000000;
    /**
     * UI debug setting: wait for debugger to attach to debugging process summary [CHAR LIMIT=500]
     */
    public static int wait_for_debugger_summary=0x00000000;
    /**
     * Setting Checkbox title whether to enable WiFi Aggressive Handover. [CHAR LIMIT=40]
     */
    public static int wifi_aggressive_handover=0x00000000;
    /**
     * Setting Checkbox summary whether to enable Wifi aggressive handover [CHAR LIMIT=130]
     */
    public static int wifi_aggressive_handover_summary=0x00000000;
    /**
     * Setting Checkbox title whether to enable WiFi Scanning in the presence of traffic. [CHAR LIMIT=80]
     */
    public static int wifi_allow_scan_with_traffic=0x00000000;
    /**
     * Setting Checkbox summary whether to always allow WiFi Roam Scans [CHAR LIMIT=130]
     */
    public static int wifi_allow_scan_with_traffic_summary=0x00000000;
    /**
     * Summary for Connected wifi network without internet
     */
    public static int wifi_connected_no_internet=0x00000000;
    /**
     * Status for networks disabled for unknown reason
     */
    public static int wifi_disabled_generic=0x00000000;
    /**
     * Status for networked disabled from a DNS or DHCP failure
     */
    public static int wifi_disabled_network_failure=0x00000000;
    /**
     * Status for networks disabled from authentication failure (wrong password
     * or certificate).
     */
    public static int wifi_disabled_password_failure=0x00000000;
    /**
     * Status for networked disabled from a wifi association failure
     */
    public static int wifi_disabled_wifi_failure=0x00000000;
    /**
     * Setting Checkbox title whether to show options for wireless display certification
     */
    public static int wifi_display_certification=0x00000000;
    /**
     * setting Checkbox summary whether to show options for wireless display certification
     */
    public static int wifi_display_certification_summary=0x00000000;
    /**
     * Hint text for DNS
     */
    public static int wifi_dns1_hint=0x00000000;
    /**
     * Hint text for DNS
     */
    public static int wifi_dns2_hint=0x00000000;
    /**
     * Toast message when Wi-Fi cannot scan for networks
     */
    public static int wifi_fail_to_scan=0x00000000;
    /**
     * Hint text for the gateway
     */
    public static int wifi_gateway_hint=0x00000000;
    /**
     * Hint text for the IP address
     */
    public static int wifi_ip_address_hint=0x00000000;
    /**
     * Hint text for network prefix length
     */
    public static int wifi_network_prefix_length_hint=0x00000000;
    /**
     * Summary for the remembered network but no internet connection was detected.
     */
    public static int wifi_no_internet=0x00000000;
    /**
     * Summary for the network but no internet connection was detected.
     */
    public static int wifi_no_internet_no_reconnect=0x00000000;
    /**
     * Summary for the remembered network but currently not in range.
     */
    public static int wifi_not_in_range=0x00000000;
    /**
     * Summary for the remembered network.
     */
    public static int wifi_remembered=0x00000000;
    /**
     * Do not translate.  Concise terminology for wifi with 802.1x EAP security
     */
    public static int wifi_security_eap=0x00000000;
    /**
     * Used in Wi-Fi settings dialogs when Wi-Fi does not have any security.
     */
    public static int wifi_security_none=0x00000000;
    /**
     * Do not translate.  Concise terminology for Passpoint network
     */
    public static int wifi_security_passpoint=0x00000000;
    /**
     * Do not translate.  Terminology for wifi with unknown PSK type
     */
    public static int wifi_security_psk_generic=0x00000000;
    /**
     * Do not translate.  Concise terminology for wifi with 802.1x EAP security
     */
    public static int wifi_security_short_eap=0x00000000;
    /**
     * Do not translate.  Concise terminology for wifi with unknown PSK type
     */
    public static int wifi_security_short_psk_generic=0x00000000;
    /**
     * Do not translate.  Concise terminology for wifi with WEP security
     */
    public static int wifi_security_short_wep=0x00000000;
    /**
     * Do not translate.  Concise terminology for wifi with WPA security
     */
    public static int wifi_security_short_wpa=0x00000000;
    /**
     * Do not translate.  Concise terminology for wifi with WPA2 security
     */
    public static int wifi_security_short_wpa2=0x00000000;
    /**
     * Do not translate.  Concise terminology for wifi with both WPA/WPA2 security
     */
    public static int wifi_security_short_wpa_wpa2=0x00000000;
    /**
     * Do not translate.  Terminology for wifi with WEP security
     */
    public static int wifi_security_wep=0x00000000;
    /**
     * Do not translate.  Terminology for wifi with WPA security
     */
    public static int wifi_security_wpa=0x00000000;
    /**
     * Do not translate.  Terminology for wifi with WPA2 security
     */
    public static int wifi_security_wpa2=0x00000000;
    /**
     * Do not translate.  Terminology for wifi with both WPA/WPA2 security, or unknown
     */
    public static int wifi_security_wpa_wpa2=0x00000000;
    /**
     * Setting Checkbox title whether to enable WiFi Verbose Logging. [CHAR LIMIT=40]
     */
    public static int wifi_verbose_logging=0x00000000;
    /**
     * Setting Checkbox summary whether to enable Wifi verbose Logging [CHAR LIMIT=80]
     */
    public static int wifi_verbose_logging_summary=0x00000000;
    /**
     * UI debug setting: scaling factor for window animations [CHAR LIMIT=25]
     */
    public static int window_animation_scale_title=0x00000000;
  }
  public static final class styleable {
    /**
     * Attributes that can be used with a RestrictedPreference.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RestrictedPreference_useAdminDisabledSummary com.android.settingslib:useAdminDisabledSummary}</code></td><td>If true then we can use enabled/disabled by admin strings for summary (android.</td></tr>
     * <tr><td><code>{@link #RestrictedPreference_userRestriction com.android.settingslib:userRestriction}</code></td><td>The user restriction on which the preference disabled by admin state will be based on.</td></tr>
     * </table>
     * @see #RestrictedPreference_useAdminDisabledSummary
     * @see #RestrictedPreference_userRestriction
     */
    public static final int[] RestrictedPreference={
        0x00000000, 0x00000000
      };
    /**
     * <p>
     * @attr description
     * If true then we can use enabled/disabled by admin strings for summary (android.R.id.summary).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.settingslib:useAdminDisabledSummary
     */
    public static int RestrictedPreference_useAdminDisabledSummary=0;
    /**
     * <p>
     * @attr description
     * The user restriction on which the preference disabled by admin state will be based on.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.settingslib:userRestriction
     */
    public static int RestrictedPreference_userRestriction=1;
    /**
     * Attributes that can be used with a RestrictedSwitchPreference.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RestrictedSwitchPreference_restrictedSwitchSummary com.android.settingslib:restrictedSwitchSummary}</code></td><td>This is used as summary for restricted switch preferences, default value is
     * @string/disabled_by_admin (Disabled by administrator).</td></tr>
     * <tr><td><code>{@link #RestrictedSwitchPreference_useAdditionalSummary com.android.settingslib:useAdditionalSummary}</code></td><td>If true, an additional summary will be added in addition to the existing summary and
     * this will be used for enabled/disabled by admin strings leaving android.</td></tr>
     * </table>
     * @see #RestrictedSwitchPreference_restrictedSwitchSummary
     * @see #RestrictedSwitchPreference_useAdditionalSummary
     */
    public static final int[] RestrictedSwitchPreference={
        0x00000000, 0x00000000
      };
    /**
     * <p>
     * @attr description
     * This is used as summary for restricted switch preferences, default value is
     * @string/disabled_by_admin (Disabled by administrator).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.settingslib:restrictedSwitchSummary
     */
    public static int RestrictedSwitchPreference_restrictedSwitchSummary=0;
    /**
     * <p>
     * @attr description
     * If true, an additional summary will be added in addition to the existing summary and
     * this will be used for enabled/disabled by admin strings leaving android.R.id.summary untouched.
     * As such when this is true, useAdminDisabledSummary will be overwritten to false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.settingslib:useAdditionalSummary
     */
    public static int RestrictedSwitchPreference_useAdditionalSummary=1;
    /**
     * Attributes that can be used with a UsageView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #UsageView_bottomLabels com.android.settingslib:bottomLabels}</code></td><td></td></tr>
     * <tr><td><code>{@link #UsageView_sideLabels com.android.settingslib:sideLabels}</code></td><td></td></tr>
     * <tr><td><code>{@link #UsageView_textColor com.android.settingslib:textColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #UsageView_android_gravity android:gravity}</code></td><td></td></tr>
     * <tr><td><code>{@link #UsageView_android_colorAccent android:colorAccent}</code></td><td></td></tr>
     * </table>
     * @see #UsageView_bottomLabels
     * @see #UsageView_sideLabels
     * @see #UsageView_textColor
     * @see #UsageView_android_gravity
     * @see #UsageView_android_colorAccent
     */
    public static final int[] UsageView={
        0x00000000, 0x00000000, 0x00000000, 0x010100af, 
        0x01010435
      };
    /**
     * <p>This symbol is the offset where the {@link com.android.settingslib.R.attr#bottomLabels}
     * attribute's value can be found in the {@link #UsageView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.settingslib:bottomLabels
     */
    public static int UsageView_bottomLabels=0;
    /**
     * <p>This symbol is the offset where the {@link com.android.settingslib.R.attr#sideLabels}
     * attribute's value can be found in the {@link #UsageView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.settingslib:sideLabels
     */
    public static int UsageView_sideLabels=1;
    /**
     * <p>This symbol is the offset where the {@link com.android.settingslib.R.attr#textColor}
     * attribute's value can be found in the {@link #UsageView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.settingslib:textColor
     */
    public static int UsageView_textColor=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#gravity}
     * attribute's value can be found in the {@link #UsageView} array.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>end</td><td>800005</td><td></td></tr>
     * <tr><td>start</td><td>800003</td><td></td></tr>
     * <tr><td>bottom</td><td>50</td><td></td></tr>
     * <tr><td>center</td><td>11</td><td></td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td></td></tr>
     * <tr><td>center_vertical</td><td>10</td><td></td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td></td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td></td></tr>
     * <tr><td>fill</td><td>77</td><td></td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td></td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td></td></tr>
     * <tr><td>left</td><td>3</td><td></td></tr>
     * <tr><td>right</td><td>5</td><td></td></tr>
     * <tr><td>top</td><td>30</td><td></td></tr>
     * </table>
     *
     * @attr name android:gravity
     */
    public static int UsageView_android_gravity=3;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#colorAccent}
     * attribute's value can be found in the {@link #UsageView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorAccent
     */
    public static int UsageView_android_colorAccent=4;
    /**
     * Attributes that can be used with a WifiEncryptionState.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #WifiEncryptionState_state_encrypted com.android.settingslib:state_encrypted}</code></td><td></td></tr>
     * </table>
     * @see #WifiEncryptionState_state_encrypted
     */
    public static final int[] WifiEncryptionState={
        0x00000000
      };
    /**
     * <p>This symbol is the offset where the {@link com.android.settingslib.R.attr#state_encrypted}
     * attribute's value can be found in the {@link #WifiEncryptionState} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.settingslib:state_encrypted
     */
    public static int WifiEncryptionState_state_encrypted=0;
  }
  public static final class xml {
    public static int timezones=0x00000000;
  }
}