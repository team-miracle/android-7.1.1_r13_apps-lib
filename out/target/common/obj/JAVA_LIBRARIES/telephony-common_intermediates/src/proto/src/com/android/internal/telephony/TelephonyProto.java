// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.android.internal.telephony;

// @@protoc_insertion_point(imports_scope)

@SuppressWarnings("hiding")
public interface TelephonyProto {

  // enum RadioAccessTechnology
  public interface RadioAccessTechnology {
    public static final int RAT_UNKNOWN = 0;
    public static final int RAT_GPRS = 1;
    public static final int RAT_EDGE = 2;
    public static final int RAT_UMTS = 3;
    public static final int RAT_IS95A = 4;
    public static final int RAT_IS95B = 5;
    public static final int RAT_1XRTT = 6;
    public static final int RAT_EVDO_0 = 7;
    public static final int RAT_EVDO_A = 8;
    public static final int RAT_HSDPA = 9;
    public static final int RAT_HSUPA = 10;
    public static final int RAT_HSPA = 11;
    public static final int RAT_EVDO_B = 12;
    public static final int RAT_EHRPD = 13;
    public static final int RAT_LTE = 14;
    public static final int RAT_HSPAP = 15;
    public static final int RAT_GSM = 16;
    public static final int RAT_TD_SCDMA = 17;
    public static final int RAT_IWLAN = 18;
    public static final int RAT_LTE_CA = 19;
  }

  // enum RilErrno
  public interface RilErrno {
    public static final int RIL_E_UNKNOWN = 0;
    public static final int RIL_E_SUCCESS = 1;
    public static final int RIL_E_RADIO_NOT_AVAILABLE = 2;
    public static final int RIL_E_GENERIC_FAILURE = 3;
    public static final int RIL_E_PASSWORD_INCORRECT = 4;
    public static final int RIL_E_SIM_PIN2 = 5;
    public static final int RIL_E_SIM_PUK2 = 6;
    public static final int RIL_E_REQUEST_NOT_SUPPORTED = 7;
    public static final int RIL_E_CANCELLED = 8;
    public static final int RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL = 9;
    public static final int RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW = 10;
    public static final int RIL_E_SMS_SEND_FAIL_RETRY = 11;
    public static final int RIL_E_SIM_ABSENT = 12;
    public static final int RIL_E_SUBSCRIPTION_NOT_AVAILABLE = 13;
    public static final int RIL_E_MODE_NOT_SUPPORTED = 14;
    public static final int RIL_E_FDN_CHECK_FAILURE = 15;
    public static final int RIL_E_ILLEGAL_SIM_OR_ME = 16;
    public static final int RIL_E_MISSING_RESOURCE = 17;
    public static final int RIL_E_NO_SUCH_ELEMENT = 18;
    public static final int RIL_E_DIAL_MODIFIED_TO_USSD = 19;
    public static final int RIL_E_DIAL_MODIFIED_TO_SS = 20;
    public static final int RIL_E_DIAL_MODIFIED_TO_DIAL = 21;
    public static final int RIL_E_USSD_MODIFIED_TO_DIAL = 22;
    public static final int RIL_E_USSD_MODIFIED_TO_SS = 23;
    public static final int RIL_E_USSD_MODIFIED_TO_USSD = 24;
    public static final int RIL_E_SS_MODIFIED_TO_DIAL = 25;
    public static final int RIL_E_SS_MODIFIED_TO_USSD = 26;
    public static final int RIL_E_SUBSCRIPTION_NOT_SUPPORTED = 27;
    public static final int RIL_E_SS_MODIFIED_TO_SS = 28;
    public static final int RIL_E_LCE_NOT_SUPPORTED = 36;
  }

  // enum PdpType
  public interface PdpType {
    public static final int PDP_UNKNOWN = 0;
    public static final int PDP_TYPE_IP = 1;
    public static final int PDP_TYPE_IPV6 = 2;
    public static final int PDP_TYPE_IPV4V6 = 3;
    public static final int PDP_TYPE_PPP = 4;
  }

  // enum TimeInterval
  public interface TimeInterval {
    public static final int TI_UNKNOWN = 0;
    public static final int TI_10_MILLIS = 1;
    public static final int TI_20_MILLIS = 2;
    public static final int TI_50_MILLIS = 3;
    public static final int TI_100_MILLIS = 4;
    public static final int TI_200_MILLIS = 5;
    public static final int TI_500_MILLIS = 6;
    public static final int TI_1_SEC = 7;
    public static final int TI_2_SEC = 8;
    public static final int TI_5_SEC = 9;
    public static final int TI_10_SEC = 10;
    public static final int TI_30_SEC = 11;
    public static final int TI_1_MINUTE = 12;
    public static final int TI_3_MINUTES = 13;
    public static final int TI_10_MINUTES = 14;
    public static final int TI_30_MINUTES = 15;
    public static final int TI_1_HOUR = 16;
    public static final int TI_2_HOURS = 17;
    public static final int TI_4_HOURS = 18;
    public static final int TI_MANY_HOURS = 19;
  }

  public static final class TelephonyLog extends
      com.google.protobuf.nano.ExtendableMessageNano<TelephonyLog> {

    private static volatile TelephonyLog[] _emptyArray;
    public static TelephonyLog[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new TelephonyLog[0];
          }
        }
      }
      return _emptyArray;
    }

    private int bitField0_;

    // repeated .clearcut.connectivity.TelephonyEvent events = 1;
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent[] events;

    // repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;
    public com.android.internal.telephony.TelephonyProto.TelephonyCallSession[] callSessions;

    // repeated .clearcut.connectivity.SmsSession sms_sessions = 3;
    public com.android.internal.telephony.TelephonyProto.SmsSession[] smsSessions;

    // repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;
    public com.android.internal.telephony.TelephonyProto.TelephonyHistogram[] histograms;

    // optional bool events_dropped = 5;
    private boolean eventsDropped_;
    public boolean getEventsDropped() {
      return eventsDropped_;
    }
    public TelephonyLog setEventsDropped(boolean value) {
      eventsDropped_ = value;
      bitField0_ |= 0x00000001;
      return this;
    }
    public boolean hasEventsDropped() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    public TelephonyLog clearEventsDropped() {
      eventsDropped_ = false;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    // optional .clearcut.connectivity.Time start_time = 6;
    public com.android.internal.telephony.TelephonyProto.Time startTime;

    // optional .clearcut.connectivity.Time end_time = 7;
    public com.android.internal.telephony.TelephonyProto.Time endTime;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyLog)

    public TelephonyLog() {
      clear();
    }

    public TelephonyLog clear() {
      bitField0_ = 0;
      events = com.android.internal.telephony.TelephonyProto.TelephonyEvent.emptyArray();
      callSessions = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.emptyArray();
      smsSessions = com.android.internal.telephony.TelephonyProto.SmsSession.emptyArray();
      histograms = com.android.internal.telephony.TelephonyProto.TelephonyHistogram.emptyArray();
      eventsDropped_ = false;
      startTime = null;
      endTime = null;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent element = this.events[i];
          if (element != null) {
            output.writeMessage(1, element);
          }
        }
      }
      if (this.callSessions != null && this.callSessions.length > 0) {
        for (int i = 0; i < this.callSessions.length; i++) {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession element = this.callSessions[i];
          if (element != null) {
            output.writeMessage(2, element);
          }
        }
      }
      if (this.smsSessions != null && this.smsSessions.length > 0) {
        for (int i = 0; i < this.smsSessions.length; i++) {
          com.android.internal.telephony.TelephonyProto.SmsSession element = this.smsSessions[i];
          if (element != null) {
            output.writeMessage(3, element);
          }
        }
      }
      if (this.histograms != null && this.histograms.length > 0) {
        for (int i = 0; i < this.histograms.length; i++) {
          com.android.internal.telephony.TelephonyProto.TelephonyHistogram element = this.histograms[i];
          if (element != null) {
            output.writeMessage(4, element);
          }
        }
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(5, eventsDropped_);
      }
      if (this.startTime != null) {
        output.writeMessage(6, this.startTime);
      }
      if (this.endTime != null) {
        output.writeMessage(7, this.endTime);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent element = this.events[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(1, element);
          }
        }
      }
      if (this.callSessions != null && this.callSessions.length > 0) {
        for (int i = 0; i < this.callSessions.length; i++) {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession element = this.callSessions[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(2, element);
          }
        }
      }
      if (this.smsSessions != null && this.smsSessions.length > 0) {
        for (int i = 0; i < this.smsSessions.length; i++) {
          com.android.internal.telephony.TelephonyProto.SmsSession element = this.smsSessions[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(3, element);
          }
        }
      }
      if (this.histograms != null && this.histograms.length > 0) {
        for (int i = 0; i < this.histograms.length; i++) {
          com.android.internal.telephony.TelephonyProto.TelephonyHistogram element = this.histograms[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(4, element);
          }
        }
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(5, eventsDropped_);
      }
      if (this.startTime != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(6, this.startTime);
      }
      if (this.endTime != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(7, this.endTime);
      }
      return size;
    }

    @Override
    public TelephonyLog mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 10);
            int i = this.events == null ? 0 : this.events.length;
            com.android.internal.telephony.TelephonyProto.TelephonyEvent[] newArray =
                new com.android.internal.telephony.TelephonyProto.TelephonyEvent[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.events, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.TelephonyProto.TelephonyEvent();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.TelephonyProto.TelephonyEvent();
            input.readMessage(newArray[i]);
            this.events = newArray;
            break;
          }
          case 18: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 18);
            int i = this.callSessions == null ? 0 : this.callSessions.length;
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession[] newArray =
                new com.android.internal.telephony.TelephonyProto.TelephonyCallSession[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.callSessions, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.TelephonyProto.TelephonyCallSession();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.TelephonyProto.TelephonyCallSession();
            input.readMessage(newArray[i]);
            this.callSessions = newArray;
            break;
          }
          case 26: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 26);
            int i = this.smsSessions == null ? 0 : this.smsSessions.length;
            com.android.internal.telephony.TelephonyProto.SmsSession[] newArray =
                new com.android.internal.telephony.TelephonyProto.SmsSession[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.smsSessions, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.TelephonyProto.SmsSession();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.TelephonyProto.SmsSession();
            input.readMessage(newArray[i]);
            this.smsSessions = newArray;
            break;
          }
          case 34: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 34);
            int i = this.histograms == null ? 0 : this.histograms.length;
            com.android.internal.telephony.TelephonyProto.TelephonyHistogram[] newArray =
                new com.android.internal.telephony.TelephonyProto.TelephonyHistogram[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.histograms, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.TelephonyProto.TelephonyHistogram();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.TelephonyProto.TelephonyHistogram();
            input.readMessage(newArray[i]);
            this.histograms = newArray;
            break;
          }
          case 40: {
            eventsDropped_ = input.readBool();
            bitField0_ |= 0x00000001;
            break;
          }
          case 50: {
            if (this.startTime == null) {
              this.startTime = new com.android.internal.telephony.TelephonyProto.Time();
            }
            input.readMessage(this.startTime);
            break;
          }
          case 58: {
            if (this.endTime == null) {
              this.endTime = new com.android.internal.telephony.TelephonyProto.Time();
            }
            input.readMessage(this.endTime);
            break;
          }
        }
      }
    }

    public static TelephonyLog parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonyLog(), data);
    }

    public static TelephonyLog parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new TelephonyLog().mergeFrom(input);
    }
  }

  public static final class Time extends
      com.google.protobuf.nano.ExtendableMessageNano<Time> {

    private static volatile Time[] _emptyArray;
    public static Time[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new Time[0];
          }
        }
      }
      return _emptyArray;
    }

    private int bitField0_;

    // optional int64 system_timestamp_millis = 1;
    private long systemTimestampMillis_;
    public long getSystemTimestampMillis() {
      return systemTimestampMillis_;
    }
    public Time setSystemTimestampMillis(long value) {
      systemTimestampMillis_ = value;
      bitField0_ |= 0x00000001;
      return this;
    }
    public boolean hasSystemTimestampMillis() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    public Time clearSystemTimestampMillis() {
      systemTimestampMillis_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    // optional int64 elapsed_timestamp_millis = 2;
    private long elapsedTimestampMillis_;
    public long getElapsedTimestampMillis() {
      return elapsedTimestampMillis_;
    }
    public Time setElapsedTimestampMillis(long value) {
      elapsedTimestampMillis_ = value;
      bitField0_ |= 0x00000002;
      return this;
    }
    public boolean hasElapsedTimestampMillis() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    public Time clearElapsedTimestampMillis() {
      elapsedTimestampMillis_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.Time)

    public Time() {
      clear();
    }

    public Time clear() {
      bitField0_ = 0;
      systemTimestampMillis_ = 0L;
      elapsedTimestampMillis_ = 0L;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt64(1, systemTimestampMillis_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt64(2, elapsedTimestampMillis_);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(1, systemTimestampMillis_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(2, elapsedTimestampMillis_);
      }
      return size;
    }

    @Override
    public Time mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            systemTimestampMillis_ = input.readInt64();
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            elapsedTimestampMillis_ = input.readInt64();
            bitField0_ |= 0x00000002;
            break;
          }
        }
      }
    }

    public static Time parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new Time(), data);
    }

    public static Time parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new Time().mergeFrom(input);
    }
  }

  public static final class TelephonyHistogram extends
      com.google.protobuf.nano.ExtendableMessageNano<TelephonyHistogram> {

    private static volatile TelephonyHistogram[] _emptyArray;
    public static TelephonyHistogram[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new TelephonyHistogram[0];
          }
        }
      }
      return _emptyArray;
    }

    private int bitField0_;

    // optional int32 category = 1;
    private int category_;
    public int getCategory() {
      return category_;
    }
    public TelephonyHistogram setCategory(int value) {
      category_ = value;
      bitField0_ |= 0x00000001;
      return this;
    }
    public boolean hasCategory() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    public TelephonyHistogram clearCategory() {
      category_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    // optional int32 id = 2;
    private int id_;
    public int getId() {
      return id_;
    }
    public TelephonyHistogram setId(int value) {
      id_ = value;
      bitField0_ |= 0x00000002;
      return this;
    }
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    public TelephonyHistogram clearId() {
      id_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    // optional int32 min_time_millis = 3;
    private int minTimeMillis_;
    public int getMinTimeMillis() {
      return minTimeMillis_;
    }
    public TelephonyHistogram setMinTimeMillis(int value) {
      minTimeMillis_ = value;
      bitField0_ |= 0x00000004;
      return this;
    }
    public boolean hasMinTimeMillis() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    public TelephonyHistogram clearMinTimeMillis() {
      minTimeMillis_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    // optional int32 max_time_millis = 4;
    private int maxTimeMillis_;
    public int getMaxTimeMillis() {
      return maxTimeMillis_;
    }
    public TelephonyHistogram setMaxTimeMillis(int value) {
      maxTimeMillis_ = value;
      bitField0_ |= 0x00000008;
      return this;
    }
    public boolean hasMaxTimeMillis() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    public TelephonyHistogram clearMaxTimeMillis() {
      maxTimeMillis_ = 0;
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    // optional int32 avg_time_millis = 5;
    private int avgTimeMillis_;
    public int getAvgTimeMillis() {
      return avgTimeMillis_;
    }
    public TelephonyHistogram setAvgTimeMillis(int value) {
      avgTimeMillis_ = value;
      bitField0_ |= 0x00000010;
      return this;
    }
    public boolean hasAvgTimeMillis() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    public TelephonyHistogram clearAvgTimeMillis() {
      avgTimeMillis_ = 0;
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    // optional int32 count = 6;
    private int count_;
    public int getCount() {
      return count_;
    }
    public TelephonyHistogram setCount(int value) {
      count_ = value;
      bitField0_ |= 0x00000020;
      return this;
    }
    public boolean hasCount() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    public TelephonyHistogram clearCount() {
      count_ = 0;
      bitField0_ = (bitField0_ & ~0x00000020);
      return this;
    }

    // optional int32 bucket_count = 7;
    private int bucketCount_;
    public int getBucketCount() {
      return bucketCount_;
    }
    public TelephonyHistogram setBucketCount(int value) {
      bucketCount_ = value;
      bitField0_ |= 0x00000040;
      return this;
    }
    public boolean hasBucketCount() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    public TelephonyHistogram clearBucketCount() {
      bucketCount_ = 0;
      bitField0_ = (bitField0_ & ~0x00000040);
      return this;
    }

    // repeated int32 bucket_end_points = 8;
    public int[] bucketEndPoints;

    // repeated int32 bucket_counters = 9;
    public int[] bucketCounters;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyHistogram)

    public TelephonyHistogram() {
      clear();
    }

    public TelephonyHistogram clear() {
      bitField0_ = 0;
      category_ = 0;
      id_ = 0;
      minTimeMillis_ = 0;
      maxTimeMillis_ = 0;
      avgTimeMillis_ = 0;
      count_ = 0;
      bucketCount_ = 0;
      bucketEndPoints = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
      bucketCounters = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, category_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, id_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(3, minTimeMillis_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(4, maxTimeMillis_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeInt32(5, avgTimeMillis_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeInt32(6, count_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeInt32(7, bucketCount_);
      }
      if (this.bucketEndPoints != null && this.bucketEndPoints.length > 0) {
        for (int i = 0; i < this.bucketEndPoints.length; i++) {
          output.writeInt32(8, this.bucketEndPoints[i]);
        }
      }
      if (this.bucketCounters != null && this.bucketCounters.length > 0) {
        for (int i = 0; i < this.bucketCounters.length; i++) {
          output.writeInt32(9, this.bucketCounters[i]);
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, category_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, id_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, minTimeMillis_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(4, maxTimeMillis_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(5, avgTimeMillis_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(6, count_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(7, bucketCount_);
      }
      if (this.bucketEndPoints != null && this.bucketEndPoints.length > 0) {
        int dataSize = 0;
        for (int i = 0; i < this.bucketEndPoints.length; i++) {
          int element = this.bucketEndPoints[i];
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * this.bucketEndPoints.length;
      }
      if (this.bucketCounters != null && this.bucketCounters.length > 0) {
        int dataSize = 0;
        for (int i = 0; i < this.bucketCounters.length; i++) {
          int element = this.bucketCounters[i];
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * this.bucketCounters.length;
      }
      return size;
    }

    @Override
    public TelephonyHistogram mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            category_ = input.readInt32();
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            id_ = input.readInt32();
            bitField0_ |= 0x00000002;
            break;
          }
          case 24: {
            minTimeMillis_ = input.readInt32();
            bitField0_ |= 0x00000004;
            break;
          }
          case 32: {
            maxTimeMillis_ = input.readInt32();
            bitField0_ |= 0x00000008;
            break;
          }
          case 40: {
            avgTimeMillis_ = input.readInt32();
            bitField0_ |= 0x00000010;
            break;
          }
          case 48: {
            count_ = input.readInt32();
            bitField0_ |= 0x00000020;
            break;
          }
          case 56: {
            bucketCount_ = input.readInt32();
            bitField0_ |= 0x00000040;
            break;
          }
          case 64: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 64);
            int i = this.bucketEndPoints == null ? 0 : this.bucketEndPoints.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.bucketEndPoints, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readInt32();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readInt32();
            this.bucketEndPoints = newArray;
            break;
          }
          case 66: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            // First pass to compute array length.
            int arrayLength = 0;
            int startPos = input.getPosition();
            while (input.getBytesUntilLimit() > 0) {
              input.readInt32();
              arrayLength++;
            }
            input.rewindToPosition(startPos);
            int i = this.bucketEndPoints == null ? 0 : this.bucketEndPoints.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.bucketEndPoints, 0, newArray, 0, i);
            }
            for (; i < newArray.length; i++) {
              newArray[i] = input.readInt32();
            }
            this.bucketEndPoints = newArray;
            input.popLimit(limit);
            break;
          }
          case 72: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 72);
            int i = this.bucketCounters == null ? 0 : this.bucketCounters.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.bucketCounters, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readInt32();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readInt32();
            this.bucketCounters = newArray;
            break;
          }
          case 74: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            // First pass to compute array length.
            int arrayLength = 0;
            int startPos = input.getPosition();
            while (input.getBytesUntilLimit() > 0) {
              input.readInt32();
              arrayLength++;
            }
            input.rewindToPosition(startPos);
            int i = this.bucketCounters == null ? 0 : this.bucketCounters.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.bucketCounters, 0, newArray, 0, i);
            }
            for (; i < newArray.length; i++) {
              newArray[i] = input.readInt32();
            }
            this.bucketCounters = newArray;
            input.popLimit(limit);
            break;
          }
        }
      }
    }

    public static TelephonyHistogram parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonyHistogram(), data);
    }

    public static TelephonyHistogram parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new TelephonyHistogram().mergeFrom(input);
    }
  }

  public static final class TelephonySettings extends
      com.google.protobuf.nano.ExtendableMessageNano<TelephonySettings> {

    // enum RilNetworkMode
    public interface RilNetworkMode {
      public static final int NETWORK_MODE_UNKNOWN = 0;
      public static final int NETWORK_MODE_WCDMA_PREF = 1;
      public static final int NETWORK_MODE_GSM_ONLY = 2;
      public static final int NETWORK_MODE_WCDMA_ONLY = 3;
      public static final int NETWORK_MODE_GSM_UMTS = 4;
      public static final int NETWORK_MODE_CDMA = 5;
      public static final int NETWORK_MODE_CDMA_NO_EVDO = 6;
      public static final int NETWORK_MODE_EVDO_NO_CDMA = 7;
      public static final int NETWORK_MODE_GLOBAL = 8;
      public static final int NETWORK_MODE_LTE_CDMA_EVDO = 9;
      public static final int NETWORK_MODE_LTE_GSM_WCDMA = 10;
      public static final int NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA = 11;
      public static final int NETWORK_MODE_LTE_ONLY = 12;
      public static final int NETWORK_MODE_LTE_WCDMA = 13;
      public static final int NETWORK_MODE_TDSCDMA_ONLY = 14;
      public static final int NETWORK_MODE_TDSCDMA_WCDMA = 15;
      public static final int NETWORK_MODE_LTE_TDSCDMA = 16;
      public static final int NETWORK_MODE_TDSCDMA_GSM = 17;
      public static final int NETWORK_MODE_LTE_TDSCDMA_GSM = 18;
      public static final int NETWORK_MODE_TDSCDMA_GSM_WCDMA = 19;
      public static final int NETWORK_MODE_LTE_TDSCDMA_WCDMA = 20;
      public static final int NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA = 21;
      public static final int NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA = 22;
      public static final int NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA = 23;
    }

    // enum WiFiCallingMode
    public interface WiFiCallingMode {
      public static final int WFC_MODE_UNKNOWN = 0;
      public static final int WFC_MODE_WIFI_ONLY = 1;
      public static final int WFC_MODE_CELLULAR_PREFERRED = 2;
      public static final int WFC_MODE_WIFI_PREFERRED = 3;
    }

    private static volatile TelephonySettings[] _emptyArray;
    public static TelephonySettings[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new TelephonySettings[0];
          }
        }
      }
      return _emptyArray;
    }

    private int bitField0_;

    // optional bool is_airplane_mode = 1;
    private boolean isAirplaneMode_;
    public boolean getIsAirplaneMode() {
      return isAirplaneMode_;
    }
    public TelephonySettings setIsAirplaneMode(boolean value) {
      isAirplaneMode_ = value;
      bitField0_ |= 0x00000001;
      return this;
    }
    public boolean hasIsAirplaneMode() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    public TelephonySettings clearIsAirplaneMode() {
      isAirplaneMode_ = false;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    // optional bool is_cellular_data_enabled = 2;
    private boolean isCellularDataEnabled_;
    public boolean getIsCellularDataEnabled() {
      return isCellularDataEnabled_;
    }
    public TelephonySettings setIsCellularDataEnabled(boolean value) {
      isCellularDataEnabled_ = value;
      bitField0_ |= 0x00000002;
      return this;
    }
    public boolean hasIsCellularDataEnabled() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    public TelephonySettings clearIsCellularDataEnabled() {
      isCellularDataEnabled_ = false;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    // optional bool is_data_roaming_enabled = 3;
    private boolean isDataRoamingEnabled_;
    public boolean getIsDataRoamingEnabled() {
      return isDataRoamingEnabled_;
    }
    public TelephonySettings setIsDataRoamingEnabled(boolean value) {
      isDataRoamingEnabled_ = value;
      bitField0_ |= 0x00000004;
      return this;
    }
    public boolean hasIsDataRoamingEnabled() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    public TelephonySettings clearIsDataRoamingEnabled() {
      isDataRoamingEnabled_ = false;
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    // optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;
    private int preferredNetworkMode_;
    public int getPreferredNetworkMode() {
      return preferredNetworkMode_;
    }
    public TelephonySettings setPreferredNetworkMode(int value) {
      preferredNetworkMode_ = value;
      bitField0_ |= 0x00000008;
      return this;
    }
    public boolean hasPreferredNetworkMode() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    public TelephonySettings clearPreferredNetworkMode() {
      preferredNetworkMode_ = com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_UNKNOWN;
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    // optional bool is_enhanced_4g_lte_mode_enabled = 5;
    private boolean isEnhanced4GLteModeEnabled_;
    public boolean getIsEnhanced4GLteModeEnabled() {
      return isEnhanced4GLteModeEnabled_;
    }
    public TelephonySettings setIsEnhanced4GLteModeEnabled(boolean value) {
      isEnhanced4GLteModeEnabled_ = value;
      bitField0_ |= 0x00000010;
      return this;
    }
    public boolean hasIsEnhanced4GLteModeEnabled() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    public TelephonySettings clearIsEnhanced4GLteModeEnabled() {
      isEnhanced4GLteModeEnabled_ = false;
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    // optional bool is_wifi_enabled = 6;
    private boolean isWifiEnabled_;
    public boolean getIsWifiEnabled() {
      return isWifiEnabled_;
    }
    public TelephonySettings setIsWifiEnabled(boolean value) {
      isWifiEnabled_ = value;
      bitField0_ |= 0x00000020;
      return this;
    }
    public boolean hasIsWifiEnabled() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    public TelephonySettings clearIsWifiEnabled() {
      isWifiEnabled_ = false;
      bitField0_ = (bitField0_ & ~0x00000020);
      return this;
    }

    // optional bool is_wifi_calling_enabled = 7;
    private boolean isWifiCallingEnabled_;
    public boolean getIsWifiCallingEnabled() {
      return isWifiCallingEnabled_;
    }
    public TelephonySettings setIsWifiCallingEnabled(boolean value) {
      isWifiCallingEnabled_ = value;
      bitField0_ |= 0x00000040;
      return this;
    }
    public boolean hasIsWifiCallingEnabled() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    public TelephonySettings clearIsWifiCallingEnabled() {
      isWifiCallingEnabled_ = false;
      bitField0_ = (bitField0_ & ~0x00000040);
      return this;
    }

    // optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;
    private int wifiCallingMode_;
    public int getWifiCallingMode() {
      return wifiCallingMode_;
    }
    public TelephonySettings setWifiCallingMode(int value) {
      wifiCallingMode_ = value;
      bitField0_ |= 0x00000080;
      return this;
    }
    public boolean hasWifiCallingMode() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    public TelephonySettings clearWifiCallingMode() {
      wifiCallingMode_ = com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_UNKNOWN;
      bitField0_ = (bitField0_ & ~0x00000080);
      return this;
    }

    // optional bool is_vt_over_lte_enabled = 9;
    private boolean isVtOverLteEnabled_;
    public boolean getIsVtOverLteEnabled() {
      return isVtOverLteEnabled_;
    }
    public TelephonySettings setIsVtOverLteEnabled(boolean value) {
      isVtOverLteEnabled_ = value;
      bitField0_ |= 0x00000100;
      return this;
    }
    public boolean hasIsVtOverLteEnabled() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    public TelephonySettings clearIsVtOverLteEnabled() {
      isVtOverLteEnabled_ = false;
      bitField0_ = (bitField0_ & ~0x00000100);
      return this;
    }

    // optional bool is_vt_over_wifi_enabled = 10;
    private boolean isVtOverWifiEnabled_;
    public boolean getIsVtOverWifiEnabled() {
      return isVtOverWifiEnabled_;
    }
    public TelephonySettings setIsVtOverWifiEnabled(boolean value) {
      isVtOverWifiEnabled_ = value;
      bitField0_ |= 0x00000200;
      return this;
    }
    public boolean hasIsVtOverWifiEnabled() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    public TelephonySettings clearIsVtOverWifiEnabled() {
      isVtOverWifiEnabled_ = false;
      bitField0_ = (bitField0_ & ~0x00000200);
      return this;
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonySettings)

    public TelephonySettings() {
      clear();
    }

    public TelephonySettings clear() {
      bitField0_ = 0;
      isAirplaneMode_ = false;
      isCellularDataEnabled_ = false;
      isDataRoamingEnabled_ = false;
      preferredNetworkMode_ = com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_UNKNOWN;
      isEnhanced4GLteModeEnabled_ = false;
      isWifiEnabled_ = false;
      isWifiCallingEnabled_ = false;
      wifiCallingMode_ = com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_UNKNOWN;
      isVtOverLteEnabled_ = false;
      isVtOverWifiEnabled_ = false;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(1, isAirplaneMode_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(2, isCellularDataEnabled_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(3, isDataRoamingEnabled_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(4, preferredNetworkMode_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(5, isEnhanced4GLteModeEnabled_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeBool(6, isWifiEnabled_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeBool(7, isWifiCallingEnabled_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeInt32(8, wifiCallingMode_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeBool(9, isVtOverLteEnabled_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeBool(10, isVtOverWifiEnabled_);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(1, isAirplaneMode_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(2, isCellularDataEnabled_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(3, isDataRoamingEnabled_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(4, preferredNetworkMode_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(5, isEnhanced4GLteModeEnabled_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(6, isWifiEnabled_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(7, isWifiCallingEnabled_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(8, wifiCallingMode_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(9, isVtOverLteEnabled_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(10, isVtOverWifiEnabled_);
      }
      return size;
    }

    @Override
    public TelephonySettings mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            isAirplaneMode_ = input.readBool();
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            isCellularDataEnabled_ = input.readBool();
            bitField0_ |= 0x00000002;
            break;
          }
          case 24: {
            isDataRoamingEnabled_ = input.readBool();
            bitField0_ |= 0x00000004;
            break;
          }
          case 32: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_UNKNOWN:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_WCDMA_PREF:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_GSM_ONLY:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_WCDMA_ONLY:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_GSM_UMTS:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_CDMA:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_CDMA_NO_EVDO:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_EVDO_NO_CDMA:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_GLOBAL:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_CDMA_EVDO:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_GSM_WCDMA:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_ONLY:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_WCDMA:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_TDSCDMA_ONLY:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_TDSCDMA_WCDMA:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_TDSCDMA:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_TDSCDMA_GSM:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_TDSCDMA_GSM:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_TDSCDMA_GSM_WCDMA:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_TDSCDMA_WCDMA:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
                preferredNetworkMode_ = value;
                bitField0_ |= 0x00000008;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 40: {
            isEnhanced4GLteModeEnabled_ = input.readBool();
            bitField0_ |= 0x00000010;
            break;
          }
          case 48: {
            isWifiEnabled_ = input.readBool();
            bitField0_ |= 0x00000020;
            break;
          }
          case 56: {
            isWifiCallingEnabled_ = input.readBool();
            bitField0_ |= 0x00000040;
            break;
          }
          case 64: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_UNKNOWN:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_WIFI_ONLY:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_CELLULAR_PREFERRED:
              case com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_WIFI_PREFERRED:
                wifiCallingMode_ = value;
                bitField0_ |= 0x00000080;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 72: {
            isVtOverLteEnabled_ = input.readBool();
            bitField0_ |= 0x00000100;
            break;
          }
          case 80: {
            isVtOverWifiEnabled_ = input.readBool();
            bitField0_ |= 0x00000200;
            break;
          }
        }
      }
    }

    public static TelephonySettings parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonySettings(), data);
    }

    public static TelephonySettings parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new TelephonySettings().mergeFrom(input);
    }
  }

  public static final class TelephonyServiceState extends
      com.google.protobuf.nano.ExtendableMessageNano<TelephonyServiceState> {

    // enum RoamingType
    public interface RoamingType {
      public static final int ROAMING_TYPE_NOT_ROAMING = 0;
      public static final int ROAMING_TYPE_UNKNOWN = 1;
      public static final int ROAMING_TYPE_DOMESTIC = 2;
      public static final int ROAMING_TYPE_INTERNATIONAL = 3;
    }

    public static final class TelephonyOperator extends
        com.google.protobuf.nano.ExtendableMessageNano<TelephonyOperator> {

      private static volatile TelephonyOperator[] _emptyArray;
      public static TelephonyOperator[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new TelephonyOperator[0];
            }
          }
        }
        return _emptyArray;
      }

      private int bitField0_;

      // optional string alpha_long = 1;
      private java.lang.String alphaLong_;
      public java.lang.String getAlphaLong() {
        return alphaLong_;
      }
      public TelephonyOperator setAlphaLong(java.lang.String value) {
        if (value == null) {
          throw new java.lang.NullPointerException();
        }
        alphaLong_ = value;
        bitField0_ |= 0x00000001;
        return this;
      }
      public boolean hasAlphaLong() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      public TelephonyOperator clearAlphaLong() {
        alphaLong_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // optional string alpha_short = 2;
      private java.lang.String alphaShort_;
      public java.lang.String getAlphaShort() {
        return alphaShort_;
      }
      public TelephonyOperator setAlphaShort(java.lang.String value) {
        if (value == null) {
          throw new java.lang.NullPointerException();
        }
        alphaShort_ = value;
        bitField0_ |= 0x00000002;
        return this;
      }
      public boolean hasAlphaShort() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      public TelephonyOperator clearAlphaShort() {
        alphaShort_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional string numeric = 3;
      private java.lang.String numeric_;
      public java.lang.String getNumeric() {
        return numeric_;
      }
      public TelephonyOperator setNumeric(java.lang.String value) {
        if (value == null) {
          throw new java.lang.NullPointerException();
        }
        numeric_ = value;
        bitField0_ |= 0x00000004;
        return this;
      }
      public boolean hasNumeric() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      public TelephonyOperator clearNumeric() {
        numeric_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)

      public TelephonyOperator() {
        clear();
      }

      public TelephonyOperator clear() {
        bitField0_ = 0;
        alphaLong_ = "";
        alphaShort_ = "";
        numeric_ = "";
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeString(1, alphaLong_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeString(2, alphaShort_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeString(3, numeric_);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(1, alphaLong_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(2, alphaShort_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(3, numeric_);
        }
        return size;
      }

      @Override
      public TelephonyOperator mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!super.storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              alphaLong_ = input.readString();
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              alphaShort_ = input.readString();
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              numeric_ = input.readString();
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      }

      public static TelephonyOperator parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonyOperator(), data);
      }

      public static TelephonyOperator parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new TelephonyOperator().mergeFrom(input);
      }
    }

    private static volatile TelephonyServiceState[] _emptyArray;
    public static TelephonyServiceState[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new TelephonyServiceState[0];
          }
        }
      }
      return _emptyArray;
    }

    private int bitField0_;

    // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;
    public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator voiceOperator;

    // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;
    public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator dataOperator;

    // optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3;
    private int voiceRoamingType_;
    public int getVoiceRoamingType() {
      return voiceRoamingType_;
    }
    public TelephonyServiceState setVoiceRoamingType(int value) {
      voiceRoamingType_ = value;
      bitField0_ |= 0x00000001;
      return this;
    }
    public boolean hasVoiceRoamingType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    public TelephonyServiceState clearVoiceRoamingType() {
      voiceRoamingType_ = com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_NOT_ROAMING;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    // optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4;
    private int dataRoamingType_;
    public int getDataRoamingType() {
      return dataRoamingType_;
    }
    public TelephonyServiceState setDataRoamingType(int value) {
      dataRoamingType_ = value;
      bitField0_ |= 0x00000002;
      return this;
    }
    public boolean hasDataRoamingType() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    public TelephonyServiceState clearDataRoamingType() {
      dataRoamingType_ = com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_NOT_ROAMING;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    // optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5;
    private int voiceRat_;
    public int getVoiceRat() {
      return voiceRat_;
    }
    public TelephonyServiceState setVoiceRat(int value) {
      voiceRat_ = value;
      bitField0_ |= 0x00000004;
      return this;
    }
    public boolean hasVoiceRat() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    public TelephonyServiceState clearVoiceRat() {
      voiceRat_ = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN;
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    // optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6;
    private int dataRat_;
    public int getDataRat() {
      return dataRat_;
    }
    public TelephonyServiceState setDataRat(int value) {
      dataRat_ = value;
      bitField0_ |= 0x00000008;
      return this;
    }
    public boolean hasDataRat() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    public TelephonyServiceState clearDataRat() {
      dataRat_ = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN;
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyServiceState)

    public TelephonyServiceState() {
      clear();
    }

    public TelephonyServiceState clear() {
      bitField0_ = 0;
      voiceOperator = null;
      dataOperator = null;
      voiceRoamingType_ = com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_NOT_ROAMING;
      dataRoamingType_ = com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_NOT_ROAMING;
      voiceRat_ = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN;
      dataRat_ = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.voiceOperator != null) {
        output.writeMessage(1, this.voiceOperator);
      }
      if (this.dataOperator != null) {
        output.writeMessage(2, this.dataOperator);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(3, voiceRoamingType_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(4, dataRoamingType_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(5, voiceRat_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(6, dataRat_);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.voiceOperator != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(1, this.voiceOperator);
      }
      if (this.dataOperator != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(2, this.dataOperator);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(3, voiceRoamingType_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(4, dataRoamingType_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(5, voiceRat_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(6, dataRat_);
      }
      return size;
    }

    @Override
    public TelephonyServiceState mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            if (this.voiceOperator == null) {
              this.voiceOperator = new com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator();
            }
            input.readMessage(this.voiceOperator);
            break;
          }
          case 18: {
            if (this.dataOperator == null) {
              this.dataOperator = new com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator();
            }
            input.readMessage(this.dataOperator);
            break;
          }
          case 24: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_NOT_ROAMING:
              case com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_UNKNOWN:
              case com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_DOMESTIC:
              case com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_INTERNATIONAL:
                voiceRoamingType_ = value;
                bitField0_ |= 0x00000001;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 32: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_NOT_ROAMING:
              case com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_UNKNOWN:
              case com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_DOMESTIC:
              case com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_INTERNATIONAL:
                dataRoamingType_ = value;
                bitField0_ |= 0x00000002;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 40: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_GPRS:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EDGE:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UMTS:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IS95A:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IS95B:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_1XRTT:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_0:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_A:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSDPA:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSUPA:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSPA:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_B:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EHRPD:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_LTE:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSPAP:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_GSM:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_TD_SCDMA:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IWLAN:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_LTE_CA:
                voiceRat_ = value;
                bitField0_ |= 0x00000004;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 48: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_GPRS:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EDGE:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UMTS:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IS95A:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IS95B:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_1XRTT:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_0:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_A:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSDPA:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSUPA:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSPA:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_B:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EHRPD:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_LTE:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSPAP:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_GSM:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_TD_SCDMA:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IWLAN:
              case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_LTE_CA:
                dataRat_ = value;
                bitField0_ |= 0x00000008;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
        }
      }
    }

    public static TelephonyServiceState parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonyServiceState(), data);
    }

    public static TelephonyServiceState parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new TelephonyServiceState().mergeFrom(input);
    }
  }

  public static final class ImsReasonInfo extends
      com.google.protobuf.nano.ExtendableMessageNano<ImsReasonInfo> {

    private static volatile ImsReasonInfo[] _emptyArray;
    public static ImsReasonInfo[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ImsReasonInfo[0];
          }
        }
      }
      return _emptyArray;
    }

    private int bitField0_;

    // optional int32 reason_code = 1;
    private int reasonCode_;
    public int getReasonCode() {
      return reasonCode_;
    }
    public ImsReasonInfo setReasonCode(int value) {
      reasonCode_ = value;
      bitField0_ |= 0x00000001;
      return this;
    }
    public boolean hasReasonCode() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    public ImsReasonInfo clearReasonCode() {
      reasonCode_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    // optional int32 extra_code = 2;
    private int extraCode_;
    public int getExtraCode() {
      return extraCode_;
    }
    public ImsReasonInfo setExtraCode(int value) {
      extraCode_ = value;
      bitField0_ |= 0x00000002;
      return this;
    }
    public boolean hasExtraCode() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    public ImsReasonInfo clearExtraCode() {
      extraCode_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    // optional string extra_message = 3;
    private java.lang.String extraMessage_;
    public java.lang.String getExtraMessage() {
      return extraMessage_;
    }
    public ImsReasonInfo setExtraMessage(java.lang.String value) {
      if (value == null) {
        throw new java.lang.NullPointerException();
      }
      extraMessage_ = value;
      bitField0_ |= 0x00000004;
      return this;
    }
    public boolean hasExtraMessage() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    public ImsReasonInfo clearExtraMessage() {
      extraMessage_ = "";
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.ImsReasonInfo)

    public ImsReasonInfo() {
      clear();
    }

    public ImsReasonInfo clear() {
      bitField0_ = 0;
      reasonCode_ = 0;
      extraCode_ = 0;
      extraMessage_ = "";
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, reasonCode_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, extraCode_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeString(3, extraMessage_);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, reasonCode_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, extraCode_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(3, extraMessage_);
      }
      return size;
    }

    @Override
    public ImsReasonInfo mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            reasonCode_ = input.readInt32();
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            extraCode_ = input.readInt32();
            bitField0_ |= 0x00000002;
            break;
          }
          case 26: {
            extraMessage_ = input.readString();
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    }

    public static ImsReasonInfo parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ImsReasonInfo(), data);
    }

    public static ImsReasonInfo parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ImsReasonInfo().mergeFrom(input);
    }
  }

  public static final class ImsConnectionState extends
      com.google.protobuf.nano.ExtendableMessageNano<ImsConnectionState> {

    // enum State
    public interface State {
      public static final int STATE_UNKNOWN = 0;
      public static final int CONNECTED = 1;
      public static final int PROGRESSING = 2;
      public static final int DISCONNECTED = 3;
      public static final int RESUMED = 4;
      public static final int SUSPENDED = 5;
    }

    private static volatile ImsConnectionState[] _emptyArray;
    public static ImsConnectionState[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ImsConnectionState[0];
          }
        }
      }
      return _emptyArray;
    }

    private int bitField0_;

    // optional .clearcut.connectivity.ImsConnectionState.State state = 1;
    private int state_;
    public int getState() {
      return state_;
    }
    public ImsConnectionState setState(int value) {
      state_ = value;
      bitField0_ |= 0x00000001;
      return this;
    }
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    public ImsConnectionState clearState() {
      state_ = com.android.internal.telephony.TelephonyProto.ImsConnectionState.State.STATE_UNKNOWN;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    // optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;
    public com.android.internal.telephony.TelephonyProto.ImsReasonInfo reasonInfo;

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.ImsConnectionState)

    public ImsConnectionState() {
      clear();
    }

    public ImsConnectionState clear() {
      bitField0_ = 0;
      state_ = com.android.internal.telephony.TelephonyProto.ImsConnectionState.State.STATE_UNKNOWN;
      reasonInfo = null;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, state_);
      }
      if (this.reasonInfo != null) {
        output.writeMessage(2, this.reasonInfo);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(1, state_);
      }
      if (this.reasonInfo != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(2, this.reasonInfo);
      }
      return size;
    }

    @Override
    public ImsConnectionState mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.TelephonyProto.ImsConnectionState.State.STATE_UNKNOWN:
              case com.android.internal.telephony.TelephonyProto.ImsConnectionState.State.CONNECTED:
              case com.android.internal.telephony.TelephonyProto.ImsConnectionState.State.PROGRESSING:
              case com.android.internal.telephony.TelephonyProto.ImsConnectionState.State.DISCONNECTED:
              case com.android.internal.telephony.TelephonyProto.ImsConnectionState.State.RESUMED:
              case com.android.internal.telephony.TelephonyProto.ImsConnectionState.State.SUSPENDED:
                state_ = value;
                bitField0_ |= 0x00000001;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 18: {
            if (this.reasonInfo == null) {
              this.reasonInfo = new com.android.internal.telephony.TelephonyProto.ImsReasonInfo();
            }
            input.readMessage(this.reasonInfo);
            break;
          }
        }
      }
    }

    public static ImsConnectionState parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ImsConnectionState(), data);
    }

    public static ImsConnectionState parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ImsConnectionState().mergeFrom(input);
    }
  }

  public static final class ImsCapabilities extends
      com.google.protobuf.nano.ExtendableMessageNano<ImsCapabilities> {

    private static volatile ImsCapabilities[] _emptyArray;
    public static ImsCapabilities[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ImsCapabilities[0];
          }
        }
      }
      return _emptyArray;
    }

    private int bitField0_;

    // optional bool voice_over_lte = 1;
    private boolean voiceOverLte_;
    public boolean getVoiceOverLte() {
      return voiceOverLte_;
    }
    public ImsCapabilities setVoiceOverLte(boolean value) {
      voiceOverLte_ = value;
      bitField0_ |= 0x00000001;
      return this;
    }
    public boolean hasVoiceOverLte() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    public ImsCapabilities clearVoiceOverLte() {
      voiceOverLte_ = false;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    // optional bool voice_over_wifi = 2;
    private boolean voiceOverWifi_;
    public boolean getVoiceOverWifi() {
      return voiceOverWifi_;
    }
    public ImsCapabilities setVoiceOverWifi(boolean value) {
      voiceOverWifi_ = value;
      bitField0_ |= 0x00000002;
      return this;
    }
    public boolean hasVoiceOverWifi() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    public ImsCapabilities clearVoiceOverWifi() {
      voiceOverWifi_ = false;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    // optional bool video_over_lte = 3;
    private boolean videoOverLte_;
    public boolean getVideoOverLte() {
      return videoOverLte_;
    }
    public ImsCapabilities setVideoOverLte(boolean value) {
      videoOverLte_ = value;
      bitField0_ |= 0x00000004;
      return this;
    }
    public boolean hasVideoOverLte() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    public ImsCapabilities clearVideoOverLte() {
      videoOverLte_ = false;
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    // optional bool video_over_wifi = 4;
    private boolean videoOverWifi_;
    public boolean getVideoOverWifi() {
      return videoOverWifi_;
    }
    public ImsCapabilities setVideoOverWifi(boolean value) {
      videoOverWifi_ = value;
      bitField0_ |= 0x00000008;
      return this;
    }
    public boolean hasVideoOverWifi() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    public ImsCapabilities clearVideoOverWifi() {
      videoOverWifi_ = false;
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    // optional bool ut_over_lte = 5;
    private boolean utOverLte_;
    public boolean getUtOverLte() {
      return utOverLte_;
    }
    public ImsCapabilities setUtOverLte(boolean value) {
      utOverLte_ = value;
      bitField0_ |= 0x00000010;
      return this;
    }
    public boolean hasUtOverLte() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    public ImsCapabilities clearUtOverLte() {
      utOverLte_ = false;
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    // optional bool ut_over_wifi = 6;
    private boolean utOverWifi_;
    public boolean getUtOverWifi() {
      return utOverWifi_;
    }
    public ImsCapabilities setUtOverWifi(boolean value) {
      utOverWifi_ = value;
      bitField0_ |= 0x00000020;
      return this;
    }
    public boolean hasUtOverWifi() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    public ImsCapabilities clearUtOverWifi() {
      utOverWifi_ = false;
      bitField0_ = (bitField0_ & ~0x00000020);
      return this;
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.ImsCapabilities)

    public ImsCapabilities() {
      clear();
    }

    public ImsCapabilities clear() {
      bitField0_ = 0;
      voiceOverLte_ = false;
      voiceOverWifi_ = false;
      videoOverLte_ = false;
      videoOverWifi_ = false;
      utOverLte_ = false;
      utOverWifi_ = false;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(1, voiceOverLte_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(2, voiceOverWifi_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(3, videoOverLte_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBool(4, videoOverWifi_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(5, utOverLte_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeBool(6, utOverWifi_);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(1, voiceOverLte_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(2, voiceOverWifi_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(3, videoOverLte_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(4, videoOverWifi_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(5, utOverLte_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(6, utOverWifi_);
      }
      return size;
    }

    @Override
    public ImsCapabilities mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            voiceOverLte_ = input.readBool();
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            voiceOverWifi_ = input.readBool();
            bitField0_ |= 0x00000002;
            break;
          }
          case 24: {
            videoOverLte_ = input.readBool();
            bitField0_ |= 0x00000004;
            break;
          }
          case 32: {
            videoOverWifi_ = input.readBool();
            bitField0_ |= 0x00000008;
            break;
          }
          case 40: {
            utOverLte_ = input.readBool();
            bitField0_ |= 0x00000010;
            break;
          }
          case 48: {
            utOverWifi_ = input.readBool();
            bitField0_ |= 0x00000020;
            break;
          }
        }
      }
    }

    public static ImsCapabilities parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ImsCapabilities(), data);
    }

    public static ImsCapabilities parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ImsCapabilities().mergeFrom(input);
    }
  }

  public static final class RilDataCall extends
      com.google.protobuf.nano.ExtendableMessageNano<RilDataCall> {

    private static volatile RilDataCall[] _emptyArray;
    public static RilDataCall[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new RilDataCall[0];
          }
        }
      }
      return _emptyArray;
    }

    private int bitField0_;

    // optional int32 cid = 1;
    private int cid_;
    public int getCid() {
      return cid_;
    }
    public RilDataCall setCid(int value) {
      cid_ = value;
      bitField0_ |= 0x00000001;
      return this;
    }
    public boolean hasCid() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    public RilDataCall clearCid() {
      cid_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    // optional .clearcut.connectivity.PdpType type = 2;
    private int type_;
    public int getType() {
      return type_;
    }
    public RilDataCall setType(int value) {
      type_ = value;
      bitField0_ |= 0x00000002;
      return this;
    }
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    public RilDataCall clearType() {
      type_ = com.android.internal.telephony.TelephonyProto.PdpType.PDP_UNKNOWN;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    // optional string iframe = 3;
    private java.lang.String iframe_;
    public java.lang.String getIframe() {
      return iframe_;
    }
    public RilDataCall setIframe(java.lang.String value) {
      if (value == null) {
        throw new java.lang.NullPointerException();
      }
      iframe_ = value;
      bitField0_ |= 0x00000004;
      return this;
    }
    public boolean hasIframe() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    public RilDataCall clearIframe() {
      iframe_ = "";
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.RilDataCall)

    public RilDataCall() {
      clear();
    }

    public RilDataCall clear() {
      bitField0_ = 0;
      cid_ = 0;
      type_ = com.android.internal.telephony.TelephonyProto.PdpType.PDP_UNKNOWN;
      iframe_ = "";
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, cid_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, type_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeString(3, iframe_);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, cid_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(2, type_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(3, iframe_);
      }
      return size;
    }

    @Override
    public RilDataCall mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            cid_ = input.readInt32();
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.TelephonyProto.PdpType.PDP_UNKNOWN:
              case com.android.internal.telephony.TelephonyProto.PdpType.PDP_TYPE_IP:
              case com.android.internal.telephony.TelephonyProto.PdpType.PDP_TYPE_IPV6:
              case com.android.internal.telephony.TelephonyProto.PdpType.PDP_TYPE_IPV4V6:
              case com.android.internal.telephony.TelephonyProto.PdpType.PDP_TYPE_PPP:
                type_ = value;
                bitField0_ |= 0x00000002;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 26: {
            iframe_ = input.readString();
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    }

    public static RilDataCall parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new RilDataCall(), data);
    }

    public static RilDataCall parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new RilDataCall().mergeFrom(input);
    }
  }

  public static final class TelephonyEvent extends
      com.google.protobuf.nano.ExtendableMessageNano<TelephonyEvent> {

    // enum Type
    public interface Type {
      public static final int UNKNOWN = 0;
      public static final int SETTINGS_CHANGED = 1;
      public static final int RIL_SERVICE_STATE_CHANGED = 2;
      public static final int IMS_CONNECTION_STATE_CHANGED = 3;
      public static final int IMS_CAPABILITIES_CHANGED = 4;
      public static final int DATA_CALL_SETUP = 5;
      public static final int DATA_CALL_SETUP_RESPONSE = 6;
      public static final int DATA_CALL_LIST_CHANGED = 7;
      public static final int DATA_CALL_DEACTIVATE = 8;
      public static final int DATA_CALL_DEACTIVATE_RESPONSE = 9;
      public static final int DATA_STALL_ACTION = 10;
      public static final int MODEM_RESTART = 11;
      public static final int NITZ_TIME = 12;
    }

    public static final class RilSetupDataCall extends
        com.google.protobuf.nano.ExtendableMessageNano<RilSetupDataCall> {

      // enum RilDataProfile
      public interface RilDataProfile {
        public static final int RIL_DATA_UNKNOWN = 0;
        public static final int RIL_DATA_PROFILE_DEFAULT = 1;
        public static final int RIL_DATA_PROFILE_TETHERED = 2;
        public static final int RIL_DATA_PROFILE_IMS = 3;
        public static final int RIL_DATA_PROFILE_FOTA = 4;
        public static final int RIL_DATA_PROFILE_CBS = 5;
        public static final int RIL_DATA_PROFILE_OEM_BASE = 6;
        public static final int RIL_DATA_PROFILE_INVALID = 7;
      }

      private static volatile RilSetupDataCall[] _emptyArray;
      public static RilSetupDataCall[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new RilSetupDataCall[0];
            }
          }
        }
        return _emptyArray;
      }

      private int bitField0_;

      // optional .clearcut.connectivity.RadioAccessTechnology rat = 1;
      private int rat_;
      public int getRat() {
        return rat_;
      }
      public RilSetupDataCall setRat(int value) {
        rat_ = value;
        bitField0_ |= 0x00000001;
        return this;
      }
      public boolean hasRat() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      public RilSetupDataCall clearRat() {
        rat_ = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;
      private int dataProfile_;
      public int getDataProfile() {
        return dataProfile_;
      }
      public RilSetupDataCall setDataProfile(int value) {
        dataProfile_ = value;
        bitField0_ |= 0x00000002;
        return this;
      }
      public boolean hasDataProfile() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      public RilSetupDataCall clearDataProfile() {
        dataProfile_ = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional string apn = 3;
      private java.lang.String apn_;
      public java.lang.String getApn() {
        return apn_;
      }
      public RilSetupDataCall setApn(java.lang.String value) {
        if (value == null) {
          throw new java.lang.NullPointerException();
        }
        apn_ = value;
        bitField0_ |= 0x00000004;
        return this;
      }
      public boolean hasApn() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      public RilSetupDataCall clearApn() {
        apn_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // optional .clearcut.connectivity.PdpType type = 4;
      private int type_;
      public int getType() {
        return type_;
      }
      public RilSetupDataCall setType(int value) {
        type_ = value;
        bitField0_ |= 0x00000008;
        return this;
      }
      public boolean hasType() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      public RilSetupDataCall clearType() {
        type_ = com.android.internal.telephony.TelephonyProto.PdpType.PDP_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)

      public RilSetupDataCall() {
        clear();
      }

      public RilSetupDataCall clear() {
        bitField0_ = 0;
        rat_ = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN;
        dataProfile_ = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_UNKNOWN;
        apn_ = "";
        type_ = com.android.internal.telephony.TelephonyProto.PdpType.PDP_UNKNOWN;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeInt32(1, rat_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(2, dataProfile_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeString(3, apn_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeInt32(4, type_);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, rat_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, dataProfile_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(3, apn_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(4, type_);
        }
        return size;
      }

      @Override
      public RilSetupDataCall mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!super.storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_GPRS:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EDGE:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UMTS:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IS95A:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IS95B:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_1XRTT:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_0:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_A:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSDPA:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSUPA:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSPA:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_B:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EHRPD:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_LTE:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSPAP:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_GSM:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_TD_SCDMA:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IWLAN:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_LTE_CA:
                  rat_ = value;
                  bitField0_ |= 0x00000001;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 16: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_DEFAULT:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_TETHERED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_IMS:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_FOTA:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_CBS:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_OEM_BASE:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_INVALID:
                  dataProfile_ = value;
                  bitField0_ |= 0x00000002;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 26: {
              apn_ = input.readString();
              bitField0_ |= 0x00000004;
              break;
            }
            case 32: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.PdpType.PDP_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.PdpType.PDP_TYPE_IP:
                case com.android.internal.telephony.TelephonyProto.PdpType.PDP_TYPE_IPV6:
                case com.android.internal.telephony.TelephonyProto.PdpType.PDP_TYPE_IPV4V6:
                case com.android.internal.telephony.TelephonyProto.PdpType.PDP_TYPE_PPP:
                  type_ = value;
                  bitField0_ |= 0x00000008;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
          }
        }
      }

      public static RilSetupDataCall parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new RilSetupDataCall(), data);
      }

      public static RilSetupDataCall parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new RilSetupDataCall().mergeFrom(input);
      }
    }

    public static final class RilSetupDataCallResponse extends
        com.google.protobuf.nano.ExtendableMessageNano<RilSetupDataCallResponse> {

      // enum RilDataCallFailCause
      public interface RilDataCallFailCause {
        public static final int PDP_FAIL_UNKNOWN = 0;
        public static final int PDP_FAIL_NONE = 1;
        public static final int PDP_FAIL_OPERATOR_BARRED = 8;
        public static final int PDP_FAIL_NAS_SIGNALLING = 14;
        public static final int PDP_FAIL_LLC_SNDCP = 25;
        public static final int PDP_FAIL_INSUFFICIENT_RESOURCES = 26;
        public static final int PDP_FAIL_MISSING_UKNOWN_APN = 27;
        public static final int PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE = 28;
        public static final int PDP_FAIL_USER_AUTHENTICATION = 29;
        public static final int PDP_FAIL_ACTIVATION_REJECT_GGSN = 30;
        public static final int PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED = 31;
        public static final int PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED = 32;
        public static final int PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED = 33;
        public static final int PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER = 34;
        public static final int PDP_FAIL_NSAPI_IN_USE = 35;
        public static final int PDP_FAIL_REGULAR_DEACTIVATION = 36;
        public static final int PDP_FAIL_QOS_NOT_ACCEPTED = 37;
        public static final int PDP_FAIL_NETWORK_FAILURE = 38;
        public static final int PDP_FAIL_UMTS_REACTIVATION_REQ = 39;
        public static final int PDP_FAIL_FEATURE_NOT_SUPP = 40;
        public static final int PDP_FAIL_TFT_SEMANTIC_ERROR = 41;
        public static final int PDP_FAIL_TFT_SYTAX_ERROR = 42;
        public static final int PDP_FAIL_UNKNOWN_PDP_CONTEXT = 43;
        public static final int PDP_FAIL_FILTER_SEMANTIC_ERROR = 44;
        public static final int PDP_FAIL_FILTER_SYTAX_ERROR = 45;
        public static final int PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT = 46;
        public static final int PDP_FAIL_ONLY_IPV4_ALLOWED = 50;
        public static final int PDP_FAIL_ONLY_IPV6_ALLOWED = 51;
        public static final int PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED = 52;
        public static final int PDP_FAIL_ESM_INFO_NOT_RECEIVED = 53;
        public static final int PDP_FAIL_PDN_CONN_DOES_NOT_EXIST = 54;
        public static final int PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED = 55;
        public static final int PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED = 65;
        public static final int PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN = 66;
        public static final int PDP_FAIL_INVALID_TRANSACTION_ID = 81;
        public static final int PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC = 95;
        public static final int PDP_FAIL_INVALID_MANDATORY_INFO = 96;
        public static final int PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED = 97;
        public static final int PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE = 98;
        public static final int PDP_FAIL_UNKNOWN_INFO_ELEMENT = 99;
        public static final int PDP_FAIL_CONDITIONAL_IE_ERROR = 100;
        public static final int PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE = 101;
        public static final int PDP_FAIL_PROTOCOL_ERRORS = 111;
        public static final int PDP_FAIL_APN_TYPE_CONFLICT = 112;
        public static final int PDP_FAIL_INVALID_PCSCF_ADDR = 113;
        public static final int PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN = 114;
        public static final int PDP_FAIL_EMM_ACCESS_BARRED = 115;
        public static final int PDP_FAIL_EMERGENCY_IFACE_ONLY = 116;
        public static final int PDP_FAIL_IFACE_MISMATCH = 117;
        public static final int PDP_FAIL_COMPANION_IFACE_IN_USE = 118;
        public static final int PDP_FAIL_IP_ADDRESS_MISMATCH = 119;
        public static final int PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH = 120;
        public static final int PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY = 121;
        public static final int PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL = 122;
        public static final int PDP_FAIL_VOICE_REGISTRATION_FAIL = -1;
        public static final int PDP_FAIL_DATA_REGISTRATION_FAIL = -2;
        public static final int PDP_FAIL_SIGNAL_LOST = -3;
        public static final int PDP_FAIL_PREF_RADIO_TECH_CHANGED = -4;
        public static final int PDP_FAIL_RADIO_POWER_OFF = -5;
        public static final int PDP_FAIL_TETHERED_CALL_ACTIVE = -6;
        public static final int PDP_FAIL_ERROR_UNSPECIFIED = 65535;
      }

      private static volatile RilSetupDataCallResponse[] _emptyArray;
      public static RilSetupDataCallResponse[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new RilSetupDataCallResponse[0];
            }
          }
        }
        return _emptyArray;
      }

      private int bitField0_;

      // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;
      private int status_;
      public int getStatus() {
        return status_;
      }
      public RilSetupDataCallResponse setStatus(int value) {
        status_ = value;
        bitField0_ |= 0x00000001;
        return this;
      }
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      public RilSetupDataCallResponse clearStatus() {
        status_ = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // optional int32 suggested_retry_time_millis = 2;
      private int suggestedRetryTimeMillis_;
      public int getSuggestedRetryTimeMillis() {
        return suggestedRetryTimeMillis_;
      }
      public RilSetupDataCallResponse setSuggestedRetryTimeMillis(int value) {
        suggestedRetryTimeMillis_ = value;
        bitField0_ |= 0x00000002;
        return this;
      }
      public boolean hasSuggestedRetryTimeMillis() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      public RilSetupDataCallResponse clearSuggestedRetryTimeMillis() {
        suggestedRetryTimeMillis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional .clearcut.connectivity.RilDataCall call = 3;
      public com.android.internal.telephony.TelephonyProto.RilDataCall call;

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)

      public RilSetupDataCallResponse() {
        clear();
      }

      public RilSetupDataCallResponse clear() {
        bitField0_ = 0;
        status_ = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN;
        suggestedRetryTimeMillis_ = 0;
        call = null;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeInt32(1, status_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(2, suggestedRetryTimeMillis_);
        }
        if (this.call != null) {
          output.writeMessage(3, this.call);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, status_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(2, suggestedRetryTimeMillis_);
        }
        if (this.call != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(3, this.call);
        }
        return size;
      }

      @Override
      public RilSetupDataCallResponse mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!super.storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_NONE:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_OPERATOR_BARRED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_NAS_SIGNALLING:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_LLC_SNDCP:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_INSUFFICIENT_RESOURCES:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MISSING_UKNOWN_APN:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_USER_AUTHENTICATION:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ACTIVATION_REJECT_GGSN:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_NSAPI_IN_USE:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_REGULAR_DEACTIVATION:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_QOS_NOT_ACCEPTED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_NETWORK_FAILURE:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UMTS_REACTIVATION_REQ:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_FEATURE_NOT_SUPP:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_TFT_SEMANTIC_ERROR:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_TFT_SYTAX_ERROR:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN_PDP_CONTEXT:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_FILTER_SEMANTIC_ERROR:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_FILTER_SYTAX_ERROR:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ONLY_IPV4_ALLOWED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ONLY_IPV6_ALLOWED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ESM_INFO_NOT_RECEIVED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_PDN_CONN_DOES_NOT_EXIST:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_INVALID_TRANSACTION_ID:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_INVALID_MANDATORY_INFO:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN_INFO_ELEMENT:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_CONDITIONAL_IE_ERROR:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_PROTOCOL_ERRORS:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_APN_TYPE_CONFLICT:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_INVALID_PCSCF_ADDR:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_EMM_ACCESS_BARRED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_EMERGENCY_IFACE_ONLY:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_IFACE_MISMATCH:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_COMPANION_IFACE_IN_USE:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_IP_ADDRESS_MISMATCH:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_VOICE_REGISTRATION_FAIL:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_DATA_REGISTRATION_FAIL:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_SIGNAL_LOST:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_PREF_RADIO_TECH_CHANGED:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_RADIO_POWER_OFF:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_TETHERED_CALL_ACTIVE:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ERROR_UNSPECIFIED:
                  status_ = value;
                  bitField0_ |= 0x00000001;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 16: {
              suggestedRetryTimeMillis_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              if (this.call == null) {
                this.call = new com.android.internal.telephony.TelephonyProto.RilDataCall();
              }
              input.readMessage(this.call);
              break;
            }
          }
        }
      }

      public static RilSetupDataCallResponse parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new RilSetupDataCallResponse(), data);
      }

      public static RilSetupDataCallResponse parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new RilSetupDataCallResponse().mergeFrom(input);
      }
    }

    public static final class RilDeactivateDataCall extends
        com.google.protobuf.nano.ExtendableMessageNano<RilDeactivateDataCall> {

      // enum DeactivateReason
      public interface DeactivateReason {
        public static final int DEACTIVATE_REASON_UNKNOWN = 0;
        public static final int DEACTIVATE_REASON_NONE = 1;
        public static final int DEACTIVATE_REASON_RADIO_OFF = 2;
        public static final int DEACTIVATE_REASON_PDP_RESET = 3;
      }

      private static volatile RilDeactivateDataCall[] _emptyArray;
      public static RilDeactivateDataCall[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new RilDeactivateDataCall[0];
            }
          }
        }
        return _emptyArray;
      }

      private int bitField0_;

      // optional int32 cid = 1;
      private int cid_;
      public int getCid() {
        return cid_;
      }
      public RilDeactivateDataCall setCid(int value) {
        cid_ = value;
        bitField0_ |= 0x00000001;
        return this;
      }
      public boolean hasCid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      public RilDeactivateDataCall clearCid() {
        cid_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;
      private int reason_;
      public int getReason() {
        return reason_;
      }
      public RilDeactivateDataCall setReason(int value) {
        reason_ = value;
        bitField0_ |= 0x00000002;
        return this;
      }
      public boolean hasReason() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      public RilDeactivateDataCall clearReason() {
        reason_ = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)

      public RilDeactivateDataCall() {
        clear();
      }

      public RilDeactivateDataCall clear() {
        bitField0_ = 0;
        cid_ = 0;
        reason_ = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_UNKNOWN;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeInt32(1, cid_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(2, reason_);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(1, cid_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, reason_);
        }
        return size;
      }

      @Override
      public RilDeactivateDataCall mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!super.storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              cid_ = input.readInt32();
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_NONE:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_RADIO_OFF:
                case com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_PDP_RESET:
                  reason_ = value;
                  bitField0_ |= 0x00000002;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
          }
        }
      }

      public static RilDeactivateDataCall parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new RilDeactivateDataCall(), data);
      }

      public static RilDeactivateDataCall parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new RilDeactivateDataCall().mergeFrom(input);
      }
    }

    public static final class ModemRestart extends
        com.google.protobuf.nano.ExtendableMessageNano<ModemRestart> {

      private static volatile ModemRestart[] _emptyArray;
      public static ModemRestart[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new ModemRestart[0];
            }
          }
        }
        return _emptyArray;
      }

      private int bitField0_;

      // optional string baseband_version = 1;
      private java.lang.String basebandVersion_;
      public java.lang.String getBasebandVersion() {
        return basebandVersion_;
      }
      public ModemRestart setBasebandVersion(java.lang.String value) {
        if (value == null) {
          throw new java.lang.NullPointerException();
        }
        basebandVersion_ = value;
        bitField0_ |= 0x00000001;
        return this;
      }
      public boolean hasBasebandVersion() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      public ModemRestart clearBasebandVersion() {
        basebandVersion_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // optional string reason = 2;
      private java.lang.String reason_;
      public java.lang.String getReason() {
        return reason_;
      }
      public ModemRestart setReason(java.lang.String value) {
        if (value == null) {
          throw new java.lang.NullPointerException();
        }
        reason_ = value;
        bitField0_ |= 0x00000002;
        return this;
      }
      public boolean hasReason() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      public ModemRestart clearReason() {
        reason_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent.ModemRestart)

      public ModemRestart() {
        clear();
      }

      public ModemRestart clear() {
        bitField0_ = 0;
        basebandVersion_ = "";
        reason_ = "";
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeString(1, basebandVersion_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeString(2, reason_);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(1, basebandVersion_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(2, reason_);
        }
        return size;
      }

      @Override
      public ModemRestart mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!super.storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              basebandVersion_ = input.readString();
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              reason_ = input.readString();
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      }

      public static ModemRestart parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new ModemRestart(), data);
      }

      public static ModemRestart parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new ModemRestart().mergeFrom(input);
      }
    }

    private static volatile TelephonyEvent[] _emptyArray;
    public static TelephonyEvent[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new TelephonyEvent[0];
          }
        }
      }
      return _emptyArray;
    }

    private int bitField0_;

    // optional int64 timestamp_millis = 1;
    private long timestampMillis_;
    public long getTimestampMillis() {
      return timestampMillis_;
    }
    public TelephonyEvent setTimestampMillis(long value) {
      timestampMillis_ = value;
      bitField0_ |= 0x00000001;
      return this;
    }
    public boolean hasTimestampMillis() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    public TelephonyEvent clearTimestampMillis() {
      timestampMillis_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    // optional int32 phone_id = 2;
    private int phoneId_;
    public int getPhoneId() {
      return phoneId_;
    }
    public TelephonyEvent setPhoneId(int value) {
      phoneId_ = value;
      bitField0_ |= 0x00000002;
      return this;
    }
    public boolean hasPhoneId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    public TelephonyEvent clearPhoneId() {
      phoneId_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    // optional .clearcut.connectivity.TelephonyEvent.Type type = 3;
    private int type_;
    public int getType() {
      return type_;
    }
    public TelephonyEvent setType(int value) {
      type_ = value;
      bitField0_ |= 0x00000004;
      return this;
    }
    public boolean hasType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    public TelephonyEvent clearType() {
      type_ = com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.UNKNOWN;
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    // optional .clearcut.connectivity.TelephonySettings settings = 4;
    public com.android.internal.telephony.TelephonyProto.TelephonySettings settings;

    // optional .clearcut.connectivity.TelephonyServiceState service_state = 5;
    public com.android.internal.telephony.TelephonyProto.TelephonyServiceState serviceState;

    // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;
    public com.android.internal.telephony.TelephonyProto.ImsConnectionState imsConnectionState;

    // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;
    public com.android.internal.telephony.TelephonyProto.ImsCapabilities imsCapabilities;

    // repeated .clearcut.connectivity.RilDataCall data_calls = 8;
    public com.android.internal.telephony.TelephonyProto.RilDataCall[] dataCalls;

    // optional .clearcut.connectivity.RilErrno error = 9;
    private int error_;
    public int getError() {
      return error_;
    }
    public TelephonyEvent setError(int value) {
      error_ = value;
      bitField0_ |= 0x00000008;
      return this;
    }
    public boolean hasError() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    public TelephonyEvent clearError() {
      error_ = com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN;
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall setupDataCall;

    // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse setupDataCallResponse;

    // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall deactivateDataCall;

    // optional int32 data_stall_action = 13;
    private int dataStallAction_;
    public int getDataStallAction() {
      return dataStallAction_;
    }
    public TelephonyEvent setDataStallAction(int value) {
      dataStallAction_ = value;
      bitField0_ |= 0x00000010;
      return this;
    }
    public boolean hasDataStallAction() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    public TelephonyEvent clearDataStallAction() {
      dataStallAction_ = 0;
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    // optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart modemRestart;

    // optional int64 nitz_timestamp_millis = 15;
    private long nitzTimestampMillis_;
    public long getNitzTimestampMillis() {
      return nitzTimestampMillis_;
    }
    public TelephonyEvent setNitzTimestampMillis(long value) {
      nitzTimestampMillis_ = value;
      bitField0_ |= 0x00000020;
      return this;
    }
    public boolean hasNitzTimestampMillis() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    public TelephonyEvent clearNitzTimestampMillis() {
      nitzTimestampMillis_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000020);
      return this;
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent)

    public TelephonyEvent() {
      clear();
    }

    public TelephonyEvent clear() {
      bitField0_ = 0;
      timestampMillis_ = 0L;
      phoneId_ = 0;
      type_ = com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.UNKNOWN;
      settings = null;
      serviceState = null;
      imsConnectionState = null;
      imsCapabilities = null;
      dataCalls = com.android.internal.telephony.TelephonyProto.RilDataCall.emptyArray();
      error_ = com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN;
      setupDataCall = null;
      setupDataCallResponse = null;
      deactivateDataCall = null;
      dataStallAction_ = 0;
      modemRestart = null;
      nitzTimestampMillis_ = 0L;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt64(1, timestampMillis_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, phoneId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(3, type_);
      }
      if (this.settings != null) {
        output.writeMessage(4, this.settings);
      }
      if (this.serviceState != null) {
        output.writeMessage(5, this.serviceState);
      }
      if (this.imsConnectionState != null) {
        output.writeMessage(6, this.imsConnectionState);
      }
      if (this.imsCapabilities != null) {
        output.writeMessage(7, this.imsCapabilities);
      }
      if (this.dataCalls != null && this.dataCalls.length > 0) {
        for (int i = 0; i < this.dataCalls.length; i++) {
          com.android.internal.telephony.TelephonyProto.RilDataCall element = this.dataCalls[i];
          if (element != null) {
            output.writeMessage(8, element);
          }
        }
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(9, error_);
      }
      if (this.setupDataCall != null) {
        output.writeMessage(10, this.setupDataCall);
      }
      if (this.setupDataCallResponse != null) {
        output.writeMessage(11, this.setupDataCallResponse);
      }
      if (this.deactivateDataCall != null) {
        output.writeMessage(12, this.deactivateDataCall);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeInt32(13, dataStallAction_);
      }
      if (this.modemRestart != null) {
        output.writeMessage(14, this.modemRestart);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeInt64(15, nitzTimestampMillis_);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(1, timestampMillis_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, phoneId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(3, type_);
      }
      if (this.settings != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(4, this.settings);
      }
      if (this.serviceState != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(5, this.serviceState);
      }
      if (this.imsConnectionState != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(6, this.imsConnectionState);
      }
      if (this.imsCapabilities != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(7, this.imsCapabilities);
      }
      if (this.dataCalls != null && this.dataCalls.length > 0) {
        for (int i = 0; i < this.dataCalls.length; i++) {
          com.android.internal.telephony.TelephonyProto.RilDataCall element = this.dataCalls[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(8, element);
          }
        }
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(9, error_);
      }
      if (this.setupDataCall != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(10, this.setupDataCall);
      }
      if (this.setupDataCallResponse != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(11, this.setupDataCallResponse);
      }
      if (this.deactivateDataCall != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(12, this.deactivateDataCall);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(13, dataStallAction_);
      }
      if (this.modemRestart != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(14, this.modemRestart);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(15, nitzTimestampMillis_);
      }
      return size;
    }

    @Override
    public TelephonyEvent mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            timestampMillis_ = input.readInt64();
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            phoneId_ = input.readInt32();
            bitField0_ |= 0x00000002;
            break;
          }
          case 24: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.UNKNOWN:
              case com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.SETTINGS_CHANGED:
              case com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.RIL_SERVICE_STATE_CHANGED:
              case com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.IMS_CONNECTION_STATE_CHANGED:
              case com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.IMS_CAPABILITIES_CHANGED:
              case com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.DATA_CALL_SETUP:
              case com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.DATA_CALL_SETUP_RESPONSE:
              case com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.DATA_CALL_LIST_CHANGED:
              case com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.DATA_CALL_DEACTIVATE:
              case com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.DATA_CALL_DEACTIVATE_RESPONSE:
              case com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.DATA_STALL_ACTION:
              case com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.MODEM_RESTART:
              case com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.NITZ_TIME:
                type_ = value;
                bitField0_ |= 0x00000004;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 34: {
            if (this.settings == null) {
              this.settings = new com.android.internal.telephony.TelephonyProto.TelephonySettings();
            }
            input.readMessage(this.settings);
            break;
          }
          case 42: {
            if (this.serviceState == null) {
              this.serviceState = new com.android.internal.telephony.TelephonyProto.TelephonyServiceState();
            }
            input.readMessage(this.serviceState);
            break;
          }
          case 50: {
            if (this.imsConnectionState == null) {
              this.imsConnectionState = new com.android.internal.telephony.TelephonyProto.ImsConnectionState();
            }
            input.readMessage(this.imsConnectionState);
            break;
          }
          case 58: {
            if (this.imsCapabilities == null) {
              this.imsCapabilities = new com.android.internal.telephony.TelephonyProto.ImsCapabilities();
            }
            input.readMessage(this.imsCapabilities);
            break;
          }
          case 66: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 66);
            int i = this.dataCalls == null ? 0 : this.dataCalls.length;
            com.android.internal.telephony.TelephonyProto.RilDataCall[] newArray =
                new com.android.internal.telephony.TelephonyProto.RilDataCall[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.dataCalls, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.TelephonyProto.RilDataCall();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.TelephonyProto.RilDataCall();
            input.readMessage(newArray[i]);
            this.dataCalls = newArray;
            break;
          }
          case 72: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SUCCESS:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_RADIO_NOT_AVAILABLE:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_GENERIC_FAILURE:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_PASSWORD_INCORRECT:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SIM_PIN2:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SIM_PUK2:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_REQUEST_NOT_SUPPORTED:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_CANCELLED:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SMS_SEND_FAIL_RETRY:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SIM_ABSENT:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SUBSCRIPTION_NOT_AVAILABLE:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_MODE_NOT_SUPPORTED:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_FDN_CHECK_FAILURE:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_ILLEGAL_SIM_OR_ME:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_MISSING_RESOURCE:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_NO_SUCH_ELEMENT:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_USSD:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_SS:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_DIAL:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_DIAL:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_SS:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_USSD:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_DIAL:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_USSD:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SUBSCRIPTION_NOT_SUPPORTED:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_SS:
              case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_LCE_NOT_SUPPORTED:
                error_ = value;
                bitField0_ |= 0x00000008;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 82: {
            if (this.setupDataCall == null) {
              this.setupDataCall = new com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall();
            }
            input.readMessage(this.setupDataCall);
            break;
          }
          case 90: {
            if (this.setupDataCallResponse == null) {
              this.setupDataCallResponse = new com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse();
            }
            input.readMessage(this.setupDataCallResponse);
            break;
          }
          case 98: {
            if (this.deactivateDataCall == null) {
              this.deactivateDataCall = new com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall();
            }
            input.readMessage(this.deactivateDataCall);
            break;
          }
          case 104: {
            dataStallAction_ = input.readInt32();
            bitField0_ |= 0x00000010;
            break;
          }
          case 114: {
            if (this.modemRestart == null) {
              this.modemRestart = new com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart();
            }
            input.readMessage(this.modemRestart);
            break;
          }
          case 120: {
            nitzTimestampMillis_ = input.readInt64();
            bitField0_ |= 0x00000020;
            break;
          }
        }
      }
    }

    public static TelephonyEvent parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonyEvent(), data);
    }

    public static TelephonyEvent parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new TelephonyEvent().mergeFrom(input);
    }
  }

  public static final class TelephonyCallSession extends
      com.google.protobuf.nano.ExtendableMessageNano<TelephonyCallSession> {

    public static final class Event extends
        com.google.protobuf.nano.ExtendableMessageNano<Event> {

      // enum Type
      public interface Type {
        public static final int EVENT_UNKNOWN = 0;
        public static final int SETTINGS_CHANGED = 1;
        public static final int RIL_SERVICE_STATE_CHANGED = 2;
        public static final int IMS_CONNECTION_STATE_CHANGED = 3;
        public static final int IMS_CAPABILITIES_CHANGED = 4;
        public static final int DATA_CALL_LIST_CHANGED = 5;
        public static final int RIL_REQUEST = 6;
        public static final int RIL_RESPONSE = 7;
        public static final int RIL_CALL_RING = 8;
        public static final int RIL_CALL_SRVCC = 9;
        public static final int RIL_CALL_LIST_CHANGED = 10;
        public static final int IMS_COMMAND = 11;
        public static final int IMS_COMMAND_RECEIVED = 12;
        public static final int IMS_COMMAND_FAILED = 13;
        public static final int IMS_COMMAND_COMPLETE = 14;
        public static final int IMS_CALL_RECEIVE = 15;
        public static final int IMS_CALL_STATE_CHANGED = 16;
        public static final int IMS_CALL_TERMINATED = 17;
        public static final int IMS_CALL_HANDOVER = 18;
        public static final int IMS_CALL_HANDOVER_FAILED = 19;
        public static final int PHONE_STATE_CHANGED = 20;
        public static final int NITZ_TIME = 21;
      }

      // enum RilRequest
      public interface RilRequest {
        public static final int RIL_REQUEST_UNKNOWN = 0;
        public static final int RIL_REQUEST_DIAL = 1;
        public static final int RIL_REQUEST_ANSWER = 2;
        public static final int RIL_REQUEST_HANGUP = 3;
        public static final int RIL_REQUEST_SET_CALL_WAITING = 4;
        public static final int RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE = 5;
        public static final int RIL_REQUEST_CDMA_FLASH = 6;
        public static final int RIL_REQUEST_CONFERENCE = 7;
      }

      // enum ImsCommand
      public interface ImsCommand {
        public static final int IMS_CMD_UNKNOWN = 0;
        public static final int IMS_CMD_START = 1;
        public static final int IMS_CMD_ACCEPT = 2;
        public static final int IMS_CMD_REJECT = 3;
        public static final int IMS_CMD_TERMINATE = 4;
        public static final int IMS_CMD_HOLD = 5;
        public static final int IMS_CMD_RESUME = 6;
        public static final int IMS_CMD_MERGE = 7;
        public static final int IMS_CMD_UPDATE = 8;
        public static final int IMS_CMD_CONFERENCE_EXTEND = 9;
        public static final int IMS_CMD_INVITE_PARTICIPANT = 10;
        public static final int IMS_CMD_REMOVE_PARTICIPANT = 11;
      }

      // enum PhoneState
      public interface PhoneState {
        public static final int STATE_UNKNOWN = 0;
        public static final int STATE_IDLE = 1;
        public static final int STATE_RINGING = 2;
        public static final int STATE_OFFHOOK = 3;
      }

      // enum CallState
      public interface CallState {
        public static final int CALL_UNKNOWN = 0;
        public static final int CALL_IDLE = 1;
        public static final int CALL_ACTIVE = 2;
        public static final int CALL_HOLDING = 3;
        public static final int CALL_DIALING = 4;
        public static final int CALL_ALERTING = 5;
        public static final int CALL_INCOMING = 6;
        public static final int CALL_WAITING = 7;
        public static final int CALL_DISCONNECTED = 8;
        public static final int CALL_DISCONNECTING = 9;
      }

      // enum RilSrvccState
      public interface RilSrvccState {
        public static final int HANDOVER_UNKNOWN = 0;
        public static final int HANDOVER_STARTED = 1;
        public static final int HANDOVER_COMPLETED = 2;
        public static final int HANDOVER_FAILED = 3;
        public static final int HANDOVER_CANCELED = 4;
      }

      public static final class RilCall extends
          com.google.protobuf.nano.ExtendableMessageNano<RilCall> {

        // enum Type
        public interface Type {
          public static final int UNKNOWN = 0;
          public static final int MO = 1;
          public static final int MT = 2;
        }

        private static volatile RilCall[] _emptyArray;
        public static RilCall[] emptyArray() {
          // Lazily initializes the empty array
          if (_emptyArray == null) {
            synchronized (
                com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
              if (_emptyArray == null) {
                _emptyArray = new RilCall[0];
              }
            }
          }
          return _emptyArray;
        }

        private int bitField0_;

        // optional int32 index = 1;
        private int index_;
        public int getIndex() {
          return index_;
        }
        public RilCall setIndex(int value) {
          index_ = value;
          bitField0_ |= 0x00000001;
          return this;
        }
        public boolean hasIndex() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        public RilCall clearIndex() {
          index_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;
        private int state_;
        public int getState() {
          return state_;
        }
        public RilCall setState(int value) {
          state_ = value;
          bitField0_ |= 0x00000002;
          return this;
        }
        public boolean hasState() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        public RilCall clearState() {
          state_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        // optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;
        private int type_;
        public int getType() {
          return type_;
        }
        public RilCall setType(int value) {
          type_ = value;
          bitField0_ |= 0x00000004;
          return this;
        }
        public boolean hasType() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        public RilCall clearType() {
          type_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.UNKNOWN;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyCallSession.Event.RilCall)

        public RilCall() {
          clear();
        }

        public RilCall clear() {
          bitField0_ = 0;
          index_ = 0;
          state_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN;
          type_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.UNKNOWN;
          unknownFieldData = null;
          cachedSize = -1;
          return this;
        }

        @Override
        public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
            throws java.io.IOException {
          if (((bitField0_ & 0x00000001) != 0)) {
            output.writeInt32(1, index_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            output.writeInt32(2, state_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            output.writeInt32(3, type_);
          }
          super.writeTo(output);
        }

        @Override
        protected int computeSerializedSize() {
          int size = super.computeSerializedSize();
          if (((bitField0_ & 0x00000001) != 0)) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeInt32Size(1, index_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(2, state_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(3, type_);
          }
          return size;
        }

        @Override
        public RilCall mergeFrom(
                com.google.protobuf.nano.CodedInputByteBufferNano input)
            throws java.io.IOException {
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                return this;
              default: {
                if (!super.storeUnknownField(input, tag)) {
                  return this;
                }
                break;
              }
              case 8: {
                index_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              }
              case 16: {
                int initialPos = input.getPosition();
                int value = input.readInt32();
                switch (value) {
                  case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN:
                  case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_IDLE:
                  case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_ACTIVE:
                  case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_HOLDING:
                  case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_DIALING:
                  case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_ALERTING:
                  case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_INCOMING:
                  case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_WAITING:
                  case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_DISCONNECTED:
                  case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_DISCONNECTING:
                    state_ = value;
                    bitField0_ |= 0x00000002;
                    break;
                  default:
                    input.rewindToPosition(initialPos);
                    storeUnknownField(input, tag);
                    break;
                }
                break;
              }
              case 24: {
                int initialPos = input.getPosition();
                int value = input.readInt32();
                switch (value) {
                  case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.UNKNOWN:
                  case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.MO:
                  case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.MT:
                    type_ = value;
                    bitField0_ |= 0x00000004;
                    break;
                  default:
                    input.rewindToPosition(initialPos);
                    storeUnknownField(input, tag);
                    break;
                }
                break;
              }
            }
          }
        }

        public static RilCall parseFrom(byte[] data)
            throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
          return com.google.protobuf.nano.MessageNano.mergeFrom(new RilCall(), data);
        }

        public static RilCall parseFrom(
                com.google.protobuf.nano.CodedInputByteBufferNano input)
            throws java.io.IOException {
          return new RilCall().mergeFrom(input);
        }
      }

      private static volatile Event[] _emptyArray;
      public static Event[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new Event[0];
            }
          }
        }
        return _emptyArray;
      }

      private int bitField0_;

      // optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;
      private int type_;
      public int getType() {
        return type_;
      }
      public Event setType(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        return this;
      }
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      public Event clearType() {
        type_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.EVENT_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // optional .clearcut.connectivity.TimeInterval delay = 2;
      private int delay_;
      public int getDelay() {
        return delay_;
      }
      public Event setDelay(int value) {
        delay_ = value;
        bitField0_ |= 0x00000002;
        return this;
      }
      public boolean hasDelay() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      public Event clearDelay() {
        delay_ = com.android.internal.telephony.TelephonyProto.TimeInterval.TI_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional .clearcut.connectivity.TelephonySettings settings = 3;
      public com.android.internal.telephony.TelephonyProto.TelephonySettings settings;

      // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState serviceState;

      // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
      public com.android.internal.telephony.TelephonyProto.ImsConnectionState imsConnectionState;

      // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
      public com.android.internal.telephony.TelephonyProto.ImsCapabilities imsCapabilities;

      // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
      public com.android.internal.telephony.TelephonyProto.RilDataCall[] dataCalls;

      // optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;
      private int phoneState_;
      public int getPhoneState() {
        return phoneState_;
      }
      public Event setPhoneState(int value) {
        phoneState_ = value;
        bitField0_ |= 0x00000004;
        return this;
      }
      public boolean hasPhoneState() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      public Event clearPhoneState() {
        phoneState_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;
      private int callState_;
      public int getCallState() {
        return callState_;
      }
      public Event setCallState(int value) {
        callState_ = value;
        bitField0_ |= 0x00000008;
        return this;
      }
      public boolean hasCallState() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      public Event clearCallState() {
        callState_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // optional int32 call_index = 10;
      private int callIndex_;
      public int getCallIndex() {
        return callIndex_;
      }
      public Event setCallIndex(int value) {
        callIndex_ = value;
        bitField0_ |= 0x00000010;
        return this;
      }
      public boolean hasCallIndex() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      public Event clearCallIndex() {
        callIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      // optional int32 merged_call_index = 11;
      private int mergedCallIndex_;
      public int getMergedCallIndex() {
        return mergedCallIndex_;
      }
      public Event setMergedCallIndex(int value) {
        mergedCallIndex_ = value;
        bitField0_ |= 0x00000020;
        return this;
      }
      public boolean hasMergedCallIndex() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      public Event clearMergedCallIndex() {
        mergedCallIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      // repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall[] calls;

      // optional .clearcut.connectivity.RilErrno error = 13;
      private int error_;
      public int getError() {
        return error_;
      }
      public Event setError(int value) {
        error_ = value;
        bitField0_ |= 0x00000040;
        return this;
      }
      public boolean hasError() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      public Event clearError() {
        error_ = com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      // optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;
      private int rilRequest_;
      public int getRilRequest() {
        return rilRequest_;
      }
      public Event setRilRequest(int value) {
        rilRequest_ = value;
        bitField0_ |= 0x00000080;
        return this;
      }
      public boolean hasRilRequest() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      public Event clearRilRequest() {
        rilRequest_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      // optional int32 ril_request_id = 15;
      private int rilRequestId_;
      public int getRilRequestId() {
        return rilRequestId_;
      }
      public Event setRilRequestId(int value) {
        rilRequestId_ = value;
        bitField0_ |= 0x00000100;
        return this;
      }
      public boolean hasRilRequestId() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      public Event clearRilRequestId() {
        rilRequestId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      // optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;
      private int srvccState_;
      public int getSrvccState() {
        return srvccState_;
      }
      public Event setSrvccState(int value) {
        srvccState_ = value;
        bitField0_ |= 0x00000200;
        return this;
      }
      public boolean hasSrvccState() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      public Event clearSrvccState() {
        srvccState_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      // optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;
      private int imsCommand_;
      public int getImsCommand() {
        return imsCommand_;
      }
      public Event setImsCommand(int value) {
        imsCommand_ = value;
        bitField0_ |= 0x00000400;
        return this;
      }
      public boolean hasImsCommand() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      public Event clearImsCommand() {
        imsCommand_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      // optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;
      public com.android.internal.telephony.TelephonyProto.ImsReasonInfo reasonInfo;

      // optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19;
      private int srcAccessTech_;
      public int getSrcAccessTech() {
        return srcAccessTech_;
      }
      public Event setSrcAccessTech(int value) {
        srcAccessTech_ = value;
        bitField0_ |= 0x00000800;
        return this;
      }
      public boolean hasSrcAccessTech() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      public Event clearSrcAccessTech() {
        srcAccessTech_ = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      // optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20;
      private int targetAccessTech_;
      public int getTargetAccessTech() {
        return targetAccessTech_;
      }
      public Event setTargetAccessTech(int value) {
        targetAccessTech_ = value;
        bitField0_ |= 0x00001000;
        return this;
      }
      public boolean hasTargetAccessTech() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      public Event clearTargetAccessTech() {
        targetAccessTech_ = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      // optional int64 nitz_timestamp_millis = 21;
      private long nitzTimestampMillis_;
      public long getNitzTimestampMillis() {
        return nitzTimestampMillis_;
      }
      public Event setNitzTimestampMillis(long value) {
        nitzTimestampMillis_ = value;
        bitField0_ |= 0x00002000;
        return this;
      }
      public boolean hasNitzTimestampMillis() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      public Event clearNitzTimestampMillis() {
        nitzTimestampMillis_ = 0L;
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyCallSession.Event)

      public Event() {
        clear();
      }

      public Event clear() {
        bitField0_ = 0;
        type_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.EVENT_UNKNOWN;
        delay_ = com.android.internal.telephony.TelephonyProto.TimeInterval.TI_UNKNOWN;
        settings = null;
        serviceState = null;
        imsConnectionState = null;
        imsCapabilities = null;
        dataCalls = com.android.internal.telephony.TelephonyProto.RilDataCall.emptyArray();
        phoneState_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_UNKNOWN;
        callState_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN;
        callIndex_ = 0;
        mergedCallIndex_ = 0;
        calls = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.emptyArray();
        error_ = com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN;
        rilRequest_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_UNKNOWN;
        rilRequestId_ = 0;
        srvccState_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_UNKNOWN;
        imsCommand_ = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_UNKNOWN;
        reasonInfo = null;
        srcAccessTech_ = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN;
        targetAccessTech_ = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN;
        nitzTimestampMillis_ = 0L;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeInt32(1, type_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(2, delay_);
        }
        if (this.settings != null) {
          output.writeMessage(3, this.settings);
        }
        if (this.serviceState != null) {
          output.writeMessage(4, this.serviceState);
        }
        if (this.imsConnectionState != null) {
          output.writeMessage(5, this.imsConnectionState);
        }
        if (this.imsCapabilities != null) {
          output.writeMessage(6, this.imsCapabilities);
        }
        if (this.dataCalls != null && this.dataCalls.length > 0) {
          for (int i = 0; i < this.dataCalls.length; i++) {
            com.android.internal.telephony.TelephonyProto.RilDataCall element = this.dataCalls[i];
            if (element != null) {
              output.writeMessage(7, element);
            }
          }
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeInt32(8, phoneState_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeInt32(9, callState_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeInt32(10, callIndex_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          output.writeInt32(11, mergedCallIndex_);
        }
        if (this.calls != null && this.calls.length > 0) {
          for (int i = 0; i < this.calls.length; i++) {
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall element = this.calls[i];
            if (element != null) {
              output.writeMessage(12, element);
            }
          }
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          output.writeInt32(13, error_);
        }
        if (((bitField0_ & 0x00000080) != 0)) {
          output.writeInt32(14, rilRequest_);
        }
        if (((bitField0_ & 0x00000100) != 0)) {
          output.writeInt32(15, rilRequestId_);
        }
        if (((bitField0_ & 0x00000200) != 0)) {
          output.writeInt32(16, srvccState_);
        }
        if (((bitField0_ & 0x00000400) != 0)) {
          output.writeInt32(17, imsCommand_);
        }
        if (this.reasonInfo != null) {
          output.writeMessage(18, this.reasonInfo);
        }
        if (((bitField0_ & 0x00000800) != 0)) {
          output.writeInt32(19, srcAccessTech_);
        }
        if (((bitField0_ & 0x00001000) != 0)) {
          output.writeInt32(20, targetAccessTech_);
        }
        if (((bitField0_ & 0x00002000) != 0)) {
          output.writeInt64(21, nitzTimestampMillis_);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, type_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, delay_);
        }
        if (this.settings != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(3, this.settings);
        }
        if (this.serviceState != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(4, this.serviceState);
        }
        if (this.imsConnectionState != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(5, this.imsConnectionState);
        }
        if (this.imsCapabilities != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(6, this.imsCapabilities);
        }
        if (this.dataCalls != null && this.dataCalls.length > 0) {
          for (int i = 0; i < this.dataCalls.length; i++) {
            com.android.internal.telephony.TelephonyProto.RilDataCall element = this.dataCalls[i];
            if (element != null) {
              size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeMessageSize(7, element);
            }
          }
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(8, phoneState_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(9, callState_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(10, callIndex_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(11, mergedCallIndex_);
        }
        if (this.calls != null && this.calls.length > 0) {
          for (int i = 0; i < this.calls.length; i++) {
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall element = this.calls[i];
            if (element != null) {
              size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeMessageSize(12, element);
            }
          }
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(13, error_);
        }
        if (((bitField0_ & 0x00000080) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(14, rilRequest_);
        }
        if (((bitField0_ & 0x00000100) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(15, rilRequestId_);
        }
        if (((bitField0_ & 0x00000200) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(16, srvccState_);
        }
        if (((bitField0_ & 0x00000400) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(17, imsCommand_);
        }
        if (this.reasonInfo != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(18, this.reasonInfo);
        }
        if (((bitField0_ & 0x00000800) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(19, srcAccessTech_);
        }
        if (((bitField0_ & 0x00001000) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(20, targetAccessTech_);
        }
        if (((bitField0_ & 0x00002000) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt64Size(21, nitzTimestampMillis_);
        }
        return size;
      }

      @Override
      public Event mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!super.storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.EVENT_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.SETTINGS_CHANGED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.RIL_SERVICE_STATE_CHANGED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CONNECTION_STATE_CHANGED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CAPABILITIES_CHANGED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.DATA_CALL_LIST_CHANGED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.RIL_REQUEST:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.RIL_RESPONSE:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.RIL_CALL_RING:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.RIL_CALL_SRVCC:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.RIL_CALL_LIST_CHANGED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.IMS_COMMAND:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.IMS_COMMAND_RECEIVED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.IMS_COMMAND_FAILED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.IMS_COMMAND_COMPLETE:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CALL_RECEIVE:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CALL_STATE_CHANGED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CALL_TERMINATED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CALL_HANDOVER:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CALL_HANDOVER_FAILED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.PHONE_STATE_CHANGED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.NITZ_TIME:
                  type_ = value;
                  bitField0_ |= 0x00000001;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 16: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_10_MILLIS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_20_MILLIS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_50_MILLIS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_100_MILLIS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_200_MILLIS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_500_MILLIS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_1_SEC:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_2_SEC:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_5_SEC:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_10_SEC:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_30_SEC:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_1_MINUTE:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_3_MINUTES:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_10_MINUTES:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_30_MINUTES:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_1_HOUR:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_2_HOURS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_4_HOURS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_MANY_HOURS:
                  delay_ = value;
                  bitField0_ |= 0x00000002;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 26: {
              if (this.settings == null) {
                this.settings = new com.android.internal.telephony.TelephonyProto.TelephonySettings();
              }
              input.readMessage(this.settings);
              break;
            }
            case 34: {
              if (this.serviceState == null) {
                this.serviceState = new com.android.internal.telephony.TelephonyProto.TelephonyServiceState();
              }
              input.readMessage(this.serviceState);
              break;
            }
            case 42: {
              if (this.imsConnectionState == null) {
                this.imsConnectionState = new com.android.internal.telephony.TelephonyProto.ImsConnectionState();
              }
              input.readMessage(this.imsConnectionState);
              break;
            }
            case 50: {
              if (this.imsCapabilities == null) {
                this.imsCapabilities = new com.android.internal.telephony.TelephonyProto.ImsCapabilities();
              }
              input.readMessage(this.imsCapabilities);
              break;
            }
            case 58: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 58);
              int i = this.dataCalls == null ? 0 : this.dataCalls.length;
              com.android.internal.telephony.TelephonyProto.RilDataCall[] newArray =
                  new com.android.internal.telephony.TelephonyProto.RilDataCall[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.dataCalls, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = new com.android.internal.telephony.TelephonyProto.RilDataCall();
                input.readMessage(newArray[i]);
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = new com.android.internal.telephony.TelephonyProto.RilDataCall();
              input.readMessage(newArray[i]);
              this.dataCalls = newArray;
              break;
            }
            case 64: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_IDLE:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_RINGING:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_OFFHOOK:
                  phoneState_ = value;
                  bitField0_ |= 0x00000004;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 72: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_IDLE:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_ACTIVE:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_HOLDING:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_DIALING:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_ALERTING:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_INCOMING:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_WAITING:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_DISCONNECTED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_DISCONNECTING:
                  callState_ = value;
                  bitField0_ |= 0x00000008;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 80: {
              callIndex_ = input.readInt32();
              bitField0_ |= 0x00000010;
              break;
            }
            case 88: {
              mergedCallIndex_ = input.readInt32();
              bitField0_ |= 0x00000020;
              break;
            }
            case 98: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 98);
              int i = this.calls == null ? 0 : this.calls.length;
              com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall[] newArray =
                  new com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.calls, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = new com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall();
                input.readMessage(newArray[i]);
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = new com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall();
              input.readMessage(newArray[i]);
              this.calls = newArray;
              break;
            }
            case 104: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SUCCESS:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_RADIO_NOT_AVAILABLE:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_GENERIC_FAILURE:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_PASSWORD_INCORRECT:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SIM_PIN2:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SIM_PUK2:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_REQUEST_NOT_SUPPORTED:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_CANCELLED:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SMS_SEND_FAIL_RETRY:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SIM_ABSENT:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SUBSCRIPTION_NOT_AVAILABLE:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_MODE_NOT_SUPPORTED:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_FDN_CHECK_FAILURE:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_ILLEGAL_SIM_OR_ME:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_MISSING_RESOURCE:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_NO_SUCH_ELEMENT:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_USSD:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_SS:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_DIAL:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_DIAL:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_SS:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_USSD:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_DIAL:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_USSD:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SUBSCRIPTION_NOT_SUPPORTED:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_SS:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_LCE_NOT_SUPPORTED:
                  error_ = value;
                  bitField0_ |= 0x00000040;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 112: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_DIAL:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_ANSWER:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_HANGUP:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_SET_CALL_WAITING:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_CDMA_FLASH:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_CONFERENCE:
                  rilRequest_ = value;
                  bitField0_ |= 0x00000080;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 120: {
              rilRequestId_ = input.readInt32();
              bitField0_ |= 0x00000100;
              break;
            }
            case 128: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_STARTED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_COMPLETED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_FAILED:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_CANCELED:
                  srvccState_ = value;
                  bitField0_ |= 0x00000200;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 136: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_START:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_ACCEPT:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_REJECT:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_TERMINATE:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_HOLD:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_RESUME:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_MERGE:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_UPDATE:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_CONFERENCE_EXTEND:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_INVITE_PARTICIPANT:
                case com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_REMOVE_PARTICIPANT:
                  imsCommand_ = value;
                  bitField0_ |= 0x00000400;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 146: {
              if (this.reasonInfo == null) {
                this.reasonInfo = new com.android.internal.telephony.TelephonyProto.ImsReasonInfo();
              }
              input.readMessage(this.reasonInfo);
              break;
            }
            case 152: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_GPRS:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EDGE:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UMTS:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IS95A:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IS95B:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_1XRTT:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_0:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_A:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSDPA:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSUPA:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSPA:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_B:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EHRPD:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_LTE:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSPAP:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_GSM:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_TD_SCDMA:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IWLAN:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_LTE_CA:
                  srcAccessTech_ = value;
                  bitField0_ |= 0x00000800;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 160: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_GPRS:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EDGE:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_UMTS:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IS95A:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IS95B:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_1XRTT:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_0:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_A:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSDPA:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSUPA:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSPA:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EVDO_B:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_EHRPD:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_LTE:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_HSPAP:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_GSM:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_TD_SCDMA:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_IWLAN:
                case com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.RAT_LTE_CA:
                  targetAccessTech_ = value;
                  bitField0_ |= 0x00001000;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 168: {
              nitzTimestampMillis_ = input.readInt64();
              bitField0_ |= 0x00002000;
              break;
            }
          }
        }
      }

      public static Event parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new Event(), data);
      }

      public static Event parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new Event().mergeFrom(input);
      }
    }

    private static volatile TelephonyCallSession[] _emptyArray;
    public static TelephonyCallSession[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new TelephonyCallSession[0];
          }
        }
      }
      return _emptyArray;
    }

    private int bitField0_;

    // optional int32 start_time_minutes = 1;
    private int startTimeMinutes_;
    public int getStartTimeMinutes() {
      return startTimeMinutes_;
    }
    public TelephonyCallSession setStartTimeMinutes(int value) {
      startTimeMinutes_ = value;
      bitField0_ |= 0x00000001;
      return this;
    }
    public boolean hasStartTimeMinutes() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    public TelephonyCallSession clearStartTimeMinutes() {
      startTimeMinutes_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    // optional int32 phone_id = 2;
    private int phoneId_;
    public int getPhoneId() {
      return phoneId_;
    }
    public TelephonyCallSession setPhoneId(int value) {
      phoneId_ = value;
      bitField0_ |= 0x00000002;
      return this;
    }
    public boolean hasPhoneId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    public TelephonyCallSession clearPhoneId() {
      phoneId_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    // repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;
    public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event[] events;

    // optional bool events_dropped = 4;
    private boolean eventsDropped_;
    public boolean getEventsDropped() {
      return eventsDropped_;
    }
    public TelephonyCallSession setEventsDropped(boolean value) {
      eventsDropped_ = value;
      bitField0_ |= 0x00000004;
      return this;
    }
    public boolean hasEventsDropped() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    public TelephonyCallSession clearEventsDropped() {
      eventsDropped_ = false;
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyCallSession)

    public TelephonyCallSession() {
      clear();
    }

    public TelephonyCallSession clear() {
      bitField0_ = 0;
      startTimeMinutes_ = 0;
      phoneId_ = 0;
      events = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.emptyArray();
      eventsDropped_ = false;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, startTimeMinutes_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, phoneId_);
      }
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event element = this.events[i];
          if (element != null) {
            output.writeMessage(3, element);
          }
        }
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(4, eventsDropped_);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, startTimeMinutes_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, phoneId_);
      }
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event element = this.events[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(3, element);
          }
        }
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(4, eventsDropped_);
      }
      return size;
    }

    @Override
    public TelephonyCallSession mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            startTimeMinutes_ = input.readInt32();
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            phoneId_ = input.readInt32();
            bitField0_ |= 0x00000002;
            break;
          }
          case 26: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 26);
            int i = this.events == null ? 0 : this.events.length;
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event[] newArray =
                new com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.events, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event();
            input.readMessage(newArray[i]);
            this.events = newArray;
            break;
          }
          case 32: {
            eventsDropped_ = input.readBool();
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    }

    public static TelephonyCallSession parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonyCallSession(), data);
    }

    public static TelephonyCallSession parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new TelephonyCallSession().mergeFrom(input);
    }
  }

  public static final class SmsSession extends
      com.google.protobuf.nano.ExtendableMessageNano<SmsSession> {

    public static final class Event extends
        com.google.protobuf.nano.ExtendableMessageNano<Event> {

      // enum Type
      public interface Type {
        public static final int EVENT_UNKNOWN = 0;
        public static final int SETTINGS_CHANGED = 1;
        public static final int RIL_SERVICE_STATE_CHANGED = 2;
        public static final int IMS_CONNECTION_STATE_CHANGED = 3;
        public static final int IMS_CAPABILITIES_CHANGED = 4;
        public static final int DATA_CALL_LIST_CHANGED = 5;
        public static final int SMS_SEND = 6;
        public static final int SMS_SEND_RESULT = 7;
        public static final int SMS_RECEIVED = 8;
      }

      // enum Format
      public interface Format {
        public static final int SMS_FORMAT_UNKNOWN = 0;
        public static final int SMS_FORMAT_3GPP = 1;
        public static final int SMS_FORMAT_3GPP2 = 2;
      }

      // enum Tech
      public interface Tech {
        public static final int SMS_UNKNOWN = 0;
        public static final int SMS_GSM = 1;
        public static final int SMS_CDMA = 2;
        public static final int SMS_IMS = 3;
      }

      private static volatile Event[] _emptyArray;
      public static Event[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new Event[0];
            }
          }
        }
        return _emptyArray;
      }

      private int bitField0_;

      // optional .clearcut.connectivity.SmsSession.Event.Type type = 1;
      private int type_;
      public int getType() {
        return type_;
      }
      public Event setType(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        return this;
      }
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      public Event clearType() {
        type_ = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.EVENT_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // optional .clearcut.connectivity.TimeInterval delay = 2;
      private int delay_;
      public int getDelay() {
        return delay_;
      }
      public Event setDelay(int value) {
        delay_ = value;
        bitField0_ |= 0x00000002;
        return this;
      }
      public boolean hasDelay() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      public Event clearDelay() {
        delay_ = com.android.internal.telephony.TelephonyProto.TimeInterval.TI_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional .clearcut.connectivity.TelephonySettings settings = 3;
      public com.android.internal.telephony.TelephonyProto.TelephonySettings settings;

      // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState serviceState;

      // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
      public com.android.internal.telephony.TelephonyProto.ImsConnectionState imsConnectionState;

      // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
      public com.android.internal.telephony.TelephonyProto.ImsCapabilities imsCapabilities;

      // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
      public com.android.internal.telephony.TelephonyProto.RilDataCall[] dataCalls;

      // optional .clearcut.connectivity.SmsSession.Event.Format format = 8;
      private int format_;
      public int getFormat() {
        return format_;
      }
      public Event setFormat(int value) {
        format_ = value;
        bitField0_ |= 0x00000004;
        return this;
      }
      public boolean hasFormat() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      public Event clearFormat() {
        format_ = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format.SMS_FORMAT_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;
      private int tech_;
      public int getTech() {
        return tech_;
      }
      public Event setTech(int value) {
        tech_ = value;
        bitField0_ |= 0x00000008;
        return this;
      }
      public boolean hasTech() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      public Event clearTech() {
        tech_ = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech.SMS_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // optional int32 error_code = 10;
      private int errorCode_;
      public int getErrorCode() {
        return errorCode_;
      }
      public Event setErrorCode(int value) {
        errorCode_ = value;
        bitField0_ |= 0x00000010;
        return this;
      }
      public boolean hasErrorCode() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      public Event clearErrorCode() {
        errorCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      // optional .clearcut.connectivity.RilErrno error = 11;
      private int error_;
      public int getError() {
        return error_;
      }
      public Event setError(int value) {
        error_ = value;
        bitField0_ |= 0x00000020;
        return this;
      }
      public boolean hasError() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      public Event clearError() {
        error_ = com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      // optional int32 ril_request_id = 12;
      private int rilRequestId_;
      public int getRilRequestId() {
        return rilRequestId_;
      }
      public Event setRilRequestId(int value) {
        rilRequestId_ = value;
        bitField0_ |= 0x00000040;
        return this;
      }
      public boolean hasRilRequestId() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      public Event clearRilRequestId() {
        rilRequestId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.SmsSession.Event)

      public Event() {
        clear();
      }

      public Event clear() {
        bitField0_ = 0;
        type_ = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.EVENT_UNKNOWN;
        delay_ = com.android.internal.telephony.TelephonyProto.TimeInterval.TI_UNKNOWN;
        settings = null;
        serviceState = null;
        imsConnectionState = null;
        imsCapabilities = null;
        dataCalls = com.android.internal.telephony.TelephonyProto.RilDataCall.emptyArray();
        format_ = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format.SMS_FORMAT_UNKNOWN;
        tech_ = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech.SMS_UNKNOWN;
        errorCode_ = 0;
        error_ = com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN;
        rilRequestId_ = 0;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeInt32(1, type_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(2, delay_);
        }
        if (this.settings != null) {
          output.writeMessage(3, this.settings);
        }
        if (this.serviceState != null) {
          output.writeMessage(4, this.serviceState);
        }
        if (this.imsConnectionState != null) {
          output.writeMessage(5, this.imsConnectionState);
        }
        if (this.imsCapabilities != null) {
          output.writeMessage(6, this.imsCapabilities);
        }
        if (this.dataCalls != null && this.dataCalls.length > 0) {
          for (int i = 0; i < this.dataCalls.length; i++) {
            com.android.internal.telephony.TelephonyProto.RilDataCall element = this.dataCalls[i];
            if (element != null) {
              output.writeMessage(7, element);
            }
          }
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeInt32(8, format_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeInt32(9, tech_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeInt32(10, errorCode_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          output.writeInt32(11, error_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          output.writeInt32(12, rilRequestId_);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, type_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, delay_);
        }
        if (this.settings != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(3, this.settings);
        }
        if (this.serviceState != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(4, this.serviceState);
        }
        if (this.imsConnectionState != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(5, this.imsConnectionState);
        }
        if (this.imsCapabilities != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(6, this.imsCapabilities);
        }
        if (this.dataCalls != null && this.dataCalls.length > 0) {
          for (int i = 0; i < this.dataCalls.length; i++) {
            com.android.internal.telephony.TelephonyProto.RilDataCall element = this.dataCalls[i];
            if (element != null) {
              size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeMessageSize(7, element);
            }
          }
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(8, format_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(9, tech_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(10, errorCode_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(11, error_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(12, rilRequestId_);
        }
        return size;
      }

      @Override
      public Event mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!super.storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.EVENT_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.SETTINGS_CHANGED:
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.RIL_SERVICE_STATE_CHANGED:
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.IMS_CONNECTION_STATE_CHANGED:
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.IMS_CAPABILITIES_CHANGED:
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.DATA_CALL_LIST_CHANGED:
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.SMS_SEND:
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.SMS_SEND_RESULT:
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.SMS_RECEIVED:
                  type_ = value;
                  bitField0_ |= 0x00000001;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 16: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_10_MILLIS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_20_MILLIS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_50_MILLIS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_100_MILLIS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_200_MILLIS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_500_MILLIS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_1_SEC:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_2_SEC:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_5_SEC:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_10_SEC:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_30_SEC:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_1_MINUTE:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_3_MINUTES:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_10_MINUTES:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_30_MINUTES:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_1_HOUR:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_2_HOURS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_4_HOURS:
                case com.android.internal.telephony.TelephonyProto.TimeInterval.TI_MANY_HOURS:
                  delay_ = value;
                  bitField0_ |= 0x00000002;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 26: {
              if (this.settings == null) {
                this.settings = new com.android.internal.telephony.TelephonyProto.TelephonySettings();
              }
              input.readMessage(this.settings);
              break;
            }
            case 34: {
              if (this.serviceState == null) {
                this.serviceState = new com.android.internal.telephony.TelephonyProto.TelephonyServiceState();
              }
              input.readMessage(this.serviceState);
              break;
            }
            case 42: {
              if (this.imsConnectionState == null) {
                this.imsConnectionState = new com.android.internal.telephony.TelephonyProto.ImsConnectionState();
              }
              input.readMessage(this.imsConnectionState);
              break;
            }
            case 50: {
              if (this.imsCapabilities == null) {
                this.imsCapabilities = new com.android.internal.telephony.TelephonyProto.ImsCapabilities();
              }
              input.readMessage(this.imsCapabilities);
              break;
            }
            case 58: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 58);
              int i = this.dataCalls == null ? 0 : this.dataCalls.length;
              com.android.internal.telephony.TelephonyProto.RilDataCall[] newArray =
                  new com.android.internal.telephony.TelephonyProto.RilDataCall[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.dataCalls, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = new com.android.internal.telephony.TelephonyProto.RilDataCall();
                input.readMessage(newArray[i]);
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = new com.android.internal.telephony.TelephonyProto.RilDataCall();
              input.readMessage(newArray[i]);
              this.dataCalls = newArray;
              break;
            }
            case 64: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format.SMS_FORMAT_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format.SMS_FORMAT_3GPP:
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format.SMS_FORMAT_3GPP2:
                  format_ = value;
                  bitField0_ |= 0x00000004;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 72: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech.SMS_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech.SMS_GSM:
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech.SMS_CDMA:
                case com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech.SMS_IMS:
                  tech_ = value;
                  bitField0_ |= 0x00000008;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 80: {
              errorCode_ = input.readInt32();
              bitField0_ |= 0x00000010;
              break;
            }
            case 88: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SUCCESS:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_RADIO_NOT_AVAILABLE:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_GENERIC_FAILURE:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_PASSWORD_INCORRECT:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SIM_PIN2:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SIM_PUK2:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_REQUEST_NOT_SUPPORTED:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_CANCELLED:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SMS_SEND_FAIL_RETRY:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SIM_ABSENT:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SUBSCRIPTION_NOT_AVAILABLE:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_MODE_NOT_SUPPORTED:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_FDN_CHECK_FAILURE:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_ILLEGAL_SIM_OR_ME:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_MISSING_RESOURCE:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_NO_SUCH_ELEMENT:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_USSD:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_SS:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_DIAL:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_DIAL:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_SS:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_USSD:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_DIAL:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_USSD:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SUBSCRIPTION_NOT_SUPPORTED:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_SS:
                case com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_LCE_NOT_SUPPORTED:
                  error_ = value;
                  bitField0_ |= 0x00000020;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 96: {
              rilRequestId_ = input.readInt32();
              bitField0_ |= 0x00000040;
              break;
            }
          }
        }
      }

      public static Event parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new Event(), data);
      }

      public static Event parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new Event().mergeFrom(input);
      }
    }

    private static volatile SmsSession[] _emptyArray;
    public static SmsSession[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new SmsSession[0];
          }
        }
      }
      return _emptyArray;
    }

    private int bitField0_;

    // optional int32 start_time_minutes = 1;
    private int startTimeMinutes_;
    public int getStartTimeMinutes() {
      return startTimeMinutes_;
    }
    public SmsSession setStartTimeMinutes(int value) {
      startTimeMinutes_ = value;
      bitField0_ |= 0x00000001;
      return this;
    }
    public boolean hasStartTimeMinutes() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    public SmsSession clearStartTimeMinutes() {
      startTimeMinutes_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    // optional int32 phone_id = 2;
    private int phoneId_;
    public int getPhoneId() {
      return phoneId_;
    }
    public SmsSession setPhoneId(int value) {
      phoneId_ = value;
      bitField0_ |= 0x00000002;
      return this;
    }
    public boolean hasPhoneId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    public SmsSession clearPhoneId() {
      phoneId_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    // repeated .clearcut.connectivity.SmsSession.Event events = 3;
    public com.android.internal.telephony.TelephonyProto.SmsSession.Event[] events;

    // optional bool events_dropped = 4;
    private boolean eventsDropped_;
    public boolean getEventsDropped() {
      return eventsDropped_;
    }
    public SmsSession setEventsDropped(boolean value) {
      eventsDropped_ = value;
      bitField0_ |= 0x00000004;
      return this;
    }
    public boolean hasEventsDropped() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    public SmsSession clearEventsDropped() {
      eventsDropped_ = false;
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.SmsSession)

    public SmsSession() {
      clear();
    }

    public SmsSession clear() {
      bitField0_ = 0;
      startTimeMinutes_ = 0;
      phoneId_ = 0;
      events = com.android.internal.telephony.TelephonyProto.SmsSession.Event.emptyArray();
      eventsDropped_ = false;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, startTimeMinutes_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, phoneId_);
      }
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.internal.telephony.TelephonyProto.SmsSession.Event element = this.events[i];
          if (element != null) {
            output.writeMessage(3, element);
          }
        }
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(4, eventsDropped_);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, startTimeMinutes_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, phoneId_);
      }
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.internal.telephony.TelephonyProto.SmsSession.Event element = this.events[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(3, element);
          }
        }
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(4, eventsDropped_);
      }
      return size;
    }

    @Override
    public SmsSession mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            startTimeMinutes_ = input.readInt32();
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            phoneId_ = input.readInt32();
            bitField0_ |= 0x00000002;
            break;
          }
          case 26: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 26);
            int i = this.events == null ? 0 : this.events.length;
            com.android.internal.telephony.TelephonyProto.SmsSession.Event[] newArray =
                new com.android.internal.telephony.TelephonyProto.SmsSession.Event[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.events, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.TelephonyProto.SmsSession.Event();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.TelephonyProto.SmsSession.Event();
            input.readMessage(newArray[i]);
            this.events = newArray;
            break;
          }
          case 32: {
            eventsDropped_ = input.readBool();
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    }

    public static SmsSession parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new SmsSession(), data);
    }

    public static SmsSession parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new SmsSession().mergeFrom(input);
    }
  }
}
