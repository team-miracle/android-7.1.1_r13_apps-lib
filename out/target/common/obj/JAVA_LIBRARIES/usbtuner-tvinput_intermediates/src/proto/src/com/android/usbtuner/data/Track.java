// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.android.usbtuner.data;

// @@protoc_insertion_point(imports_scope)

@SuppressWarnings("hiding")
public interface Track {

  public static final class AtscAudioTrack extends
      com.google.protobuf.nano.MessageNano {

    // enum AudioType
    public static final int AUDIOTYPE_UNDEFINED = 0;
    public static final int AUDIOTYPE_CLEAN_EFFECTS = 1;
    public static final int AUDIOTYPE_HEARING_IMPAIRED = 2;
    public static final int AUDIOTYPE_VISUAL_IMPAIRED = 3;

    private static volatile AtscAudioTrack[] _emptyArray;
    public static AtscAudioTrack[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new AtscAudioTrack[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string language = 1;
    public java.lang.String language;

    // optional .com.android.usbtuner.data.AtscAudioTrack.AudioType audio_type = 2;
    public int audioType;

    // optional int32 index = 3;
    public int index;

    // optional int32 channel_count = 4;
    public int channelCount;

    // optional int32 sample_rate = 5;
    public int sampleRate;

    // @@protoc_insertion_point(class_scope:com.android.usbtuner.data.AtscAudioTrack)

    public AtscAudioTrack() {
      clear();
    }

    public AtscAudioTrack clear() {
      language = "";
      audioType = com.android.usbtuner.data.Track.AtscAudioTrack.AUDIOTYPE_UNDEFINED;
      index = 0;
      channelCount = 0;
      sampleRate = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.language.equals("")) {
        output.writeString(1, this.language);
      }
      if (this.audioType != com.android.usbtuner.data.Track.AtscAudioTrack.AUDIOTYPE_UNDEFINED) {
        output.writeInt32(2, this.audioType);
      }
      if (this.index != 0) {
        output.writeInt32(3, this.index);
      }
      if (this.channelCount != 0) {
        output.writeInt32(4, this.channelCount);
      }
      if (this.sampleRate != 0) {
        output.writeInt32(5, this.sampleRate);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.language.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(1, this.language);
      }
      if (this.audioType != com.android.usbtuner.data.Track.AtscAudioTrack.AUDIOTYPE_UNDEFINED) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(2, this.audioType);
      }
      if (this.index != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, this.index);
      }
      if (this.channelCount != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(4, this.channelCount);
      }
      if (this.sampleRate != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(5, this.sampleRate);
      }
      return size;
    }

    @Override
    public AtscAudioTrack mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.language = input.readString();
            break;
          }
          case 16: {
            int value = input.readInt32();
            switch (value) {
              case com.android.usbtuner.data.Track.AtscAudioTrack.AUDIOTYPE_UNDEFINED:
              case com.android.usbtuner.data.Track.AtscAudioTrack.AUDIOTYPE_CLEAN_EFFECTS:
              case com.android.usbtuner.data.Track.AtscAudioTrack.AUDIOTYPE_HEARING_IMPAIRED:
              case com.android.usbtuner.data.Track.AtscAudioTrack.AUDIOTYPE_VISUAL_IMPAIRED:
                this.audioType = value;
                break;
            }
            break;
          }
          case 24: {
            this.index = input.readInt32();
            break;
          }
          case 32: {
            this.channelCount = input.readInt32();
            break;
          }
          case 40: {
            this.sampleRate = input.readInt32();
            break;
          }
        }
      }
    }

    public static AtscAudioTrack parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new AtscAudioTrack(), data);
    }

    public static AtscAudioTrack parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new AtscAudioTrack().mergeFrom(input);
    }
  }

  public static final class AtscCaptionTrack extends
      com.google.protobuf.nano.MessageNano {

    private static volatile AtscCaptionTrack[] _emptyArray;
    public static AtscCaptionTrack[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new AtscCaptionTrack[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string language = 1;
    public java.lang.String language;

    // optional int32 service_number = 2;
    public int serviceNumber;

    // optional bool easy_reader = 3;
    public boolean easyReader;

    // optional bool wide_aspect_ratio = 4;
    public boolean wideAspectRatio;

    // @@protoc_insertion_point(class_scope:com.android.usbtuner.data.AtscCaptionTrack)

    public AtscCaptionTrack() {
      clear();
    }

    public AtscCaptionTrack clear() {
      language = "";
      serviceNumber = 0;
      easyReader = false;
      wideAspectRatio = false;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.language.equals("")) {
        output.writeString(1, this.language);
      }
      if (this.serviceNumber != 0) {
        output.writeInt32(2, this.serviceNumber);
      }
      if (this.easyReader != false) {
        output.writeBool(3, this.easyReader);
      }
      if (this.wideAspectRatio != false) {
        output.writeBool(4, this.wideAspectRatio);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.language.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(1, this.language);
      }
      if (this.serviceNumber != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.serviceNumber);
      }
      if (this.easyReader != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(3, this.easyReader);
      }
      if (this.wideAspectRatio != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(4, this.wideAspectRatio);
      }
      return size;
    }

    @Override
    public AtscCaptionTrack mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.language = input.readString();
            break;
          }
          case 16: {
            this.serviceNumber = input.readInt32();
            break;
          }
          case 24: {
            this.easyReader = input.readBool();
            break;
          }
          case 32: {
            this.wideAspectRatio = input.readBool();
            break;
          }
        }
      }
    }

    public static AtscCaptionTrack parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new AtscCaptionTrack(), data);
    }

    public static AtscCaptionTrack parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new AtscCaptionTrack().mergeFrom(input);
    }
  }
}
